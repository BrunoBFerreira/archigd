// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class namemessage;
class elementid;
class elementidlist;
class pointmessage;
class polyarcmessage;
class doublemessage;
class intlistmsg;
class repeateddoublemsg;
class additionalparams;
class rooflevelsmsg;
class transmatmessage;
class wallmsg;
class getwallmsg;
class wallmessage;
class doormessage;
class windowmessage;
class circlemessage;
class arcmessage;
class spheremessage;
class cylindermsg;
class shellcomplexmessage;
class shellsimplemessage;
class shellmessage;
class pointsmessage;
class polyarcsmessage;
class rotshellmessage;
class tshellmessage;
class oldholemessage;
class curtainwallmsg;
class translatemsg;
class slabmessage;
class meshmessage;
class rotatemsg;
class trimmsg;
class intersectmsg;
class columnmsg;
class storymsg;
class storyinfo;
class upperlevelmsg;
class wallsfromslab;
class columnsfromslab;
class stairsmsg;
class roofmsg;
class holemsg;
class mirrormsg;
class morphmsg;
class boxmsg;
class wallinfo;
class wallrepeated;
class slabrepeated;
class columnrepeated;
class objectrepeated;
class roofrepeated;
class levelrepeated;
class extrusionmsg;
class openmessage;
class transformmsg;
class applymatrix;
class beammsg;
class intarray;
class doublearray;
class boolarray;
class stringarray;
class objectmsg;
class libpartmsg;
class profilemsg;
class layermsg;
class layerelementmsg;
class splinemsg;
class linemsg;
class polylinemsg;
class getlinesmsg;
class getpolylinesmsg;
class revshellmsg;
class extshellmsg;
class rendermsg;
class cameramsg;

// ===================================================================

class namemessage : public ::google::protobuf::Message {
 public:
  namemessage();
  virtual ~namemessage();

  namemessage(const namemessage& from);

  inline namemessage& operator=(const namemessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const namemessage& default_instance();

  void Swap(namemessage* other);

  // implements Message ----------------------------------------------

  namemessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const namemessage& from);
  void MergeFrom(const namemessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:namemessage)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static namemessage* default_instance_;
};
// -------------------------------------------------------------------

class elementid : public ::google::protobuf::Message {
 public:
  elementid();
  virtual ~elementid();

  elementid(const elementid& from);

  inline elementid& operator=(const elementid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const elementid& default_instance();

  void Swap(elementid* other);

  // implements Message ----------------------------------------------

  elementid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const elementid& from);
  void MergeFrom(const elementid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required bool crashmaterial = 2;
  inline bool has_crashmaterial() const;
  inline void clear_crashmaterial();
  static const int kCrashmaterialFieldNumber = 2;
  inline bool crashmaterial() const;
  inline void set_crashmaterial(bool value);

  // @@protoc_insertion_point(class_scope:elementid)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_crashmaterial();
  inline void clear_has_crashmaterial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  bool crashmaterial_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static elementid* default_instance_;
};
// -------------------------------------------------------------------

class elementidlist : public ::google::protobuf::Message {
 public:
  elementidlist();
  virtual ~elementidlist();

  elementidlist(const elementidlist& from);

  inline elementidlist& operator=(const elementidlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const elementidlist& default_instance();

  void Swap(elementidlist* other);

  // implements Message ----------------------------------------------

  elementidlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const elementidlist& from);
  void MergeFrom(const elementidlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string guid = 1;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // required bool crashmaterial = 2;
  inline bool has_crashmaterial() const;
  inline void clear_crashmaterial();
  static const int kCrashmaterialFieldNumber = 2;
  inline bool crashmaterial() const;
  inline void set_crashmaterial(bool value);

  // @@protoc_insertion_point(class_scope:elementidlist)
 private:
  inline void set_has_crashmaterial();
  inline void clear_has_crashmaterial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  bool crashmaterial_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static elementidlist* default_instance_;
};
// -------------------------------------------------------------------

class pointmessage : public ::google::protobuf::Message {
 public:
  pointmessage();
  virtual ~pointmessage();

  pointmessage(const pointmessage& from);

  inline pointmessage& operator=(const pointmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pointmessage& default_instance();

  void Swap(pointmessage* other);

  // implements Message ----------------------------------------------

  pointmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pointmessage& from);
  void MergeFrom(const pointmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0x = 1;
  inline bool has_p0x() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x() const;
  inline void set_p0x(double value);

  // required double p0y = 2;
  inline bool has_p0y() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y() const;
  inline void set_p0y(double value);

  // @@protoc_insertion_point(class_scope:pointmessage)
 private:
  inline void set_has_p0x();
  inline void clear_has_p0x();
  inline void set_has_p0y();
  inline void clear_has_p0y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0x_;
  double p0y_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static pointmessage* default_instance_;
};
// -------------------------------------------------------------------

class polyarcmessage : public ::google::protobuf::Message {
 public:
  polyarcmessage();
  virtual ~polyarcmessage();

  polyarcmessage(const polyarcmessage& from);

  inline polyarcmessage& operator=(const polyarcmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const polyarcmessage& default_instance();

  void Swap(polyarcmessage* other);

  // implements Message ----------------------------------------------

  polyarcmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const polyarcmessage& from);
  void MergeFrom(const polyarcmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 begindex = 1;
  inline bool has_begindex() const;
  inline void clear_begindex();
  static const int kBegindexFieldNumber = 1;
  inline ::google::protobuf::int32 begindex() const;
  inline void set_begindex(::google::protobuf::int32 value);

  // required int32 endindex = 2;
  inline bool has_endindex() const;
  inline void clear_endindex();
  static const int kEndindexFieldNumber = 2;
  inline ::google::protobuf::int32 endindex() const;
  inline void set_endindex(::google::protobuf::int32 value);

  // required double arcangle = 3;
  inline bool has_arcangle() const;
  inline void clear_arcangle();
  static const int kArcangleFieldNumber = 3;
  inline double arcangle() const;
  inline void set_arcangle(double value);

  // @@protoc_insertion_point(class_scope:polyarcmessage)
 private:
  inline void set_has_begindex();
  inline void clear_has_begindex();
  inline void set_has_endindex();
  inline void clear_has_endindex();
  inline void set_has_arcangle();
  inline void clear_has_arcangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 begindex_;
  ::google::protobuf::int32 endindex_;
  double arcangle_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static polyarcmessage* default_instance_;
};
// -------------------------------------------------------------------

class doublemessage : public ::google::protobuf::Message {
 public:
  doublemessage();
  virtual ~doublemessage();

  doublemessage(const doublemessage& from);

  inline doublemessage& operator=(const doublemessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doublemessage& default_instance();

  void Swap(doublemessage* other);

  // implements Message ----------------------------------------------

  doublemessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const doublemessage& from);
  void MergeFrom(const doublemessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double d = 1;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 1;
  inline double d() const;
  inline void set_d(double value);

  // @@protoc_insertion_point(class_scope:doublemessage)
 private:
  inline void set_has_d();
  inline void clear_has_d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double d_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static doublemessage* default_instance_;
};
// -------------------------------------------------------------------

class intlistmsg : public ::google::protobuf::Message {
 public:
  intlistmsg();
  virtual ~intlistmsg();

  intlistmsg(const intlistmsg& from);

  inline intlistmsg& operator=(const intlistmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const intlistmsg& default_instance();

  void Swap(intlistmsg* other);

  // implements Message ----------------------------------------------

  intlistmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const intlistmsg& from);
  void MergeFrom(const intlistmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ilist = 1;
  inline int ilist_size() const;
  inline void clear_ilist();
  static const int kIlistFieldNumber = 1;
  inline ::google::protobuf::int32 ilist(int index) const;
  inline void set_ilist(int index, ::google::protobuf::int32 value);
  inline void add_ilist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ilist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ilist();

  // @@protoc_insertion_point(class_scope:intlistmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ilist_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static intlistmsg* default_instance_;
};
// -------------------------------------------------------------------

class repeateddoublemsg : public ::google::protobuf::Message {
 public:
  repeateddoublemsg();
  virtual ~repeateddoublemsg();

  repeateddoublemsg(const repeateddoublemsg& from);

  inline repeateddoublemsg& operator=(const repeateddoublemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const repeateddoublemsg& default_instance();

  void Swap(repeateddoublemsg* other);

  // implements Message ----------------------------------------------

  repeateddoublemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const repeateddoublemsg& from);
  void MergeFrom(const repeateddoublemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double dlist = 1;
  inline int dlist_size() const;
  inline void clear_dlist();
  static const int kDlistFieldNumber = 1;
  inline double dlist(int index) const;
  inline void set_dlist(int index, double value);
  inline void add_dlist(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dlist() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dlist();

  // @@protoc_insertion_point(class_scope:repeateddoublemsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > dlist_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static repeateddoublemsg* default_instance_;
};
// -------------------------------------------------------------------

class additionalparams : public ::google::protobuf::Message {
 public:
  additionalparams();
  virtual ~additionalparams();

  additionalparams(const additionalparams& from);

  inline additionalparams& operator=(const additionalparams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const additionalparams& default_instance();

  void Swap(additionalparams* other);

  // implements Message ----------------------------------------------

  additionalparams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const additionalparams& from);
  void MergeFrom(const additionalparams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated double doubles = 2;
  inline int doubles_size() const;
  inline void clear_doubles();
  static const int kDoublesFieldNumber = 2;
  inline double doubles(int index) const;
  inline void set_doubles(int index, double value);
  inline void add_doubles(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      doubles() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_doubles();

  // repeated string strings = 3;
  inline int strings_size() const;
  inline void clear_strings();
  static const int kStringsFieldNumber = 3;
  inline const ::std::string& strings(int index) const;
  inline ::std::string* mutable_strings(int index);
  inline void set_strings(int index, const ::std::string& value);
  inline void set_strings(int index, const char* value);
  inline void set_strings(int index, const char* value, size_t size);
  inline ::std::string* add_strings();
  inline void add_strings(const ::std::string& value);
  inline void add_strings(const char* value);
  inline void add_strings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // repeated int32 integers = 4;
  inline int integers_size() const;
  inline void clear_integers();
  static const int kIntegersFieldNumber = 4;
  inline ::google::protobuf::int32 integers(int index) const;
  inline void set_integers(int index, ::google::protobuf::int32 value);
  inline void add_integers(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      integers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_integers();

  // repeated bool booleans = 5;
  inline int booleans_size() const;
  inline void clear_booleans();
  static const int kBooleansFieldNumber = 5;
  inline bool booleans(int index) const;
  inline void set_booleans(int index, bool value);
  inline void add_booleans(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      booleans() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_booleans();

  // repeated string paramtype = 6;
  inline int paramtype_size() const;
  inline void clear_paramtype();
  static const int kParamtypeFieldNumber = 6;
  inline const ::std::string& paramtype(int index) const;
  inline ::std::string* mutable_paramtype(int index);
  inline void set_paramtype(int index, const ::std::string& value);
  inline void set_paramtype(int index, const char* value);
  inline void set_paramtype(int index, const char* value, size_t size);
  inline ::std::string* add_paramtype();
  inline void add_paramtype(const ::std::string& value);
  inline void add_paramtype(const char* value);
  inline void add_paramtype(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramtype() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramtype();

  // repeated .intarray intarrays = 7;
  inline int intarrays_size() const;
  inline void clear_intarrays();
  static const int kIntarraysFieldNumber = 7;
  inline const ::intarray& intarrays(int index) const;
  inline ::intarray* mutable_intarrays(int index);
  inline ::intarray* add_intarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::intarray >&
      intarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::intarray >*
      mutable_intarrays();

  // repeated .doublearray doublearrays = 8;
  inline int doublearrays_size() const;
  inline void clear_doublearrays();
  static const int kDoublearraysFieldNumber = 8;
  inline const ::doublearray& doublearrays(int index) const;
  inline ::doublearray* mutable_doublearrays(int index);
  inline ::doublearray* add_doublearrays();
  inline const ::google::protobuf::RepeatedPtrField< ::doublearray >&
      doublearrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::doublearray >*
      mutable_doublearrays();

  // repeated .boolarray boolarrays = 9;
  inline int boolarrays_size() const;
  inline void clear_boolarrays();
  static const int kBoolarraysFieldNumber = 9;
  inline const ::boolarray& boolarrays(int index) const;
  inline ::boolarray* mutable_boolarrays(int index);
  inline ::boolarray* add_boolarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::boolarray >&
      boolarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::boolarray >*
      mutable_boolarrays();

  // repeated .stringarray stringarrays = 10;
  inline int stringarrays_size() const;
  inline void clear_stringarrays();
  static const int kStringarraysFieldNumber = 10;
  inline const ::stringarray& stringarrays(int index) const;
  inline ::stringarray* mutable_stringarrays(int index);
  inline ::stringarray* add_stringarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::stringarray >&
      stringarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::stringarray >*
      mutable_stringarrays();

  // repeated bool isarray = 11;
  inline int isarray_size() const;
  inline void clear_isarray();
  static const int kIsarrayFieldNumber = 11;
  inline bool isarray(int index) const;
  inline void set_isarray(int index, bool value);
  inline void add_isarray(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      isarray() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_isarray();

  // @@protoc_insertion_point(class_scope:additionalparams)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedField< double > doubles_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > integers_;
  ::google::protobuf::RepeatedField< bool > booleans_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramtype_;
  ::google::protobuf::RepeatedPtrField< ::intarray > intarrays_;
  ::google::protobuf::RepeatedPtrField< ::doublearray > doublearrays_;
  ::google::protobuf::RepeatedPtrField< ::boolarray > boolarrays_;
  ::google::protobuf::RepeatedPtrField< ::stringarray > stringarrays_;
  ::google::protobuf::RepeatedField< bool > isarray_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static additionalparams* default_instance_;
};
// -------------------------------------------------------------------

class rooflevelsmsg : public ::google::protobuf::Message {
 public:
  rooflevelsmsg();
  virtual ~rooflevelsmsg();

  rooflevelsmsg(const rooflevelsmsg& from);

  inline rooflevelsmsg& operator=(const rooflevelsmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rooflevelsmsg& default_instance();

  void Swap(rooflevelsmsg* other);

  // implements Message ----------------------------------------------

  rooflevelsmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rooflevelsmsg& from);
  void MergeFrom(const rooflevelsmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double angle = 1;
  inline int angle_size() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 1;
  inline double angle(int index) const;
  inline void set_angle(int index, double value);
  inline void add_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angle();

  // repeated double height = 2;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline double height(int index) const;
  inline void set_height(int index, double value);
  inline void add_height(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      height() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_height();

  // @@protoc_insertion_point(class_scope:rooflevelsmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > angle_;
  ::google::protobuf::RepeatedField< double > height_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static rooflevelsmsg* default_instance_;
};
// -------------------------------------------------------------------

class transmatmessage : public ::google::protobuf::Message {
 public:
  transmatmessage();
  virtual ~transmatmessage();

  transmatmessage(const transmatmessage& from);

  inline transmatmessage& operator=(const transmatmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const transmatmessage& default_instance();

  void Swap(transmatmessage* other);

  // implements Message ----------------------------------------------

  transmatmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const transmatmessage& from);
  void MergeFrom(const transmatmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0 = 1;
  inline bool has_p0() const;
  inline void clear_p0();
  static const int kP0FieldNumber = 1;
  inline double p0() const;
  inline void set_p0(double value);

  // required double p1 = 2;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 2;
  inline double p1() const;
  inline void set_p1(double value);

  // required double p2 = 3;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 3;
  inline double p2() const;
  inline void set_p2(double value);

  // required double p3 = 4;
  inline bool has_p3() const;
  inline void clear_p3();
  static const int kP3FieldNumber = 4;
  inline double p3() const;
  inline void set_p3(double value);

  // required double p4 = 5;
  inline bool has_p4() const;
  inline void clear_p4();
  static const int kP4FieldNumber = 5;
  inline double p4() const;
  inline void set_p4(double value);

  // required double p5 = 6;
  inline bool has_p5() const;
  inline void clear_p5();
  static const int kP5FieldNumber = 6;
  inline double p5() const;
  inline void set_p5(double value);

  // required double p6 = 7;
  inline bool has_p6() const;
  inline void clear_p6();
  static const int kP6FieldNumber = 7;
  inline double p6() const;
  inline void set_p6(double value);

  // required double p7 = 8;
  inline bool has_p7() const;
  inline void clear_p7();
  static const int kP7FieldNumber = 8;
  inline double p7() const;
  inline void set_p7(double value);

  // required double p8 = 9;
  inline bool has_p8() const;
  inline void clear_p8();
  static const int kP8FieldNumber = 9;
  inline double p8() const;
  inline void set_p8(double value);

  // required double p9 = 10;
  inline bool has_p9() const;
  inline void clear_p9();
  static const int kP9FieldNumber = 10;
  inline double p9() const;
  inline void set_p9(double value);

  // required double p10 = 11;
  inline bool has_p10() const;
  inline void clear_p10();
  static const int kP10FieldNumber = 11;
  inline double p10() const;
  inline void set_p10(double value);

  // required double p11 = 12;
  inline bool has_p11() const;
  inline void clear_p11();
  static const int kP11FieldNumber = 12;
  inline double p11() const;
  inline void set_p11(double value);

  // @@protoc_insertion_point(class_scope:transmatmessage)
 private:
  inline void set_has_p0();
  inline void clear_has_p0();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_p3();
  inline void clear_has_p3();
  inline void set_has_p4();
  inline void clear_has_p4();
  inline void set_has_p5();
  inline void clear_has_p5();
  inline void set_has_p6();
  inline void clear_has_p6();
  inline void set_has_p7();
  inline void clear_has_p7();
  inline void set_has_p8();
  inline void clear_has_p8();
  inline void set_has_p9();
  inline void clear_has_p9();
  inline void set_has_p10();
  inline void clear_has_p10();
  inline void set_has_p11();
  inline void clear_has_p11();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0_;
  double p1_;
  double p2_;
  double p3_;
  double p4_;
  double p5_;
  double p6_;
  double p7_;
  double p8_;
  double p9_;
  double p10_;
  double p11_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static transmatmessage* default_instance_;
};
// -------------------------------------------------------------------

class wallmsg : public ::google::protobuf::Message {
 public:
  wallmsg();
  virtual ~wallmsg();

  wallmsg(const wallmsg& from);

  inline wallmsg& operator=(const wallmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallmsg& default_instance();

  void Swap(wallmsg* other);

  // implements Message ----------------------------------------------

  wallmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallmsg& from);
  void MergeFrom(const wallmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bottomindex = 1;
  inline bool has_bottomindex() const;
  inline void clear_bottomindex();
  static const int kBottomindexFieldNumber = 1;
  inline ::google::protobuf::int32 bottomindex() const;
  inline void set_bottomindex(::google::protobuf::int32 value);

  // required double thickness = 2;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 2;
  inline double thickness() const;
  inline void set_thickness(double value);

  // optional .polyarcsmessage arcs = 3;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 3;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // required int32 upperindex = 4;
  inline bool has_upperindex() const;
  inline void clear_upperindex();
  static const int kUpperindexFieldNumber = 4;
  inline ::google::protobuf::int32 upperindex() const;
  inline void set_upperindex(::google::protobuf::int32 value);

  // required string material = 5;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 5;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string referenceline = 7;
  inline bool has_referenceline() const;
  inline void clear_referenceline();
  static const int kReferencelineFieldNumber = 7;
  inline const ::std::string& referenceline() const;
  inline void set_referenceline(const ::std::string& value);
  inline void set_referenceline(const char* value);
  inline void set_referenceline(const char* value, size_t size);
  inline ::std::string* mutable_referenceline();
  inline ::std::string* release_referenceline();
  inline void set_allocated_referenceline(::std::string* referenceline);

  // required double alphaangle = 8;
  inline bool has_alphaangle() const;
  inline void clear_alphaangle();
  static const int kAlphaangleFieldNumber = 8;
  inline double alphaangle() const;
  inline void set_alphaangle(double value);

  // required double betaangle = 9;
  inline bool has_betaangle() const;
  inline void clear_betaangle();
  static const int kBetaangleFieldNumber = 9;
  inline double betaangle() const;
  inline void set_betaangle(double value);

  // required string typeprofile = 10;
  inline bool has_typeprofile() const;
  inline void clear_typeprofile();
  static const int kTypeprofileFieldNumber = 10;
  inline const ::std::string& typeprofile() const;
  inline void set_typeprofile(const ::std::string& value);
  inline void set_typeprofile(const char* value);
  inline void set_typeprofile(const char* value, size_t size);
  inline ::std::string* mutable_typeprofile();
  inline ::std::string* release_typeprofile();
  inline void set_allocated_typeprofile(::std::string* typeprofile);

  // optional .pointsmessage pts = 11;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 11;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional string profilename = 12;
  inline bool has_profilename() const;
  inline void clear_profilename();
  static const int kProfilenameFieldNumber = 12;
  inline const ::std::string& profilename() const;
  inline void set_profilename(const ::std::string& value);
  inline void set_profilename(const char* value);
  inline void set_profilename(const char* value, size_t size);
  inline ::std::string* mutable_profilename();
  inline ::std::string* release_profilename();
  inline void set_allocated_profilename(::std::string* profilename);

  // optional double height = 13;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 13;
  inline double height() const;
  inline void set_height(double value);

  // optional bool flipped = 14;
  inline bool has_flipped() const;
  inline void clear_flipped();
  static const int kFlippedFieldNumber = 14;
  inline bool flipped() const;
  inline void set_flipped(bool value);

  // optional double bottomoffset = 15;
  inline bool has_bottomoffset() const;
  inline void clear_bottomoffset();
  static const int kBottomoffsetFieldNumber = 15;
  inline double bottomoffset() const;
  inline void set_bottomoffset(double value);

  // optional string layer = 16;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 16;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // repeated .windowmessage windows = 17;
  inline int windows_size() const;
  inline void clear_windows();
  static const int kWindowsFieldNumber = 17;
  inline const ::windowmessage& windows(int index) const;
  inline ::windowmessage* mutable_windows(int index);
  inline ::windowmessage* add_windows();
  inline const ::google::protobuf::RepeatedPtrField< ::windowmessage >&
      windows() const;
  inline ::google::protobuf::RepeatedPtrField< ::windowmessage >*
      mutable_windows();

  // repeated double windoworder = 18;
  inline int windoworder_size() const;
  inline void clear_windoworder();
  static const int kWindoworderFieldNumber = 18;
  inline double windoworder(int index) const;
  inline void set_windoworder(int index, double value);
  inline void add_windoworder(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      windoworder() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_windoworder();

  // required double refoffset = 19;
  inline bool has_refoffset() const;
  inline void clear_refoffset();
  static const int kRefoffsetFieldNumber = 19;
  inline double refoffset() const;
  inline void set_refoffset(double value);

  // required string refmat = 20;
  inline bool has_refmat() const;
  inline void clear_refmat();
  static const int kRefmatFieldNumber = 20;
  inline const ::std::string& refmat() const;
  inline void set_refmat(const ::std::string& value);
  inline void set_refmat(const char* value);
  inline void set_refmat(const char* value, size_t size);
  inline ::std::string* mutable_refmat();
  inline ::std::string* release_refmat();
  inline void set_allocated_refmat(::std::string* refmat);

  // required string oppmat = 21;
  inline bool has_oppmat() const;
  inline void clear_oppmat();
  static const int kOppmatFieldNumber = 21;
  inline const ::std::string& oppmat() const;
  inline void set_oppmat(const ::std::string& value);
  inline void set_oppmat(const char* value);
  inline void set_oppmat(const char* value, size_t size);
  inline ::std::string* mutable_oppmat();
  inline ::std::string* release_oppmat();
  inline void set_allocated_oppmat(::std::string* oppmat);

  // required string sidmat = 22;
  inline bool has_sidmat() const;
  inline void clear_sidmat();
  static const int kSidmatFieldNumber = 22;
  inline const ::std::string& sidmat() const;
  inline void set_sidmat(const ::std::string& value);
  inline void set_sidmat(const char* value);
  inline void set_sidmat(const char* value, size_t size);
  inline ::std::string* mutable_sidmat();
  inline ::std::string* release_sidmat();
  inline void set_allocated_sidmat(::std::string* sidmat);

  // optional bool toplinked = 23;
  inline bool has_toplinked() const;
  inline void clear_toplinked();
  static const int kToplinkedFieldNumber = 23;
  inline bool toplinked() const;
  inline void set_toplinked(bool value);

  // @@protoc_insertion_point(class_scope:wallmsg)
 private:
  inline void set_has_bottomindex();
  inline void clear_has_bottomindex();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_upperindex();
  inline void clear_has_upperindex();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_referenceline();
  inline void clear_has_referenceline();
  inline void set_has_alphaangle();
  inline void clear_has_alphaangle();
  inline void set_has_betaangle();
  inline void clear_has_betaangle();
  inline void set_has_typeprofile();
  inline void clear_has_typeprofile();
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_profilename();
  inline void clear_has_profilename();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_flipped();
  inline void clear_has_flipped();
  inline void set_has_bottomoffset();
  inline void clear_has_bottomoffset();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_refoffset();
  inline void clear_has_refoffset();
  inline void set_has_refmat();
  inline void clear_has_refmat();
  inline void set_has_oppmat();
  inline void clear_has_oppmat();
  inline void set_has_sidmat();
  inline void clear_has_sidmat();
  inline void set_has_toplinked();
  inline void clear_has_toplinked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double thickness_;
  ::google::protobuf::int32 bottomindex_;
  ::google::protobuf::int32 upperindex_;
  ::polyarcsmessage* arcs_;
  ::std::string* material_;
  ::std::string* type_;
  ::std::string* referenceline_;
  double alphaangle_;
  double betaangle_;
  ::std::string* typeprofile_;
  ::pointsmessage* pts_;
  ::std::string* profilename_;
  double height_;
  double bottomoffset_;
  ::std::string* layer_;
  ::google::protobuf::RepeatedPtrField< ::windowmessage > windows_;
  ::google::protobuf::RepeatedField< double > windoworder_;
  double refoffset_;
  ::std::string* refmat_;
  ::std::string* oppmat_;
  ::std::string* sidmat_;
  bool flipped_;
  bool toplinked_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static wallmsg* default_instance_;
};
// -------------------------------------------------------------------

class getwallmsg : public ::google::protobuf::Message {
 public:
  getwallmsg();
  virtual ~getwallmsg();

  getwallmsg(const getwallmsg& from);

  inline getwallmsg& operator=(const getwallmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getwallmsg& default_instance();

  void Swap(getwallmsg* other);

  // implements Message ----------------------------------------------

  getwallmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getwallmsg& from);
  void MergeFrom(const getwallmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .wallmsg walls = 1;
  inline int walls_size() const;
  inline void clear_walls();
  static const int kWallsFieldNumber = 1;
  inline const ::wallmsg& walls(int index) const;
  inline ::wallmsg* mutable_walls(int index);
  inline ::wallmsg* add_walls();
  inline const ::google::protobuf::RepeatedPtrField< ::wallmsg >&
      walls() const;
  inline ::google::protobuf::RepeatedPtrField< ::wallmsg >*
      mutable_walls();

  // repeated string guid = 2;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // @@protoc_insertion_point(class_scope:getwallmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::wallmsg > walls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static getwallmsg* default_instance_;
};
// -------------------------------------------------------------------

class wallmessage : public ::google::protobuf::Message {
 public:
  wallmessage();
  virtual ~wallmessage();

  wallmessage(const wallmessage& from);

  inline wallmessage& operator=(const wallmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallmessage& default_instance();

  void Swap(wallmessage* other);

  // implements Message ----------------------------------------------

  wallmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallmessage& from);
  void MergeFrom(const wallmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0x = 1;
  inline bool has_p0x() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x() const;
  inline void set_p0x(double value);

  // required double p0y = 2;
  inline bool has_p0y() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y() const;
  inline void set_p0y(double value);

  // required double p1x = 3;
  inline bool has_p1x() const;
  inline void clear_p1x();
  static const int kP1XFieldNumber = 3;
  inline double p1x() const;
  inline void set_p1x(double value);

  // required double p1y = 4;
  inline bool has_p1y() const;
  inline void clear_p1y();
  static const int kP1YFieldNumber = 4;
  inline double p1y() const;
  inline void set_p1y(double value);

  // required double height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline double height() const;
  inline void set_height(double value);

  // required double thickness = 6;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 6;
  inline double thickness() const;
  inline void set_thickness(double value);

  // required double angle = 7;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 7;
  inline double angle() const;
  inline void set_angle(double value);

  // required double bottom = 8;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 8;
  inline double bottom() const;
  inline void set_bottom(double value);

  // required string material = 9;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 9;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string referenceline = 11;
  inline bool has_referenceline() const;
  inline void clear_referenceline();
  static const int kReferencelineFieldNumber = 11;
  inline const ::std::string& referenceline() const;
  inline void set_referenceline(const ::std::string& value);
  inline void set_referenceline(const char* value);
  inline void set_referenceline(const char* value, size_t size);
  inline ::std::string* mutable_referenceline();
  inline ::std::string* release_referenceline();
  inline void set_allocated_referenceline(::std::string* referenceline);

  // optional int32 bottomstory = 12;
  inline bool has_bottomstory() const;
  inline void clear_bottomstory();
  static const int kBottomstoryFieldNumber = 12;
  inline ::google::protobuf::int32 bottomstory() const;
  inline void set_bottomstory(::google::protobuf::int32 value);

  // optional int32 topstory = 13;
  inline bool has_topstory() const;
  inline void clear_topstory();
  static const int kTopstoryFieldNumber = 13;
  inline ::google::protobuf::int32 topstory() const;
  inline void set_topstory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wallmessage)
 private:
  inline void set_has_p0x();
  inline void clear_has_p0x();
  inline void set_has_p0y();
  inline void clear_has_p0y();
  inline void set_has_p1x();
  inline void clear_has_p1x();
  inline void set_has_p1y();
  inline void clear_has_p1y();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_referenceline();
  inline void clear_has_referenceline();
  inline void set_has_bottomstory();
  inline void clear_has_bottomstory();
  inline void set_has_topstory();
  inline void clear_has_topstory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0x_;
  double p0y_;
  double p1x_;
  double p1y_;
  double height_;
  double thickness_;
  double angle_;
  double bottom_;
  ::std::string* material_;
  ::std::string* type_;
  ::std::string* referenceline_;
  ::google::protobuf::int32 bottomstory_;
  ::google::protobuf::int32 topstory_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static wallmessage* default_instance_;
};
// -------------------------------------------------------------------

class doormessage : public ::google::protobuf::Message {
 public:
  doormessage();
  virtual ~doormessage();

  doormessage(const doormessage& from);

  inline doormessage& operator=(const doormessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doormessage& default_instance();

  void Swap(doormessage* other);

  // implements Message ----------------------------------------------

  doormessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const doormessage& from);
  void MergeFrom(const doormessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required double objloc = 2;
  inline bool has_objloc() const;
  inline void clear_objloc();
  static const int kObjlocFieldNumber = 2;
  inline double objloc() const;
  inline void set_objloc(double value);

  // required double zpos = 3;
  inline bool has_zpos() const;
  inline void clear_zpos();
  static const int kZposFieldNumber = 3;
  inline double zpos() const;
  inline void set_zpos(double value);

  // required double height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline double height() const;
  inline void set_height(double value);

  // required double width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline double width() const;
  inline void set_width(double value);

  // required bool hole = 6;
  inline bool has_hole() const;
  inline void clear_hole();
  static const int kHoleFieldNumber = 6;
  inline bool hole() const;
  inline void set_hole(bool value);

  // required string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bool flipx = 8;
  inline bool has_flipx() const;
  inline void clear_flipx();
  static const int kFlipxFieldNumber = 8;
  inline bool flipx() const;
  inline void set_flipx(bool value);

  // required bool flipy = 9;
  inline bool has_flipy() const;
  inline void clear_flipy();
  static const int kFlipyFieldNumber = 9;
  inline bool flipy() const;
  inline void set_flipy(bool value);

  // required .additionalparams params = 10;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 10;
  inline const ::additionalparams& params() const;
  inline ::additionalparams* mutable_params();
  inline ::additionalparams* release_params();
  inline void set_allocated_params(::additionalparams* params);

  // required double depthoffset = 11;
  inline bool has_depthoffset() const;
  inline void clear_depthoffset();
  static const int kDepthoffsetFieldNumber = 11;
  inline double depthoffset() const;
  inline void set_depthoffset(double value);

  // optional string layer = 12;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 12;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:doormessage)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_objloc();
  inline void clear_has_objloc();
  inline void set_has_zpos();
  inline void clear_has_zpos();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_hole();
  inline void clear_has_hole();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flipx();
  inline void clear_has_flipx();
  inline void set_has_flipy();
  inline void clear_has_flipy();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_depthoffset();
  inline void clear_has_depthoffset();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  double objloc_;
  double zpos_;
  double height_;
  double width_;
  ::std::string* name_;
  ::additionalparams* params_;
  double depthoffset_;
  ::std::string* layer_;
  bool hole_;
  bool flipx_;
  bool flipy_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static doormessage* default_instance_;
};
// -------------------------------------------------------------------

class windowmessage : public ::google::protobuf::Message {
 public:
  windowmessage();
  virtual ~windowmessage();

  windowmessage(const windowmessage& from);

  inline windowmessage& operator=(const windowmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const windowmessage& default_instance();

  void Swap(windowmessage* other);

  // implements Message ----------------------------------------------

  windowmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const windowmessage& from);
  void MergeFrom(const windowmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required double objloc = 2;
  inline bool has_objloc() const;
  inline void clear_objloc();
  static const int kObjlocFieldNumber = 2;
  inline double objloc() const;
  inline void set_objloc(double value);

  // required double zpos = 3;
  inline bool has_zpos() const;
  inline void clear_zpos();
  static const int kZposFieldNumber = 3;
  inline double zpos() const;
  inline void set_zpos(double value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .additionalparams params = 5;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::additionalparams& params() const;
  inline ::additionalparams* mutable_params();
  inline ::additionalparams* release_params();
  inline void set_allocated_params(::additionalparams* params);

  // required double width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline double width() const;
  inline void set_width(double value);

  // required double height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline double height() const;
  inline void set_height(double value);

  // required double depthoffset = 8;
  inline bool has_depthoffset() const;
  inline void clear_depthoffset();
  static const int kDepthoffsetFieldNumber = 8;
  inline double depthoffset() const;
  inline void set_depthoffset(double value);

  // required bool flipx = 9;
  inline bool has_flipx() const;
  inline void clear_flipx();
  static const int kFlipxFieldNumber = 9;
  inline bool flipx() const;
  inline void set_flipx(bool value);

  // required bool flipy = 10;
  inline bool has_flipy() const;
  inline void clear_flipy();
  static const int kFlipyFieldNumber = 10;
  inline bool flipy() const;
  inline void set_flipy(bool value);

  // optional string layer = 11;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 11;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:windowmessage)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_objloc();
  inline void clear_has_objloc();
  inline void set_has_zpos();
  inline void clear_has_zpos();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_depthoffset();
  inline void clear_has_depthoffset();
  inline void set_has_flipx();
  inline void clear_has_flipx();
  inline void set_has_flipy();
  inline void clear_has_flipy();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  double objloc_;
  double zpos_;
  ::std::string* name_;
  ::additionalparams* params_;
  double width_;
  double height_;
  double depthoffset_;
  ::std::string* layer_;
  bool flipx_;
  bool flipy_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static windowmessage* default_instance_;
};
// -------------------------------------------------------------------

class circlemessage : public ::google::protobuf::Message {
 public:
  circlemessage();
  virtual ~circlemessage();

  circlemessage(const circlemessage& from);

  inline circlemessage& operator=(const circlemessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const circlemessage& default_instance();

  void Swap(circlemessage* other);

  // implements Message ----------------------------------------------

  circlemessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const circlemessage& from);
  void MergeFrom(const circlemessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0x = 1;
  inline bool has_p0x() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x() const;
  inline void set_p0x(double value);

  // required double p0y = 2;
  inline bool has_p0y() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y() const;
  inline void set_p0y(double value);

  // required double radius = 3;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 3;
  inline double radius() const;
  inline void set_radius(double value);

  // @@protoc_insertion_point(class_scope:circlemessage)
 private:
  inline void set_has_p0x();
  inline void clear_has_p0x();
  inline void set_has_p0y();
  inline void clear_has_p0y();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0x_;
  double p0y_;
  double radius_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static circlemessage* default_instance_;
};
// -------------------------------------------------------------------

class arcmessage : public ::google::protobuf::Message {
 public:
  arcmessage();
  virtual ~arcmessage();

  arcmessage(const arcmessage& from);

  inline arcmessage& operator=(const arcmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const arcmessage& default_instance();

  void Swap(arcmessage* other);

  // implements Message ----------------------------------------------

  arcmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const arcmessage& from);
  void MergeFrom(const arcmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0x = 1;
  inline bool has_p0x() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x() const;
  inline void set_p0x(double value);

  // required double p0y = 2;
  inline bool has_p0y() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y() const;
  inline void set_p0y(double value);

  // required double radius = 3;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 3;
  inline double radius() const;
  inline void set_radius(double value);

  // required double angle = 4;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 4;
  inline double angle() const;
  inline void set_angle(double value);

  // required double begang = 5;
  inline bool has_begang() const;
  inline void clear_begang();
  static const int kBegangFieldNumber = 5;
  inline double begang() const;
  inline void set_begang(double value);

  // required double endang = 6;
  inline bool has_endang() const;
  inline void clear_endang();
  static const int kEndangFieldNumber = 6;
  inline double endang() const;
  inline void set_endang(double value);

  // @@protoc_insertion_point(class_scope:arcmessage)
 private:
  inline void set_has_p0x();
  inline void clear_has_p0x();
  inline void set_has_p0y();
  inline void clear_has_p0y();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_begang();
  inline void clear_has_begang();
  inline void set_has_endang();
  inline void clear_has_endang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0x_;
  double p0y_;
  double radius_;
  double angle_;
  double begang_;
  double endang_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static arcmessage* default_instance_;
};
// -------------------------------------------------------------------

class spheremessage : public ::google::protobuf::Message {
 public:
  spheremessage();
  virtual ~spheremessage();

  spheremessage(const spheremessage& from);

  inline spheremessage& operator=(const spheremessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const spheremessage& default_instance();

  void Swap(spheremessage* other);

  // implements Message ----------------------------------------------

  spheremessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const spheremessage& from);
  void MergeFrom(const spheremessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double c0x = 1;
  inline bool has_c0x() const;
  inline void clear_c0x();
  static const int kC0XFieldNumber = 1;
  inline double c0x() const;
  inline void set_c0x(double value);

  // required double c0y = 2;
  inline bool has_c0y() const;
  inline void clear_c0y();
  static const int kC0YFieldNumber = 2;
  inline double c0y() const;
  inline void set_c0y(double value);

  // required double c0z = 3;
  inline bool has_c0z() const;
  inline void clear_c0z();
  static const int kC0ZFieldNumber = 3;
  inline double c0z() const;
  inline void set_c0z(double value);

  // required double radius = 4;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 4;
  inline double radius() const;
  inline void set_radius(double value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spheremessage)
 private:
  inline void set_has_c0x();
  inline void clear_has_c0x();
  inline void set_has_c0y();
  inline void clear_has_c0y();
  inline void set_has_c0z();
  inline void clear_has_c0z();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double c0x_;
  double c0y_;
  double c0z_;
  double radius_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static spheremessage* default_instance_;
};
// -------------------------------------------------------------------

class cylindermsg : public ::google::protobuf::Message {
 public:
  cylindermsg();
  virtual ~cylindermsg();

  cylindermsg(const cylindermsg& from);

  inline cylindermsg& operator=(const cylindermsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cylindermsg& default_instance();

  void Swap(cylindermsg* other);

  // implements Message ----------------------------------------------

  cylindermsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cylindermsg& from);
  void MergeFrom(const cylindermsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double p0x = 1;
  inline bool has_p0x() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x() const;
  inline void set_p0x(double value);

  // required double p0y = 2;
  inline bool has_p0y() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y() const;
  inline void set_p0y(double value);

  // required double p0z = 3;
  inline bool has_p0z() const;
  inline void clear_p0z();
  static const int kP0ZFieldNumber = 3;
  inline double p0z() const;
  inline void set_p0z(double value);

  // required double p1x = 4;
  inline bool has_p1x() const;
  inline void clear_p1x();
  static const int kP1XFieldNumber = 4;
  inline double p1x() const;
  inline void set_p1x(double value);

  // required double p1y = 5;
  inline bool has_p1y() const;
  inline void clear_p1y();
  static const int kP1YFieldNumber = 5;
  inline double p1y() const;
  inline void set_p1y(double value);

  // required double p1z = 6;
  inline bool has_p1z() const;
  inline void clear_p1z();
  static const int kP1ZFieldNumber = 6;
  inline double p1z() const;
  inline void set_p1z(double value);

  // required double radius = 7;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 7;
  inline double radius() const;
  inline void set_radius(double value);

  // required int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cylindermsg)
 private:
  inline void set_has_p0x();
  inline void clear_has_p0x();
  inline void set_has_p0y();
  inline void clear_has_p0y();
  inline void set_has_p0z();
  inline void clear_has_p0z();
  inline void set_has_p1x();
  inline void clear_has_p1x();
  inline void set_has_p1y();
  inline void clear_has_p1y();
  inline void set_has_p1z();
  inline void clear_has_p1z();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double p0x_;
  double p0y_;
  double p0z_;
  double p1x_;
  double p1y_;
  double p1z_;
  double radius_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static cylindermsg* default_instance_;
};
// -------------------------------------------------------------------

class shellcomplexmessage : public ::google::protobuf::Message {
 public:
  shellcomplexmessage();
  virtual ~shellcomplexmessage();

  shellcomplexmessage(const shellcomplexmessage& from);

  inline shellcomplexmessage& operator=(const shellcomplexmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shellcomplexmessage& default_instance();

  void Swap(shellcomplexmessage* other);

  // implements Message ----------------------------------------------

  shellcomplexmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shellcomplexmessage& from);
  void MergeFrom(const shellcomplexmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numpoints = 1;
  inline bool has_numpoints() const;
  inline void clear_numpoints();
  static const int kNumpointsFieldNumber = 1;
  inline ::google::protobuf::int32 numpoints() const;
  inline void set_numpoints(::google::protobuf::int32 value);

  // required int32 numarcs = 2;
  inline bool has_numarcs() const;
  inline void clear_numarcs();
  static const int kNumarcsFieldNumber = 2;
  inline ::google::protobuf::int32 numarcs() const;
  inline void set_numarcs(::google::protobuf::int32 value);

  // required int32 numholes = 3;
  inline bool has_numholes() const;
  inline void clear_numholes();
  static const int kNumholesFieldNumber = 3;
  inline ::google::protobuf::int32 numholes() const;
  inline void set_numholes(::google::protobuf::int32 value);

  // required int32 numhpoints = 4;
  inline bool has_numhpoints() const;
  inline void clear_numhpoints();
  static const int kNumhpointsFieldNumber = 4;
  inline ::google::protobuf::int32 numhpoints() const;
  inline void set_numhpoints(::google::protobuf::int32 value);

  // required int32 numharcs = 5;
  inline bool has_numharcs() const;
  inline void clear_numharcs();
  static const int kNumharcsFieldNumber = 5;
  inline ::google::protobuf::int32 numharcs() const;
  inline void set_numharcs(::google::protobuf::int32 value);

  // required double holeheight = 6;
  inline bool has_holeheight() const;
  inline void clear_holeheight();
  static const int kHoleheightFieldNumber = 6;
  inline double holeheight() const;
  inline void set_holeheight(double value);

  // required double reflectx = 7;
  inline bool has_reflectx() const;
  inline void clear_reflectx();
  static const int kReflectxFieldNumber = 7;
  inline double reflectx() const;
  inline void set_reflectx(double value);

  // required double reflecty = 8;
  inline bool has_reflecty() const;
  inline void clear_reflecty();
  static const int kReflectyFieldNumber = 8;
  inline double reflecty() const;
  inline void set_reflecty(double value);

  // @@protoc_insertion_point(class_scope:shellcomplexmessage)
 private:
  inline void set_has_numpoints();
  inline void clear_has_numpoints();
  inline void set_has_numarcs();
  inline void clear_has_numarcs();
  inline void set_has_numholes();
  inline void clear_has_numholes();
  inline void set_has_numhpoints();
  inline void clear_has_numhpoints();
  inline void set_has_numharcs();
  inline void clear_has_numharcs();
  inline void set_has_holeheight();
  inline void clear_has_holeheight();
  inline void set_has_reflectx();
  inline void clear_has_reflectx();
  inline void set_has_reflecty();
  inline void clear_has_reflecty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numpoints_;
  ::google::protobuf::int32 numarcs_;
  ::google::protobuf::int32 numholes_;
  ::google::protobuf::int32 numhpoints_;
  double holeheight_;
  double reflectx_;
  double reflecty_;
  ::google::protobuf::int32 numharcs_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static shellcomplexmessage* default_instance_;
};
// -------------------------------------------------------------------

class shellsimplemessage : public ::google::protobuf::Message {
 public:
  shellsimplemessage();
  virtual ~shellsimplemessage();

  shellsimplemessage(const shellsimplemessage& from);

  inline shellsimplemessage& operator=(const shellsimplemessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shellsimplemessage& default_instance();

  void Swap(shellsimplemessage* other);

  // implements Message ----------------------------------------------

  shellsimplemessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shellsimplemessage& from);
  void MergeFrom(const shellsimplemessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numpoints = 1;
  inline bool has_numpoints() const;
  inline void clear_numpoints();
  static const int kNumpointsFieldNumber = 1;
  inline ::google::protobuf::int32 numpoints() const;
  inline void set_numpoints(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:shellsimplemessage)
 private:
  inline void set_has_numpoints();
  inline void clear_has_numpoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numpoints_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static shellsimplemessage* default_instance_;
};
// -------------------------------------------------------------------

class shellmessage : public ::google::protobuf::Message {
 public:
  shellmessage();
  virtual ~shellmessage();

  shellmessage(const shellmessage& from);

  inline shellmessage& operator=(const shellmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shellmessage& default_instance();

  void Swap(shellmessage* other);

  // implements Message ----------------------------------------------

  shellmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shellmessage& from);
  void MergeFrom(const shellmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numpoints = 1;
  inline bool has_numpoints() const;
  inline void clear_numpoints();
  static const int kNumpointsFieldNumber = 1;
  inline ::google::protobuf::int32 numpoints() const;
  inline void set_numpoints(::google::protobuf::int32 value);

  // required int32 numarcs = 2;
  inline bool has_numarcs() const;
  inline void clear_numarcs();
  static const int kNumarcsFieldNumber = 2;
  inline ::google::protobuf::int32 numarcs() const;
  inline void set_numarcs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:shellmessage)
 private:
  inline void set_has_numpoints();
  inline void clear_has_numpoints();
  inline void set_has_numarcs();
  inline void clear_has_numarcs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numpoints_;
  ::google::protobuf::int32 numarcs_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static shellmessage* default_instance_;
};
// -------------------------------------------------------------------

class pointsmessage : public ::google::protobuf::Message {
 public:
  pointsmessage();
  virtual ~pointsmessage();

  pointsmessage(const pointsmessage& from);

  inline pointsmessage& operator=(const pointsmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pointsmessage& default_instance();

  void Swap(pointsmessage* other);

  // implements Message ----------------------------------------------

  pointsmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pointsmessage& from);
  void MergeFrom(const pointsmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double px = 1;
  inline int px_size() const;
  inline void clear_px();
  static const int kPxFieldNumber = 1;
  inline double px(int index) const;
  inline void set_px(int index, double value);
  inline void add_px(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      px() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_px();

  // repeated double py = 2;
  inline int py_size() const;
  inline void clear_py();
  static const int kPyFieldNumber = 2;
  inline double py(int index) const;
  inline void set_py(int index, double value);
  inline void add_py(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      py() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_py();

  // repeated double pz = 3;
  inline int pz_size() const;
  inline void clear_pz();
  static const int kPzFieldNumber = 3;
  inline double pz(int index) const;
  inline void set_pz(int index, double value);
  inline void add_pz(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      pz() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_pz();

  // @@protoc_insertion_point(class_scope:pointsmessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > px_;
  ::google::protobuf::RepeatedField< double > py_;
  ::google::protobuf::RepeatedField< double > pz_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static pointsmessage* default_instance_;
};
// -------------------------------------------------------------------

class polyarcsmessage : public ::google::protobuf::Message {
 public:
  polyarcsmessage();
  virtual ~polyarcsmessage();

  polyarcsmessage(const polyarcsmessage& from);

  inline polyarcsmessage& operator=(const polyarcsmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const polyarcsmessage& default_instance();

  void Swap(polyarcsmessage* other);

  // implements Message ----------------------------------------------

  polyarcsmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const polyarcsmessage& from);
  void MergeFrom(const polyarcsmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 begindex = 1;
  inline int begindex_size() const;
  inline void clear_begindex();
  static const int kBegindexFieldNumber = 1;
  inline ::google::protobuf::int32 begindex(int index) const;
  inline void set_begindex(int index, ::google::protobuf::int32 value);
  inline void add_begindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      begindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_begindex();

  // repeated int32 endindex = 2;
  inline int endindex_size() const;
  inline void clear_endindex();
  static const int kEndindexFieldNumber = 2;
  inline ::google::protobuf::int32 endindex(int index) const;
  inline void set_endindex(int index, ::google::protobuf::int32 value);
  inline void add_endindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      endindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_endindex();

  // repeated double arcangle = 3;
  inline int arcangle_size() const;
  inline void clear_arcangle();
  static const int kArcangleFieldNumber = 3;
  inline double arcangle(int index) const;
  inline void set_arcangle(int index, double value);
  inline void add_arcangle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      arcangle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_arcangle();

  // @@protoc_insertion_point(class_scope:polyarcsmessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > begindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > endindex_;
  ::google::protobuf::RepeatedField< double > arcangle_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static polyarcsmessage* default_instance_;
};
// -------------------------------------------------------------------

class rotshellmessage : public ::google::protobuf::Message {
 public:
  rotshellmessage();
  virtual ~rotshellmessage();

  rotshellmessage(const rotshellmessage& from);

  inline rotshellmessage& operator=(const rotshellmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rotshellmessage& default_instance();

  void Swap(rotshellmessage* other);

  // implements Message ----------------------------------------------

  rotshellmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rotshellmessage& from);
  void MergeFrom(const rotshellmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string axis = 1;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline const ::std::string& axis() const;
  inline void set_axis(const ::std::string& value);
  inline void set_axis(const char* value);
  inline void set_axis(const char* value, size_t size);
  inline ::std::string* mutable_axis();
  inline ::std::string* release_axis();
  inline void set_allocated_axis(::std::string* axis);

  // required double angle = 2;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 2;
  inline double angle() const;
  inline void set_angle(double value);

  // required string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:rotshellmessage)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* axis_;
  double angle_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static rotshellmessage* default_instance_;
};
// -------------------------------------------------------------------

class tshellmessage : public ::google::protobuf::Message {
 public:
  tshellmessage();
  virtual ~tshellmessage();

  tshellmessage(const tshellmessage& from);

  inline tshellmessage& operator=(const tshellmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tshellmessage& default_instance();

  void Swap(tshellmessage* other);

  // implements Message ----------------------------------------------

  tshellmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tshellmessage& from);
  void MergeFrom(const tshellmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double tx = 1;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 1;
  inline double tx() const;
  inline void set_tx(double value);

  // required double ty = 2;
  inline bool has_ty() const;
  inline void clear_ty();
  static const int kTyFieldNumber = 2;
  inline double ty() const;
  inline void set_ty(double value);

  // required double tz = 3;
  inline bool has_tz() const;
  inline void clear_tz();
  static const int kTzFieldNumber = 3;
  inline double tz() const;
  inline void set_tz(double value);

  // required string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:tshellmessage)
 private:
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_ty();
  inline void clear_has_ty();
  inline void set_has_tz();
  inline void clear_has_tz();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tx_;
  double ty_;
  double tz_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static tshellmessage* default_instance_;
};
// -------------------------------------------------------------------

class oldholemessage : public ::google::protobuf::Message {
 public:
  oldholemessage();
  virtual ~oldholemessage();

  oldholemessage(const oldholemessage& from);

  inline oldholemessage& operator=(const oldholemessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const oldholemessage& default_instance();

  void Swap(oldholemessage* other);

  // implements Message ----------------------------------------------

  oldholemessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const oldholemessage& from);
  void MergeFrom(const oldholemessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double height = 1;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline double height() const;
  inline void set_height(double value);

  // required string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:oldholemessage)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double height_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static oldholemessage* default_instance_;
};
// -------------------------------------------------------------------

class curtainwallmsg : public ::google::protobuf::Message {
 public:
  curtainwallmsg();
  virtual ~curtainwallmsg();

  curtainwallmsg(const curtainwallmsg& from);

  inline curtainwallmsg& operator=(const curtainwallmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const curtainwallmsg& default_instance();

  void Swap(curtainwallmsg* other);

  // implements Message ----------------------------------------------

  curtainwallmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const curtainwallmsg& from);
  void MergeFrom(const curtainwallmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // required .polyarcsmessage arcs = 2;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 2;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // required int32 bottomindex = 3;
  inline bool has_bottomindex() const;
  inline void clear_bottomindex();
  static const int kBottomindexFieldNumber = 3;
  inline ::google::protobuf::int32 bottomindex() const;
  inline void set_bottomindex(::google::protobuf::int32 value);

  // required int32 upperindex = 4;
  inline bool has_upperindex() const;
  inline void clear_upperindex();
  static const int kUpperindexFieldNumber = 4;
  inline ::google::protobuf::int32 upperindex() const;
  inline void set_upperindex(::google::protobuf::int32 value);

  // repeated double primaries = 5;
  inline int primaries_size() const;
  inline void clear_primaries();
  static const int kPrimariesFieldNumber = 5;
  inline double primaries(int index) const;
  inline void set_primaries(int index, double value);
  inline void add_primaries(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      primaries() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_primaries();

  // repeated double secondaries = 6;
  inline int secondaries_size() const;
  inline void clear_secondaries();
  static const int kSecondariesFieldNumber = 6;
  inline double secondaries(int index) const;
  inline void set_secondaries(int index, double value);
  inline void add_secondaries(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      secondaries() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_secondaries();

  // repeated bool mainpanels = 7;
  inline int mainpanels_size() const;
  inline void clear_mainpanels();
  static const int kMainpanelsFieldNumber = 7;
  inline bool mainpanels(int index) const;
  inline void set_mainpanels(int index, bool value);
  inline void add_mainpanels(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      mainpanels() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_mainpanels();

  // required string panelmaterial = 8;
  inline bool has_panelmaterial() const;
  inline void clear_panelmaterial();
  static const int kPanelmaterialFieldNumber = 8;
  inline const ::std::string& panelmaterial() const;
  inline void set_panelmaterial(const ::std::string& value);
  inline void set_panelmaterial(const char* value);
  inline void set_panelmaterial(const char* value, size_t size);
  inline ::std::string* mutable_panelmaterial();
  inline ::std::string* release_panelmaterial();
  inline void set_allocated_panelmaterial(::std::string* panelmaterial);

  // required string secpanelmaterial = 9;
  inline bool has_secpanelmaterial() const;
  inline void clear_secpanelmaterial();
  static const int kSecpanelmaterialFieldNumber = 9;
  inline const ::std::string& secpanelmaterial() const;
  inline void set_secpanelmaterial(const ::std::string& value);
  inline void set_secpanelmaterial(const char* value);
  inline void set_secpanelmaterial(const char* value, size_t size);
  inline ::std::string* mutable_secpanelmaterial();
  inline ::std::string* release_secpanelmaterial();
  inline void set_allocated_secpanelmaterial(::std::string* secpanelmaterial);

  // required string verticalframematerial = 10;
  inline bool has_verticalframematerial() const;
  inline void clear_verticalframematerial();
  static const int kVerticalframematerialFieldNumber = 10;
  inline const ::std::string& verticalframematerial() const;
  inline void set_verticalframematerial(const ::std::string& value);
  inline void set_verticalframematerial(const char* value);
  inline void set_verticalframematerial(const char* value, size_t size);
  inline ::std::string* mutable_verticalframematerial();
  inline ::std::string* release_verticalframematerial();
  inline void set_allocated_verticalframematerial(::std::string* verticalframematerial);

  // required string horizontalframematerial = 11;
  inline bool has_horizontalframematerial() const;
  inline void clear_horizontalframematerial();
  static const int kHorizontalframematerialFieldNumber = 11;
  inline const ::std::string& horizontalframematerial() const;
  inline void set_horizontalframematerial(const ::std::string& value);
  inline void set_horizontalframematerial(const char* value);
  inline void set_horizontalframematerial(const char* value, size_t size);
  inline ::std::string* mutable_horizontalframematerial();
  inline ::std::string* release_horizontalframematerial();
  inline void set_allocated_horizontalframematerial(::std::string* horizontalframematerial);

  // required string framematerial = 12;
  inline bool has_framematerial() const;
  inline void clear_framematerial();
  static const int kFramematerialFieldNumber = 12;
  inline const ::std::string& framematerial() const;
  inline void set_framematerial(const ::std::string& value);
  inline void set_framematerial(const char* value);
  inline void set_framematerial(const char* value, size_t size);
  inline ::std::string* mutable_framematerial();
  inline ::std::string* release_framematerial();
  inline void set_allocated_framematerial(::std::string* framematerial);

  // required double panelsangle = 13;
  inline bool has_panelsangle() const;
  inline void clear_panelsangle();
  static const int kPanelsangleFieldNumber = 13;
  inline double panelsangle() const;
  inline void set_panelsangle(double value);

  // required double offset = 14;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 14;
  inline double offset() const;
  inline void set_offset(double value);

  // optional string layer = 15;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 15;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional double height = 16;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 16;
  inline double height() const;
  inline void set_height(double value);

  // optional bool toplinked = 17;
  inline bool has_toplinked() const;
  inline void clear_toplinked();
  static const int kToplinkedFieldNumber = 17;
  inline bool toplinked() const;
  inline void set_toplinked(bool value);

  // optional double mainpanelthickness = 18;
  inline bool has_mainpanelthickness() const;
  inline void clear_mainpanelthickness();
  static const int kMainpanelthicknessFieldNumber = 18;
  inline double mainpanelthickness() const;
  inline void set_mainpanelthickness(double value);

  // optional double secondarypanelthickness = 19;
  inline bool has_secondarypanelthickness() const;
  inline void clear_secondarypanelthickness();
  static const int kSecondarypanelthicknessFieldNumber = 19;
  inline double secondarypanelthickness() const;
  inline void set_secondarypanelthickness(double value);

  // optional double bframewidth = 20;
  inline bool has_bframewidth() const;
  inline void clear_bframewidth();
  static const int kBframewidthFieldNumber = 20;
  inline double bframewidth() const;
  inline void set_bframewidth(double value);

  // optional double bframedepth = 21;
  inline bool has_bframedepth() const;
  inline void clear_bframedepth();
  static const int kBframedepthFieldNumber = 21;
  inline double bframedepth() const;
  inline void set_bframedepth(double value);

  // optional double bframeoffset = 22;
  inline bool has_bframeoffset() const;
  inline void clear_bframeoffset();
  static const int kBframeoffsetFieldNumber = 22;
  inline double bframeoffset() const;
  inline void set_bframeoffset(double value);

  // optional double mframewidth = 23;
  inline bool has_mframewidth() const;
  inline void clear_mframewidth();
  static const int kMframewidthFieldNumber = 23;
  inline double mframewidth() const;
  inline void set_mframewidth(double value);

  // optional double mframedepth = 24;
  inline bool has_mframedepth() const;
  inline void clear_mframedepth();
  static const int kMframedepthFieldNumber = 24;
  inline double mframedepth() const;
  inline void set_mframedepth(double value);

  // optional double mframeoffset = 25;
  inline bool has_mframeoffset() const;
  inline void clear_mframeoffset();
  static const int kMframeoffsetFieldNumber = 25;
  inline double mframeoffset() const;
  inline void set_mframeoffset(double value);

  // optional double tframewidth = 26;
  inline bool has_tframewidth() const;
  inline void clear_tframewidth();
  static const int kTframewidthFieldNumber = 26;
  inline double tframewidth() const;
  inline void set_tframewidth(double value);

  // optional double tframedepth = 27;
  inline bool has_tframedepth() const;
  inline void clear_tframedepth();
  static const int kTframedepthFieldNumber = 27;
  inline double tframedepth() const;
  inline void set_tframedepth(double value);

  // optional double tframeoffset = 28;
  inline bool has_tframeoffset() const;
  inline void clear_tframeoffset();
  static const int kTframeoffsetFieldNumber = 28;
  inline double tframeoffset() const;
  inline void set_tframeoffset(double value);

  // @@protoc_insertion_point(class_scope:curtainwallmsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_bottomindex();
  inline void clear_has_bottomindex();
  inline void set_has_upperindex();
  inline void clear_has_upperindex();
  inline void set_has_panelmaterial();
  inline void clear_has_panelmaterial();
  inline void set_has_secpanelmaterial();
  inline void clear_has_secpanelmaterial();
  inline void set_has_verticalframematerial();
  inline void clear_has_verticalframematerial();
  inline void set_has_horizontalframematerial();
  inline void clear_has_horizontalframematerial();
  inline void set_has_framematerial();
  inline void clear_has_framematerial();
  inline void set_has_panelsangle();
  inline void clear_has_panelsangle();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_toplinked();
  inline void clear_has_toplinked();
  inline void set_has_mainpanelthickness();
  inline void clear_has_mainpanelthickness();
  inline void set_has_secondarypanelthickness();
  inline void clear_has_secondarypanelthickness();
  inline void set_has_bframewidth();
  inline void clear_has_bframewidth();
  inline void set_has_bframedepth();
  inline void clear_has_bframedepth();
  inline void set_has_bframeoffset();
  inline void clear_has_bframeoffset();
  inline void set_has_mframewidth();
  inline void clear_has_mframewidth();
  inline void set_has_mframedepth();
  inline void clear_has_mframedepth();
  inline void set_has_mframeoffset();
  inline void clear_has_mframeoffset();
  inline void set_has_tframewidth();
  inline void clear_has_tframewidth();
  inline void set_has_tframedepth();
  inline void clear_has_tframedepth();
  inline void set_has_tframeoffset();
  inline void clear_has_tframeoffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  ::google::protobuf::int32 bottomindex_;
  ::google::protobuf::int32 upperindex_;
  ::google::protobuf::RepeatedField< double > primaries_;
  ::google::protobuf::RepeatedField< double > secondaries_;
  ::google::protobuf::RepeatedField< bool > mainpanels_;
  ::std::string* panelmaterial_;
  ::std::string* secpanelmaterial_;
  ::std::string* verticalframematerial_;
  ::std::string* horizontalframematerial_;
  ::std::string* framematerial_;
  double panelsangle_;
  double offset_;
  ::std::string* layer_;
  double height_;
  double mainpanelthickness_;
  double secondarypanelthickness_;
  double bframewidth_;
  double bframedepth_;
  double bframeoffset_;
  double mframewidth_;
  double mframedepth_;
  double mframeoffset_;
  double tframewidth_;
  double tframedepth_;
  double tframeoffset_;
  bool toplinked_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static curtainwallmsg* default_instance_;
};
// -------------------------------------------------------------------

class translatemsg : public ::google::protobuf::Message {
 public:
  translatemsg();
  virtual ~translatemsg();

  translatemsg(const translatemsg& from);

  inline translatemsg& operator=(const translatemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const translatemsg& default_instance();

  void Swap(translatemsg* other);

  // implements Message ----------------------------------------------

  translatemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const translatemsg& from);
  void MergeFrom(const translatemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double tx = 1;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 1;
  inline double tx() const;
  inline void set_tx(double value);

  // required double ty = 2;
  inline bool has_ty() const;
  inline void clear_ty();
  static const int kTyFieldNumber = 2;
  inline double ty() const;
  inline void set_ty(double value);

  // required double tz = 3;
  inline bool has_tz() const;
  inline void clear_tz();
  static const int kTzFieldNumber = 3;
  inline double tz() const;
  inline void set_tz(double value);

  // required string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:translatemsg)
 private:
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_ty();
  inline void clear_has_ty();
  inline void set_has_tz();
  inline void clear_has_tz();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tx_;
  double ty_;
  double tz_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static translatemsg* default_instance_;
};
// -------------------------------------------------------------------

class slabmessage : public ::google::protobuf::Message {
 public:
  slabmessage();
  virtual ~slabmessage();

  slabmessage(const slabmessage& from);

  inline slabmessage& operator=(const slabmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slabmessage& default_instance();

  void Swap(slabmessage* other);

  // implements Message ----------------------------------------------

  slabmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slabmessage& from);
  void MergeFrom(const slabmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline double level() const;
  inline void set_level(double value);

  // required string material = 2;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 2;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required double thickness = 3;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  inline double thickness() const;
  inline void set_thickness(double value);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 bottomlevel = 5;
  inline bool has_bottomlevel() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 5;
  inline ::google::protobuf::int32 bottomlevel() const;
  inline void set_bottomlevel(::google::protobuf::int32 value);

  // repeated int32 subpolygons = 6;
  inline int subpolygons_size() const;
  inline void clear_subpolygons();
  static const int kSubpolygonsFieldNumber = 6;
  inline ::google::protobuf::int32 subpolygons(int index) const;
  inline void set_subpolygons(int index, ::google::protobuf::int32 value);
  inline void add_subpolygons(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subpolygons() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subpolygons();

  // required .pointsmessage pts = 7;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 7;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // required .polyarcsmessage parcs = 8;
  inline bool has_parcs() const;
  inline void clear_parcs();
  static const int kParcsFieldNumber = 8;
  inline const ::polyarcsmessage& parcs() const;
  inline ::polyarcsmessage* mutable_parcs();
  inline ::polyarcsmessage* release_parcs();
  inline void set_allocated_parcs(::polyarcsmessage* parcs);

  // optional string layer = 9;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 9;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional string reference = 10;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 10;
  inline const ::std::string& reference() const;
  inline void set_reference(const ::std::string& value);
  inline void set_reference(const char* value);
  inline void set_reference(const char* value, size_t size);
  inline ::std::string* mutable_reference();
  inline ::std::string* release_reference();
  inline void set_allocated_reference(::std::string* reference);

  // @@protoc_insertion_point(class_scope:slabmessage)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bottomlevel();
  inline void clear_has_bottomlevel();
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_parcs();
  inline void clear_has_parcs();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_reference();
  inline void clear_has_reference();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double level_;
  ::std::string* material_;
  double thickness_;
  ::std::string* type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subpolygons_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* parcs_;
  ::std::string* layer_;
  ::std::string* reference_;
  ::google::protobuf::int32 bottomlevel_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static slabmessage* default_instance_;
};
// -------------------------------------------------------------------

class meshmessage : public ::google::protobuf::Message {
 public:
  meshmessage();
  virtual ~meshmessage();

  meshmessage(const meshmessage& from);

  inline meshmessage& operator=(const meshmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const meshmessage& default_instance();

  void Swap(meshmessage* other);

  // implements Message ----------------------------------------------

  meshmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const meshmessage& from);
  void MergeFrom(const meshmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline double level() const;
  inline void set_level(double value);

  // required string material = 2;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 2;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required int32 bottomlevel = 3;
  inline bool has_bottomlevel() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 3;
  inline ::google::protobuf::int32 bottomlevel() const;
  inline void set_bottomlevel(::google::protobuf::int32 value);

  // optional string overridematerial = 4;
  inline bool has_overridematerial() const;
  inline void clear_overridematerial();
  static const int kOverridematerialFieldNumber = 4;
  inline const ::std::string& overridematerial() const;
  inline void set_overridematerial(const ::std::string& value);
  inline void set_overridematerial(const char* value);
  inline void set_overridematerial(const char* value, size_t size);
  inline ::std::string* mutable_overridematerial();
  inline ::std::string* release_overridematerial();
  inline void set_allocated_overridematerial(::std::string* overridematerial);

  // optional string layer = 5;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 5;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:meshmessage)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_bottomlevel();
  inline void clear_has_bottomlevel();
  inline void set_has_overridematerial();
  inline void clear_has_overridematerial();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double level_;
  ::std::string* material_;
  ::std::string* overridematerial_;
  ::std::string* layer_;
  ::google::protobuf::int32 bottomlevel_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static meshmessage* default_instance_;
};
// -------------------------------------------------------------------

class rotatemsg : public ::google::protobuf::Message {
 public:
  rotatemsg();
  virtual ~rotatemsg();

  rotatemsg(const rotatemsg& from);

  inline rotatemsg& operator=(const rotatemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rotatemsg& default_instance();

  void Swap(rotatemsg* other);

  // implements Message ----------------------------------------------

  rotatemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rotatemsg& from);
  void MergeFrom(const rotatemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string guid = 1;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // required string axis = 2;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline const ::std::string& axis() const;
  inline void set_axis(const ::std::string& value);
  inline void set_axis(const char* value);
  inline void set_axis(const char* value, size_t size);
  inline ::std::string* mutable_axis();
  inline ::std::string* release_axis();
  inline void set_allocated_axis(::std::string* axis);

  // required double angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline double angle() const;
  inline void set_angle(double value);

  // required bool copy = 4;
  inline bool has_copy() const;
  inline void clear_copy();
  static const int kCopyFieldNumber = 4;
  inline bool copy() const;
  inline void set_copy(bool value);

  // @@protoc_insertion_point(class_scope:rotatemsg)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_copy();
  inline void clear_has_copy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  ::std::string* axis_;
  double angle_;
  bool copy_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static rotatemsg* default_instance_;
};
// -------------------------------------------------------------------

class trimmsg : public ::google::protobuf::Message {
 public:
  trimmsg();
  virtual ~trimmsg();

  trimmsg(const trimmsg& from);

  inline trimmsg& operator=(const trimmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const trimmsg& default_instance();

  void Swap(trimmsg* other);

  // implements Message ----------------------------------------------

  trimmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const trimmsg& from);
  void MergeFrom(const trimmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string guids = 1;
  inline int guids_size() const;
  inline void clear_guids();
  static const int kGuidsFieldNumber = 1;
  inline const ::std::string& guids(int index) const;
  inline ::std::string* mutable_guids(int index);
  inline void set_guids(int index, const ::std::string& value);
  inline void set_guids(int index, const char* value);
  inline void set_guids(int index, const char* value, size_t size);
  inline ::std::string* add_guids();
  inline void add_guids(const ::std::string& value);
  inline void add_guids(const char* value);
  inline void add_guids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guids();

  // repeated string guids2 = 2;
  inline int guids2_size() const;
  inline void clear_guids2();
  static const int kGuids2FieldNumber = 2;
  inline const ::std::string& guids2(int index) const;
  inline ::std::string* mutable_guids2(int index);
  inline void set_guids2(int index, const ::std::string& value);
  inline void set_guids2(int index, const char* value);
  inline void set_guids2(int index, const char* value, size_t size);
  inline ::std::string* add_guids2();
  inline void add_guids2(const ::std::string& value);
  inline void add_guids2(const char* value);
  inline void add_guids2(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guids2() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guids2();

  // @@protoc_insertion_point(class_scope:trimmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guids2_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static trimmsg* default_instance_;
};
// -------------------------------------------------------------------

class intersectmsg : public ::google::protobuf::Message {
 public:
  intersectmsg();
  virtual ~intersectmsg();

  intersectmsg(const intersectmsg& from);

  inline intersectmsg& operator=(const intersectmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const intersectmsg& default_instance();

  void Swap(intersectmsg* other);

  // implements Message ----------------------------------------------

  intersectmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const intersectmsg& from);
  void MergeFrom(const intersectmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid1 = 1;
  inline bool has_guid1() const;
  inline void clear_guid1();
  static const int kGuid1FieldNumber = 1;
  inline const ::std::string& guid1() const;
  inline void set_guid1(const ::std::string& value);
  inline void set_guid1(const char* value);
  inline void set_guid1(const char* value, size_t size);
  inline ::std::string* mutable_guid1();
  inline ::std::string* release_guid1();
  inline void set_allocated_guid1(::std::string* guid1);

  // required string guid2 = 2;
  inline bool has_guid2() const;
  inline void clear_guid2();
  static const int kGuid2FieldNumber = 2;
  inline const ::std::string& guid2() const;
  inline void set_guid2(const ::std::string& value);
  inline void set_guid2(const char* value);
  inline void set_guid2(const char* value, size_t size);
  inline ::std::string* mutable_guid2();
  inline ::std::string* release_guid2();
  inline void set_allocated_guid2(::std::string* guid2);

  // @@protoc_insertion_point(class_scope:intersectmsg)
 private:
  inline void set_has_guid1();
  inline void clear_has_guid1();
  inline void set_has_guid2();
  inline void clear_has_guid2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid1_;
  ::std::string* guid2_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static intersectmsg* default_instance_;
};
// -------------------------------------------------------------------

class columnmsg : public ::google::protobuf::Message {
 public:
  columnmsg();
  virtual ~columnmsg();

  columnmsg(const columnmsg& from);

  inline columnmsg& operator=(const columnmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const columnmsg& default_instance();

  void Swap(columnmsg* other);

  // implements Message ----------------------------------------------

  columnmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const columnmsg& from);
  void MergeFrom(const columnmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double posx = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 1;
  inline double posx() const;
  inline void set_posx(double value);

  // required double posy = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 2;
  inline double posy() const;
  inline void set_posy(double value);

  // required double bottom = 3;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline double bottom() const;
  inline void set_bottom(double value);

  // optional double height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline double height() const;
  inline void set_height(double value);

  // required bool circlebased = 5;
  inline bool has_circlebased() const;
  inline void clear_circlebased();
  static const int kCirclebasedFieldNumber = 5;
  inline bool circlebased() const;
  inline void set_circlebased(bool value);

  // required double angle = 6;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 6;
  inline double angle() const;
  inline void set_angle(double value);

  // required double depth = 7;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 7;
  inline double depth() const;
  inline void set_depth(double value);

  // required double width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline double width() const;
  inline void set_width(double value);

  // optional int32 bottomindex = 9;
  inline bool has_bottomindex() const;
  inline void clear_bottomindex();
  static const int kBottomindexFieldNumber = 9;
  inline ::google::protobuf::int32 bottomindex() const;
  inline void set_bottomindex(::google::protobuf::int32 value);

  // optional int32 upperindex = 10;
  inline bool has_upperindex() const;
  inline void clear_upperindex();
  static const int kUpperindexFieldNumber = 10;
  inline ::google::protobuf::int32 upperindex() const;
  inline void set_upperindex(::google::protobuf::int32 value);

  // required double slantangle = 11;
  inline bool has_slantangle() const;
  inline void clear_slantangle();
  static const int kSlantangleFieldNumber = 11;
  inline double slantangle() const;
  inline void set_slantangle(double value);

  // required double slantdirection = 12;
  inline bool has_slantdirection() const;
  inline void clear_slantdirection();
  static const int kSlantdirectionFieldNumber = 12;
  inline double slantdirection() const;
  inline void set_slantdirection(double value);

  // required string profilename = 13;
  inline bool has_profilename() const;
  inline void clear_profilename();
  static const int kProfilenameFieldNumber = 13;
  inline const ::std::string& profilename() const;
  inline void set_profilename(const ::std::string& value);
  inline void set_profilename(const char* value);
  inline void set_profilename(const char* value, size_t size);
  inline ::std::string* mutable_profilename();
  inline ::std::string* release_profilename();
  inline void set_allocated_profilename(::std::string* profilename);

  // optional double bottomoffset = 14;
  inline bool has_bottomoffset() const;
  inline void clear_bottomoffset();
  static const int kBottomoffsetFieldNumber = 14;
  inline double bottomoffset() const;
  inline void set_bottomoffset(double value);

  // optional string layer = 15;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 15;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional bool toplinked = 16;
  inline bool has_toplinked() const;
  inline void clear_toplinked();
  static const int kToplinkedFieldNumber = 16;
  inline bool toplinked() const;
  inline void set_toplinked(bool value);

  // @@protoc_insertion_point(class_scope:columnmsg)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_circlebased();
  inline void clear_has_circlebased();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_bottomindex();
  inline void clear_has_bottomindex();
  inline void set_has_upperindex();
  inline void clear_has_upperindex();
  inline void set_has_slantangle();
  inline void clear_has_slantangle();
  inline void set_has_slantdirection();
  inline void clear_has_slantdirection();
  inline void set_has_profilename();
  inline void clear_has_profilename();
  inline void set_has_bottomoffset();
  inline void clear_has_bottomoffset();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_toplinked();
  inline void clear_has_toplinked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double posx_;
  double posy_;
  double bottom_;
  double height_;
  double angle_;
  double depth_;
  double width_;
  ::google::protobuf::int32 bottomindex_;
  ::google::protobuf::int32 upperindex_;
  double slantangle_;
  double slantdirection_;
  ::std::string* profilename_;
  double bottomoffset_;
  ::std::string* layer_;
  bool circlebased_;
  bool toplinked_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static columnmsg* default_instance_;
};
// -------------------------------------------------------------------

class storymsg : public ::google::protobuf::Message {
 public:
  storymsg();
  virtual ~storymsg();

  storymsg(const storymsg& from);

  inline storymsg& operator=(const storymsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const storymsg& default_instance();

  void Swap(storymsg* other);

  // implements Message ----------------------------------------------

  storymsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const storymsg& from);
  void MergeFrom(const storymsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double height = 1;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline double height() const;
  inline void set_height(double value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:storymsg)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double height_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static storymsg* default_instance_;
};
// -------------------------------------------------------------------

class storyinfo : public ::google::protobuf::Message {
 public:
  storyinfo();
  virtual ~storyinfo();

  storyinfo(const storyinfo& from);

  inline storyinfo& operator=(const storyinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const storyinfo& default_instance();

  void Swap(storyinfo* other);

  // implements Message ----------------------------------------------

  storyinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const storyinfo& from);
  void MergeFrom(const storyinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool exists = 1;
  inline bool has_exists() const;
  inline void clear_exists();
  static const int kExistsFieldNumber = 1;
  inline bool exists() const;
  inline void set_exists(bool value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required double level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline double level() const;
  inline void set_level(double value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:storyinfo)
 private:
  inline void set_has_exists();
  inline void clear_has_exists();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool exists_;
  ::google::protobuf::int32 index_;
  double level_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static storyinfo* default_instance_;
};
// -------------------------------------------------------------------

class upperlevelmsg : public ::google::protobuf::Message {
 public:
  upperlevelmsg();
  virtual ~upperlevelmsg();

  upperlevelmsg(const upperlevelmsg& from);

  inline upperlevelmsg& operator=(const upperlevelmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upperlevelmsg& default_instance();

  void Swap(upperlevelmsg* other);

  // implements Message ----------------------------------------------

  upperlevelmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upperlevelmsg& from);
  void MergeFrom(const upperlevelmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required double height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline double height() const;
  inline void set_height(double value);

  // @@protoc_insertion_point(class_scope:upperlevelmsg)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double height_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static upperlevelmsg* default_instance_;
};
// -------------------------------------------------------------------

class wallsfromslab : public ::google::protobuf::Message {
 public:
  wallsfromslab();
  virtual ~wallsfromslab();

  wallsfromslab(const wallsfromslab& from);

  inline wallsfromslab& operator=(const wallsfromslab& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallsfromslab& default_instance();

  void Swap(wallsfromslab* other);

  // implements Message ----------------------------------------------

  wallsfromslab* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallsfromslab& from);
  void MergeFrom(const wallsfromslab& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required double height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline double height() const;
  inline void set_height(double value);

  // required string material = 3;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 3;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string referenceline = 5;
  inline bool has_referenceline() const;
  inline void clear_referenceline();
  static const int kReferencelineFieldNumber = 5;
  inline const ::std::string& referenceline() const;
  inline void set_referenceline(const ::std::string& value);
  inline void set_referenceline(const char* value);
  inline void set_referenceline(const char* value, size_t size);
  inline ::std::string* mutable_referenceline();
  inline ::std::string* release_referenceline();
  inline void set_allocated_referenceline(::std::string* referenceline);

  // required double thickness = 6;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 6;
  inline double thickness() const;
  inline void set_thickness(double value);

  // optional string layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:wallsfromslab)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_referenceline();
  inline void clear_has_referenceline();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  double height_;
  ::std::string* material_;
  ::std::string* type_;
  ::std::string* referenceline_;
  double thickness_;
  ::std::string* layer_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static wallsfromslab* default_instance_;
};
// -------------------------------------------------------------------

class columnsfromslab : public ::google::protobuf::Message {
 public:
  columnsfromslab();
  virtual ~columnsfromslab();

  columnsfromslab(const columnsfromslab& from);

  inline columnsfromslab& operator=(const columnsfromslab& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const columnsfromslab& default_instance();

  void Swap(columnsfromslab* other);

  // implements Message ----------------------------------------------

  columnsfromslab* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const columnsfromslab& from);
  void MergeFrom(const columnsfromslab& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required double height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline double height() const;
  inline void set_height(double value);

  // required string material = 3;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 3;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required double depth = 4;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 4;
  inline double depth() const;
  inline void set_depth(double value);

  // required double width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline double width() const;
  inline void set_width(double value);

  // required bool circlebased = 6;
  inline bool has_circlebased() const;
  inline void clear_circlebased();
  static const int kCirclebasedFieldNumber = 6;
  inline bool circlebased() const;
  inline void set_circlebased(bool value);

  // optional string layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:columnsfromslab)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_circlebased();
  inline void clear_has_circlebased();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  double height_;
  ::std::string* material_;
  double depth_;
  double width_;
  ::std::string* layer_;
  bool circlebased_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static columnsfromslab* default_instance_;
};
// -------------------------------------------------------------------

class stairsmsg : public ::google::protobuf::Message {
 public:
  stairsmsg();
  virtual ~stairsmsg();

  stairsmsg(const stairsmsg& from);

  inline stairsmsg& operator=(const stairsmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stairsmsg& default_instance();

  void Swap(stairsmsg* other);

  // implements Message ----------------------------------------------

  stairsmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stairsmsg& from);
  void MergeFrom(const stairsmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double posx = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 2;
  inline double posx() const;
  inline void set_posx(double value);

  // required double posy = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 3;
  inline double posy() const;
  inline void set_posy(double value);

  // required double xratio = 4;
  inline bool has_xratio() const;
  inline void clear_xratio();
  static const int kXratioFieldNumber = 4;
  inline double xratio() const;
  inline void set_xratio(double value);

  // required double yratio = 5;
  inline bool has_yratio() const;
  inline void clear_yratio();
  static const int kYratioFieldNumber = 5;
  inline double yratio() const;
  inline void set_yratio(double value);

  // required double bottom = 6;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 6;
  inline double bottom() const;
  inline void set_bottom(double value);

  // required double angle = 7;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 7;
  inline double angle() const;
  inline void set_angle(double value);

  // required int32 bottomindex = 8;
  inline bool has_bottomindex() const;
  inline void clear_bottomindex();
  static const int kBottomindexFieldNumber = 8;
  inline ::google::protobuf::int32 bottomindex() const;
  inline void set_bottomindex(::google::protobuf::int32 value);

  // required bool usexyfixsize = 9;
  inline bool has_usexyfixsize() const;
  inline void clear_usexyfixsize();
  static const int kUsexyfixsizeFieldNumber = 9;
  inline bool usexyfixsize() const;
  inline void set_usexyfixsize(bool value);

  // required .additionalparams params = 10;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 10;
  inline const ::additionalparams& params() const;
  inline ::additionalparams* mutable_params();
  inline ::additionalparams* release_params();
  inline void set_allocated_params(::additionalparams* params);

  // optional string layer = 11;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 11;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional double height = 12;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 12;
  inline double height() const;
  inline void set_height(double value);

  // optional int32 upperindex = 13;
  inline bool has_upperindex() const;
  inline void clear_upperindex();
  static const int kUpperindexFieldNumber = 13;
  inline ::google::protobuf::int32 upperindex() const;
  inline void set_upperindex(::google::protobuf::int32 value);

  // optional bool toplinked = 14;
  inline bool has_toplinked() const;
  inline void clear_toplinked();
  static const int kToplinkedFieldNumber = 14;
  inline bool toplinked() const;
  inline void set_toplinked(bool value);

  // @@protoc_insertion_point(class_scope:stairsmsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_xratio();
  inline void clear_has_xratio();
  inline void set_has_yratio();
  inline void clear_has_yratio();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_bottomindex();
  inline void clear_has_bottomindex();
  inline void set_has_usexyfixsize();
  inline void clear_has_usexyfixsize();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_upperindex();
  inline void clear_has_upperindex();
  inline void set_has_toplinked();
  inline void clear_has_toplinked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  double posx_;
  double posy_;
  double xratio_;
  double yratio_;
  double bottom_;
  double angle_;
  ::additionalparams* params_;
  ::google::protobuf::int32 bottomindex_;
  bool usexyfixsize_;
  bool toplinked_;
  ::std::string* layer_;
  double height_;
  ::google::protobuf::int32 upperindex_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static stairsmsg* default_instance_;
};
// -------------------------------------------------------------------

class roofmsg : public ::google::protobuf::Message {
 public:
  roofmsg();
  virtual ~roofmsg();

  roofmsg(const roofmsg& from);

  inline roofmsg& operator=(const roofmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roofmsg& default_instance();

  void Swap(roofmsg* other);

  // implements Message ----------------------------------------------

  roofmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roofmsg& from);
  void MergeFrom(const roofmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double height = 1;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline double height() const;
  inline void set_height(double value);

  // required string material = 2;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 2;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required double thickness = 3;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  inline double thickness() const;
  inline void set_thickness(double value);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 bottomlevel = 5;
  inline bool has_bottomlevel() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 5;
  inline ::google::protobuf::int32 bottomlevel() const;
  inline void set_bottomlevel(::google::protobuf::int32 value);

  // optional string layer = 6;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 6;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:roofmsg)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bottomlevel();
  inline void clear_has_bottomlevel();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double height_;
  ::std::string* material_;
  double thickness_;
  ::std::string* type_;
  ::std::string* layer_;
  ::google::protobuf::int32 bottomlevel_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static roofmsg* default_instance_;
};
// -------------------------------------------------------------------

class holemsg : public ::google::protobuf::Message {
 public:
  holemsg();
  virtual ~holemsg();

  holemsg(const holemsg& from);

  inline holemsg& operator=(const holemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const holemsg& default_instance();

  void Swap(holemsg* other);

  // implements Message ----------------------------------------------

  holemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const holemsg& from);
  void MergeFrom(const holemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .pointsmessage pts = 2;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 2;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional .polyarcsmessage arcs = 3;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 3;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:holemsg)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static holemsg* default_instance_;
};
// -------------------------------------------------------------------

class mirrormsg : public ::google::protobuf::Message {
 public:
  mirrormsg();
  virtual ~mirrormsg();

  mirrormsg(const mirrormsg& from);

  inline mirrormsg& operator=(const mirrormsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mirrormsg& default_instance();

  void Swap(mirrormsg* other);

  // implements Message ----------------------------------------------

  mirrormsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mirrormsg& from);
  void MergeFrom(const mirrormsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required string axis = 2;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline const ::std::string& axis() const;
  inline void set_axis(const ::std::string& value);
  inline void set_axis(const char* value);
  inline void set_axis(const char* value, size_t size);
  inline ::std::string* mutable_axis();
  inline ::std::string* release_axis();
  inline void set_allocated_axis(::std::string* axis);

  // required bool copy = 3;
  inline bool has_copy() const;
  inline void clear_copy();
  static const int kCopyFieldNumber = 3;
  inline bool copy() const;
  inline void set_copy(bool value);

  // @@protoc_insertion_point(class_scope:mirrormsg)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_copy();
  inline void clear_has_copy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::std::string* axis_;
  bool copy_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static mirrormsg* default_instance_;
};
// -------------------------------------------------------------------

class morphmsg : public ::google::protobuf::Message {
 public:
  morphmsg();
  virtual ~morphmsg();

  morphmsg(const morphmsg& from);

  inline morphmsg& operator=(const morphmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const morphmsg& default_instance();

  void Swap(morphmsg* other);

  // implements Message ----------------------------------------------

  morphmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const morphmsg& from);
  void MergeFrom(const morphmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double refx = 1;
  inline bool has_refx() const;
  inline void clear_refx();
  static const int kRefxFieldNumber = 1;
  inline double refx() const;
  inline void set_refx(double value);

  // required double refy = 2;
  inline bool has_refy() const;
  inline void clear_refy();
  static const int kRefyFieldNumber = 2;
  inline double refy() const;
  inline void set_refy(double value);

  // required double refz = 3;
  inline bool has_refz() const;
  inline void clear_refz();
  static const int kRefzFieldNumber = 3;
  inline double refz() const;
  inline void set_refz(double value);

  // optional .pointsmessage pts = 4;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 4;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional .pointsmessage edges = 5;
  inline bool has_edges() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 5;
  inline const ::pointsmessage& edges() const;
  inline ::pointsmessage* mutable_edges();
  inline ::pointsmessage* release_edges();
  inline void set_allocated_edges(::pointsmessage* edges);

  // optional .pointsmessage polygons = 6;
  inline bool has_polygons() const;
  inline void clear_polygons();
  static const int kPolygonsFieldNumber = 6;
  inline const ::pointsmessage& polygons() const;
  inline ::pointsmessage* mutable_polygons();
  inline ::pointsmessage* release_polygons();
  inline void set_allocated_polygons(::pointsmessage* polygons);

  // optional .intlistmsg sizespolygons = 7;
  inline bool has_sizespolygons() const;
  inline void clear_sizespolygons();
  static const int kSizespolygonsFieldNumber = 7;
  inline const ::intlistmsg& sizespolygons() const;
  inline ::intlistmsg* mutable_sizespolygons();
  inline ::intlistmsg* release_sizespolygons();
  inline void set_allocated_sizespolygons(::intlistmsg* sizespolygons);

  // required string material = 8;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 8;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:morphmsg)
 private:
  inline void set_has_refx();
  inline void clear_has_refx();
  inline void set_has_refy();
  inline void clear_has_refy();
  inline void set_has_refz();
  inline void clear_has_refz();
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_edges();
  inline void clear_has_edges();
  inline void set_has_polygons();
  inline void clear_has_polygons();
  inline void set_has_sizespolygons();
  inline void clear_has_sizespolygons();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double refx_;
  double refy_;
  double refz_;
  ::pointsmessage* pts_;
  ::pointsmessage* edges_;
  ::pointsmessage* polygons_;
  ::intlistmsg* sizespolygons_;
  ::std::string* material_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static morphmsg* default_instance_;
};
// -------------------------------------------------------------------

class boxmsg : public ::google::protobuf::Message {
 public:
  boxmsg();
  virtual ~boxmsg();

  boxmsg(const boxmsg& from);

  inline boxmsg& operator=(const boxmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boxmsg& default_instance();

  void Swap(boxmsg* other);

  // implements Message ----------------------------------------------

  boxmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boxmsg& from);
  void MergeFrom(const boxmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x1 = 1;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 1;
  inline double x1() const;
  inline void set_x1(double value);

  // required double y1 = 2;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 2;
  inline double y1() const;
  inline void set_y1(double value);

  // required double z1 = 3;
  inline bool has_z1() const;
  inline void clear_z1();
  static const int kZ1FieldNumber = 3;
  inline double z1() const;
  inline void set_z1(double value);

  // required double x2 = 4;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 4;
  inline double x2() const;
  inline void set_x2(double value);

  // required double y2 = 5;
  inline bool has_y2() const;
  inline void clear_y2();
  static const int kY2FieldNumber = 5;
  inline double y2() const;
  inline void set_y2(double value);

  // required double z2 = 6;
  inline bool has_z2() const;
  inline void clear_z2();
  static const int kZ2FieldNumber = 6;
  inline double z2() const;
  inline void set_z2(double value);

  // required int32 bottomlevel = 7;
  inline bool has_bottomlevel() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 7;
  inline ::google::protobuf::int32 bottomlevel() const;
  inline void set_bottomlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:boxmsg)
 private:
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_z1();
  inline void clear_has_z1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_y2();
  inline void clear_has_y2();
  inline void set_has_z2();
  inline void clear_has_z2();
  inline void set_has_bottomlevel();
  inline void clear_has_bottomlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x1_;
  double y1_;
  double z1_;
  double x2_;
  double y2_;
  double z2_;
  ::google::protobuf::int32 bottomlevel_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static boxmsg* default_instance_;
};
// -------------------------------------------------------------------

class wallinfo : public ::google::protobuf::Message {
 public:
  wallinfo();
  virtual ~wallinfo();

  wallinfo(const wallinfo& from);

  inline wallinfo& operator=(const wallinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallinfo& default_instance();

  void Swap(wallinfo* other);

  // implements Message ----------------------------------------------

  wallinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallinfo& from);
  void MergeFrom(const wallinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double thickness = 1;
  inline int thickness_size() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 1;
  inline double thickness(int index) const;
  inline void set_thickness(int index, double value);
  inline void add_thickness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      thickness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_thickness();

  // repeated double length = 2;
  inline int length_size() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline double length(int index) const;
  inline void set_length(int index, double value);
  inline void add_length(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      length() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_length();

  // repeated double height = 3;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline double height(int index) const;
  inline void set_height(int index, double value);
  inline void add_height(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      height() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_height();

  // repeated double volume = 4;
  inline int volume_size() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 4;
  inline double volume(int index) const;
  inline void set_volume(int index, double value);
  inline void add_volume(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      volume() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_volume();

  // @@protoc_insertion_point(class_scope:wallinfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > thickness_;
  ::google::protobuf::RepeatedField< double > length_;
  ::google::protobuf::RepeatedField< double > height_;
  ::google::protobuf::RepeatedField< double > volume_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static wallinfo* default_instance_;
};
// -------------------------------------------------------------------

class wallrepeated : public ::google::protobuf::Message {
 public:
  wallrepeated();
  virtual ~wallrepeated();

  wallrepeated(const wallrepeated& from);

  inline wallrepeated& operator=(const wallrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wallrepeated& default_instance();

  void Swap(wallrepeated* other);

  // implements Message ----------------------------------------------

  wallrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wallrepeated& from);
  void MergeFrom(const wallrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double p0x = 1;
  inline int p0x_size() const;
  inline void clear_p0x();
  static const int kP0XFieldNumber = 1;
  inline double p0x(int index) const;
  inline void set_p0x(int index, double value);
  inline void add_p0x(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      p0x() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_p0x();

  // repeated double p0y = 2;
  inline int p0y_size() const;
  inline void clear_p0y();
  static const int kP0YFieldNumber = 2;
  inline double p0y(int index) const;
  inline void set_p0y(int index, double value);
  inline void add_p0y(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      p0y() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_p0y();

  // repeated double p1x = 3;
  inline int p1x_size() const;
  inline void clear_p1x();
  static const int kP1XFieldNumber = 3;
  inline double p1x(int index) const;
  inline void set_p1x(int index, double value);
  inline void add_p1x(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      p1x() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_p1x();

  // repeated double p1y = 4;
  inline int p1y_size() const;
  inline void clear_p1y();
  static const int kP1YFieldNumber = 4;
  inline double p1y(int index) const;
  inline void set_p1y(int index, double value);
  inline void add_p1y(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      p1y() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_p1y();

  // repeated .storyinfo bottomlevel = 5;
  inline int bottomlevel_size() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 5;
  inline const ::storyinfo& bottomlevel(int index) const;
  inline ::storyinfo* mutable_bottomlevel(int index);
  inline ::storyinfo* add_bottomlevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      bottomlevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_bottomlevel();

  // repeated double thickness = 6;
  inline int thickness_size() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 6;
  inline double thickness(int index) const;
  inline void set_thickness(int index, double value);
  inline void add_thickness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      thickness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_thickness();

  // repeated double angle = 7;
  inline int angle_size() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 7;
  inline double angle(int index) const;
  inline void set_angle(int index, double value);
  inline void add_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angle();

  // repeated .storyinfo toplevel = 8;
  inline int toplevel_size() const;
  inline void clear_toplevel();
  static const int kToplevelFieldNumber = 8;
  inline const ::storyinfo& toplevel(int index) const;
  inline ::storyinfo* mutable_toplevel(int index);
  inline ::storyinfo* add_toplevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      toplevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_toplevel();

  // repeated string material = 9;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 9;
  inline const ::std::string& material(int index) const;
  inline ::std::string* mutable_material(int index);
  inline void set_material(int index, const ::std::string& value);
  inline void set_material(int index, const char* value);
  inline void set_material(int index, const char* value, size_t size);
  inline ::std::string* add_material();
  inline void add_material(const ::std::string& value);
  inline void add_material(const char* value);
  inline void add_material(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& material() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_material();

  // repeated string type = 10;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // repeated string referenceline = 11;
  inline int referenceline_size() const;
  inline void clear_referenceline();
  static const int kReferencelineFieldNumber = 11;
  inline const ::std::string& referenceline(int index) const;
  inline ::std::string* mutable_referenceline(int index);
  inline void set_referenceline(int index, const ::std::string& value);
  inline void set_referenceline(int index, const char* value);
  inline void set_referenceline(int index, const char* value, size_t size);
  inline ::std::string* add_referenceline();
  inline void add_referenceline(const ::std::string& value);
  inline void add_referenceline(const char* value);
  inline void add_referenceline(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& referenceline() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_referenceline();

  // repeated double alphaangle = 12;
  inline int alphaangle_size() const;
  inline void clear_alphaangle();
  static const int kAlphaangleFieldNumber = 12;
  inline double alphaangle(int index) const;
  inline void set_alphaangle(int index, double value);
  inline void add_alphaangle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      alphaangle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_alphaangle();

  // repeated double betaangle = 13;
  inline int betaangle_size() const;
  inline void clear_betaangle();
  static const int kBetaangleFieldNumber = 13;
  inline double betaangle(int index) const;
  inline void set_betaangle(int index, double value);
  inline void add_betaangle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      betaangle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_betaangle();

  // repeated string typeprofile = 14;
  inline int typeprofile_size() const;
  inline void clear_typeprofile();
  static const int kTypeprofileFieldNumber = 14;
  inline const ::std::string& typeprofile(int index) const;
  inline ::std::string* mutable_typeprofile(int index);
  inline void set_typeprofile(int index, const ::std::string& value);
  inline void set_typeprofile(int index, const char* value);
  inline void set_typeprofile(int index, const char* value, size_t size);
  inline ::std::string* add_typeprofile();
  inline void add_typeprofile(const ::std::string& value);
  inline void add_typeprofile(const char* value);
  inline void add_typeprofile(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& typeprofile() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_typeprofile();

  // repeated string guid = 15;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 15;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // @@protoc_insertion_point(class_scope:wallrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > p0x_;
  ::google::protobuf::RepeatedField< double > p0y_;
  ::google::protobuf::RepeatedField< double > p1x_;
  ::google::protobuf::RepeatedField< double > p1y_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > bottomlevel_;
  ::google::protobuf::RepeatedField< double > thickness_;
  ::google::protobuf::RepeatedField< double > angle_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > toplevel_;
  ::google::protobuf::RepeatedPtrField< ::std::string> material_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> referenceline_;
  ::google::protobuf::RepeatedField< double > alphaangle_;
  ::google::protobuf::RepeatedField< double > betaangle_;
  ::google::protobuf::RepeatedPtrField< ::std::string> typeprofile_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static wallrepeated* default_instance_;
};
// -------------------------------------------------------------------

class slabrepeated : public ::google::protobuf::Message {
 public:
  slabrepeated();
  virtual ~slabrepeated();

  slabrepeated(const slabrepeated& from);

  inline slabrepeated& operator=(const slabrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slabrepeated& default_instance();

  void Swap(slabrepeated* other);

  // implements Message ----------------------------------------------

  slabrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slabrepeated& from);
  void MergeFrom(const slabrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pointsmessage points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::pointsmessage& points(int index) const;
  inline ::pointsmessage* mutable_points(int index);
  inline ::pointsmessage* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::pointsmessage >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::pointsmessage >*
      mutable_points();

  // repeated .storyinfo bottomlevel = 2;
  inline int bottomlevel_size() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 2;
  inline const ::storyinfo& bottomlevel(int index) const;
  inline ::storyinfo* mutable_bottomlevel(int index);
  inline ::storyinfo* add_bottomlevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      bottomlevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_bottomlevel();

  // repeated double thickness = 3;
  inline int thickness_size() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  inline double thickness(int index) const;
  inline void set_thickness(int index, double value);
  inline void add_thickness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      thickness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_thickness();

  // repeated string material = 4;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline const ::std::string& material(int index) const;
  inline ::std::string* mutable_material(int index);
  inline void set_material(int index, const ::std::string& value);
  inline void set_material(int index, const char* value);
  inline void set_material(int index, const char* value, size_t size);
  inline ::std::string* add_material();
  inline void add_material(const ::std::string& value);
  inline void add_material(const char* value);
  inline void add_material(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& material() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_material();

  // repeated string type = 5;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // repeated string guid = 6;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 6;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // repeated .intlistmsg subpolygons = 7;
  inline int subpolygons_size() const;
  inline void clear_subpolygons();
  static const int kSubpolygonsFieldNumber = 7;
  inline const ::intlistmsg& subpolygons(int index) const;
  inline ::intlistmsg* mutable_subpolygons(int index);
  inline ::intlistmsg* add_subpolygons();
  inline const ::google::protobuf::RepeatedPtrField< ::intlistmsg >&
      subpolygons() const;
  inline ::google::protobuf::RepeatedPtrField< ::intlistmsg >*
      mutable_subpolygons();

  // @@protoc_insertion_point(class_scope:slabrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pointsmessage > points_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > bottomlevel_;
  ::google::protobuf::RepeatedField< double > thickness_;
  ::google::protobuf::RepeatedPtrField< ::std::string> material_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  ::google::protobuf::RepeatedPtrField< ::intlistmsg > subpolygons_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static slabrepeated* default_instance_;
};
// -------------------------------------------------------------------

class columnrepeated : public ::google::protobuf::Message {
 public:
  columnrepeated();
  virtual ~columnrepeated();

  columnrepeated(const columnrepeated& from);

  inline columnrepeated& operator=(const columnrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const columnrepeated& default_instance();

  void Swap(columnrepeated* other);

  // implements Message ----------------------------------------------

  columnrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const columnrepeated& from);
  void MergeFrom(const columnrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double px = 1;
  inline int px_size() const;
  inline void clear_px();
  static const int kPxFieldNumber = 1;
  inline double px(int index) const;
  inline void set_px(int index, double value);
  inline void add_px(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      px() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_px();

  // repeated double py = 2;
  inline int py_size() const;
  inline void clear_py();
  static const int kPyFieldNumber = 2;
  inline double py(int index) const;
  inline void set_py(int index, double value);
  inline void add_py(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      py() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_py();

  // repeated .storyinfo bottomlevel = 3;
  inline int bottomlevel_size() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 3;
  inline const ::storyinfo& bottomlevel(int index) const;
  inline ::storyinfo* mutable_bottomlevel(int index);
  inline ::storyinfo* add_bottomlevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      bottomlevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_bottomlevel();

  // repeated .storyinfo toplevel = 4;
  inline int toplevel_size() const;
  inline void clear_toplevel();
  static const int kToplevelFieldNumber = 4;
  inline const ::storyinfo& toplevel(int index) const;
  inline ::storyinfo* mutable_toplevel(int index);
  inline ::storyinfo* add_toplevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      toplevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_toplevel();

  // repeated bool circular = 5;
  inline int circular_size() const;
  inline void clear_circular();
  static const int kCircularFieldNumber = 5;
  inline bool circular(int index) const;
  inline void set_circular(int index, bool value);
  inline void add_circular(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      circular() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_circular();

  // repeated double angle = 6;
  inline int angle_size() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 6;
  inline double angle(int index) const;
  inline void set_angle(int index, double value);
  inline void add_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angle();

  // repeated double depth = 7;
  inline int depth_size() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 7;
  inline double depth(int index) const;
  inline void set_depth(int index, double value);
  inline void add_depth(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      depth() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_depth();

  // repeated double width = 8;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline double width(int index) const;
  inline void set_width(int index, double value);
  inline void add_width(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      width() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_width();

  // repeated double slantangle = 9;
  inline int slantangle_size() const;
  inline void clear_slantangle();
  static const int kSlantangleFieldNumber = 9;
  inline double slantangle(int index) const;
  inline void set_slantangle(int index, double value);
  inline void add_slantangle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      slantangle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_slantangle();

  // repeated double slantdirection = 10;
  inline int slantdirection_size() const;
  inline void clear_slantdirection();
  static const int kSlantdirectionFieldNumber = 10;
  inline double slantdirection(int index) const;
  inline void set_slantdirection(int index, double value);
  inline void add_slantdirection(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      slantdirection() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_slantdirection();

  // repeated string guid = 11;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 11;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // @@protoc_insertion_point(class_scope:columnrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > px_;
  ::google::protobuf::RepeatedField< double > py_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > bottomlevel_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > toplevel_;
  ::google::protobuf::RepeatedField< bool > circular_;
  ::google::protobuf::RepeatedField< double > angle_;
  ::google::protobuf::RepeatedField< double > depth_;
  ::google::protobuf::RepeatedField< double > width_;
  ::google::protobuf::RepeatedField< double > slantangle_;
  ::google::protobuf::RepeatedField< double > slantdirection_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static columnrepeated* default_instance_;
};
// -------------------------------------------------------------------

class objectrepeated : public ::google::protobuf::Message {
 public:
  objectrepeated();
  virtual ~objectrepeated();

  objectrepeated(const objectrepeated& from);

  inline objectrepeated& operator=(const objectrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const objectrepeated& default_instance();

  void Swap(objectrepeated* other);

  // implements Message ----------------------------------------------

  objectrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const objectrepeated& from);
  void MergeFrom(const objectrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated double px = 2;
  inline int px_size() const;
  inline void clear_px();
  static const int kPxFieldNumber = 2;
  inline double px(int index) const;
  inline void set_px(int index, double value);
  inline void add_px(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      px() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_px();

  // repeated double py = 3;
  inline int py_size() const;
  inline void clear_py();
  static const int kPyFieldNumber = 3;
  inline double py(int index) const;
  inline void set_py(int index, double value);
  inline void add_py(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      py() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_py();

  // repeated double angle = 4;
  inline int angle_size() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 4;
  inline double angle(int index) const;
  inline void set_angle(int index, double value);
  inline void add_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angle();

  // repeated double xratio = 5;
  inline int xratio_size() const;
  inline void clear_xratio();
  static const int kXratioFieldNumber = 5;
  inline double xratio(int index) const;
  inline void set_xratio(int index, double value);
  inline void add_xratio(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      xratio() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_xratio();

  // repeated double yratio = 6;
  inline int yratio_size() const;
  inline void clear_yratio();
  static const int kYratioFieldNumber = 6;
  inline double yratio(int index) const;
  inline void set_yratio(int index, double value);
  inline void add_yratio(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      yratio() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_yratio();

  // repeated double bottomoffset = 7;
  inline int bottomoffset_size() const;
  inline void clear_bottomoffset();
  static const int kBottomoffsetFieldNumber = 7;
  inline double bottomoffset(int index) const;
  inline void set_bottomoffset(int index, double value);
  inline void add_bottomoffset(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      bottomoffset() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_bottomoffset();

  // repeated .storyinfo bottomlevel = 8;
  inline int bottomlevel_size() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 8;
  inline const ::storyinfo& bottomlevel(int index) const;
  inline ::storyinfo* mutable_bottomlevel(int index);
  inline ::storyinfo* add_bottomlevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      bottomlevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_bottomlevel();

  // repeated string guid = 9;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 9;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // repeated bool stairs = 10;
  inline int stairs_size() const;
  inline void clear_stairs();
  static const int kStairsFieldNumber = 10;
  inline bool stairs(int index) const;
  inline void set_stairs(int index, bool value);
  inline void add_stairs(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      stairs() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_stairs();

  // repeated bool usexyfixsize = 11;
  inline int usexyfixsize_size() const;
  inline void clear_usexyfixsize();
  static const int kUsexyfixsizeFieldNumber = 11;
  inline bool usexyfixsize(int index) const;
  inline void set_usexyfixsize(int index, bool value);
  inline void add_usexyfixsize(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      usexyfixsize() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_usexyfixsize();

  // @@protoc_insertion_point(class_scope:objectrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedField< double > px_;
  ::google::protobuf::RepeatedField< double > py_;
  ::google::protobuf::RepeatedField< double > angle_;
  ::google::protobuf::RepeatedField< double > xratio_;
  ::google::protobuf::RepeatedField< double > yratio_;
  ::google::protobuf::RepeatedField< double > bottomoffset_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > bottomlevel_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  ::google::protobuf::RepeatedField< bool > stairs_;
  ::google::protobuf::RepeatedField< bool > usexyfixsize_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static objectrepeated* default_instance_;
};
// -------------------------------------------------------------------

class roofrepeated : public ::google::protobuf::Message {
 public:
  roofrepeated();
  virtual ~roofrepeated();

  roofrepeated(const roofrepeated& from);

  inline roofrepeated& operator=(const roofrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roofrepeated& default_instance();

  void Swap(roofrepeated* other);

  // implements Message ----------------------------------------------

  roofrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roofrepeated& from);
  void MergeFrom(const roofrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pointsmessage points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::pointsmessage& points(int index) const;
  inline ::pointsmessage* mutable_points(int index);
  inline ::pointsmessage* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::pointsmessage >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::pointsmessage >*
      mutable_points();

  // repeated .storyinfo bottomlevel = 2;
  inline int bottomlevel_size() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 2;
  inline const ::storyinfo& bottomlevel(int index) const;
  inline ::storyinfo* mutable_bottomlevel(int index);
  inline ::storyinfo* add_bottomlevel();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      bottomlevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_bottomlevel();

  // repeated double thickness = 3;
  inline int thickness_size() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  inline double thickness(int index) const;
  inline void set_thickness(int index, double value);
  inline void add_thickness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      thickness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_thickness();

  // repeated string material = 4;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline const ::std::string& material(int index) const;
  inline ::std::string* mutable_material(int index);
  inline void set_material(int index, const ::std::string& value);
  inline void set_material(int index, const char* value);
  inline void set_material(int index, const char* value, size_t size);
  inline ::std::string* add_material();
  inline void add_material(const ::std::string& value);
  inline void add_material(const char* value);
  inline void add_material(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& material() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_material();

  // repeated string type = 5;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // repeated string guid = 6;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 6;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();

  // repeated .intlistmsg subpolygons = 7;
  inline int subpolygons_size() const;
  inline void clear_subpolygons();
  static const int kSubpolygonsFieldNumber = 7;
  inline const ::intlistmsg& subpolygons(int index) const;
  inline ::intlistmsg* mutable_subpolygons(int index);
  inline ::intlistmsg* add_subpolygons();
  inline const ::google::protobuf::RepeatedPtrField< ::intlistmsg >&
      subpolygons() const;
  inline ::google::protobuf::RepeatedPtrField< ::intlistmsg >*
      mutable_subpolygons();

  // repeated double height = 8;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline double height(int index) const;
  inline void set_height(int index, double value);
  inline void add_height(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      height() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_height();

  // @@protoc_insertion_point(class_scope:roofrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pointsmessage > points_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > bottomlevel_;
  ::google::protobuf::RepeatedField< double > thickness_;
  ::google::protobuf::RepeatedPtrField< ::std::string> material_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  ::google::protobuf::RepeatedPtrField< ::intlistmsg > subpolygons_;
  ::google::protobuf::RepeatedField< double > height_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static roofrepeated* default_instance_;
};
// -------------------------------------------------------------------

class levelrepeated : public ::google::protobuf::Message {
 public:
  levelrepeated();
  virtual ~levelrepeated();

  levelrepeated(const levelrepeated& from);

  inline levelrepeated& operator=(const levelrepeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const levelrepeated& default_instance();

  void Swap(levelrepeated* other);

  // implements Message ----------------------------------------------

  levelrepeated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const levelrepeated& from);
  void MergeFrom(const levelrepeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storyinfo levels = 1;
  inline int levels_size() const;
  inline void clear_levels();
  static const int kLevelsFieldNumber = 1;
  inline const ::storyinfo& levels(int index) const;
  inline ::storyinfo* mutable_levels(int index);
  inline ::storyinfo* add_levels();
  inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
      levels() const;
  inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
      mutable_levels();

  // @@protoc_insertion_point(class_scope:levelrepeated)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::storyinfo > levels_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static levelrepeated* default_instance_;
};
// -------------------------------------------------------------------

class extrusionmsg : public ::google::protobuf::Message {
 public:
  extrusionmsg();
  virtual ~extrusionmsg();

  extrusionmsg(const extrusionmsg& from);

  inline extrusionmsg& operator=(const extrusionmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extrusionmsg& default_instance();

  void Swap(extrusionmsg* other);

  // implements Message ----------------------------------------------

  extrusionmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const extrusionmsg& from);
  void MergeFrom(const extrusionmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double vx = 1;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 1;
  inline double vx() const;
  inline void set_vx(double value);

  // required double vy = 2;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 2;
  inline double vy() const;
  inline void set_vy(double value);

  // required double vz = 3;
  inline bool has_vz() const;
  inline void clear_vz();
  static const int kVzFieldNumber = 3;
  inline double vz() const;
  inline void set_vz(double value);

  // required double height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline double height() const;
  inline void set_height(double value);

  // @@protoc_insertion_point(class_scope:extrusionmsg)
 private:
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_vz();
  inline void clear_has_vz();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double vx_;
  double vy_;
  double vz_;
  double height_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static extrusionmsg* default_instance_;
};
// -------------------------------------------------------------------

class openmessage : public ::google::protobuf::Message {
 public:
  openmessage();
  virtual ~openmessage();

  openmessage(const openmessage& from);

  inline openmessage& operator=(const openmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const openmessage& default_instance();

  void Swap(openmessage* other);

  // implements Message ----------------------------------------------

  openmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const openmessage& from);
  void MergeFrom(const openmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required string extension = 2;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 2;
  inline const ::std::string& extension() const;
  inline void set_extension(const ::std::string& value);
  inline void set_extension(const char* value);
  inline void set_extension(const char* value, size_t size);
  inline ::std::string* mutable_extension();
  inline ::std::string* release_extension();
  inline void set_allocated_extension(::std::string* extension);

  // @@protoc_insertion_point(class_scope:openmessage)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_extension();
  inline void clear_has_extension();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* extension_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static openmessage* default_instance_;
};
// -------------------------------------------------------------------

class transformmsg : public ::google::protobuf::Message {
 public:
  transformmsg();
  virtual ~transformmsg();

  transformmsg(const transformmsg& from);

  inline transformmsg& operator=(const transformmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const transformmsg& default_instance();

  void Swap(transformmsg* other);

  // implements Message ----------------------------------------------

  transformmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const transformmsg& from);
  void MergeFrom(const transformmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required string op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline const ::std::string& op() const;
  inline void set_op(const ::std::string& value);
  inline void set_op(const char* value);
  inline void set_op(const char* value, size_t size);
  inline ::std::string* mutable_op();
  inline ::std::string* release_op();
  inline void set_allocated_op(::std::string* op);

  // required double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline double z() const;
  inline void set_z(double value);

  // required double angle = 6;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 6;
  inline double angle() const;
  inline void set_angle(double value);

  // required double scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline double scale() const;
  inline void set_scale(double value);

  // @@protoc_insertion_point(class_scope:transformmsg)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::std::string* op_;
  double x_;
  double y_;
  double z_;
  double angle_;
  double scale_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static transformmsg* default_instance_;
};
// -------------------------------------------------------------------

class applymatrix : public ::google::protobuf::Message {
 public:
  applymatrix();
  virtual ~applymatrix();

  applymatrix(const applymatrix& from);

  inline applymatrix& operator=(const applymatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const applymatrix& default_instance();

  void Swap(applymatrix* other);

  // implements Message ----------------------------------------------

  applymatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const applymatrix& from);
  void MergeFrom(const applymatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // repeated double matrix = 2;
  inline int matrix_size() const;
  inline void clear_matrix();
  static const int kMatrixFieldNumber = 2;
  inline double matrix(int index) const;
  inline void set_matrix(int index, double value);
  inline void add_matrix(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      matrix() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_matrix();

  // @@protoc_insertion_point(class_scope:applymatrix)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedField< double > matrix_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static applymatrix* default_instance_;
};
// -------------------------------------------------------------------

class beammsg : public ::google::protobuf::Message {
 public:
  beammsg();
  virtual ~beammsg();

  beammsg(const beammsg& from);

  inline beammsg& operator=(const beammsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const beammsg& default_instance();

  void Swap(beammsg* other);

  // implements Message ----------------------------------------------

  beammsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const beammsg& from);
  void MergeFrom(const beammsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x0 = 1;
  inline bool has_x0() const;
  inline void clear_x0();
  static const int kX0FieldNumber = 1;
  inline double x0() const;
  inline void set_x0(double value);

  // required double y0 = 2;
  inline bool has_y0() const;
  inline void clear_y0();
  static const int kY0FieldNumber = 2;
  inline double y0() const;
  inline void set_y0(double value);

  // required double x1 = 3;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 3;
  inline double x1() const;
  inline void set_x1(double value);

  // required double y1 = 4;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 4;
  inline double y1() const;
  inline void set_y1(double value);

  // required double beamheight = 5;
  inline bool has_beamheight() const;
  inline void clear_beamheight();
  static const int kBeamheightFieldNumber = 5;
  inline double beamheight() const;
  inline void set_beamheight(double value);

  // required double beamwidth = 6;
  inline bool has_beamwidth() const;
  inline void clear_beamwidth();
  static const int kBeamwidthFieldNumber = 6;
  inline double beamwidth() const;
  inline void set_beamwidth(double value);

  // required double levelheight = 7;
  inline bool has_levelheight() const;
  inline void clear_levelheight();
  static const int kLevelheightFieldNumber = 7;
  inline double levelheight() const;
  inline void set_levelheight(double value);

  // required int32 bottomlevel = 8;
  inline bool has_bottomlevel() const;
  inline void clear_bottomlevel();
  static const int kBottomlevelFieldNumber = 8;
  inline ::google::protobuf::int32 bottomlevel() const;
  inline void set_bottomlevel(::google::protobuf::int32 value);

  // required double angle = 9;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 9;
  inline double angle() const;
  inline void set_angle(double value);

  // required string material = 10;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 10;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string profilename = 11;
  inline bool has_profilename() const;
  inline void clear_profilename();
  static const int kProfilenameFieldNumber = 11;
  inline const ::std::string& profilename() const;
  inline void set_profilename(const ::std::string& value);
  inline void set_profilename(const char* value);
  inline void set_profilename(const char* value, size_t size);
  inline ::std::string* mutable_profilename();
  inline ::std::string* release_profilename();
  inline void set_allocated_profilename(::std::string* profilename);

  // optional string layer = 12;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 12;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:beammsg)
 private:
  inline void set_has_x0();
  inline void clear_has_x0();
  inline void set_has_y0();
  inline void clear_has_y0();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_beamheight();
  inline void clear_has_beamheight();
  inline void set_has_beamwidth();
  inline void clear_has_beamwidth();
  inline void set_has_levelheight();
  inline void clear_has_levelheight();
  inline void set_has_bottomlevel();
  inline void clear_has_bottomlevel();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_profilename();
  inline void clear_has_profilename();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x0_;
  double y0_;
  double x1_;
  double y1_;
  double beamheight_;
  double beamwidth_;
  double levelheight_;
  double angle_;
  ::std::string* material_;
  ::std::string* profilename_;
  ::std::string* layer_;
  ::google::protobuf::int32 bottomlevel_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static beammsg* default_instance_;
};
// -------------------------------------------------------------------

class intarray : public ::google::protobuf::Message {
 public:
  intarray();
  virtual ~intarray();

  intarray(const intarray& from);

  inline intarray& operator=(const intarray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const intarray& default_instance();

  void Swap(intarray* other);

  // implements Message ----------------------------------------------

  intarray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const intarray& from);
  void MergeFrom(const intarray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline ::google::protobuf::int32 lst(int index) const;
  inline void set_lst(int index, ::google::protobuf::int32 value);
  inline void add_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:intarray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lst_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static intarray* default_instance_;
};
// -------------------------------------------------------------------

class doublearray : public ::google::protobuf::Message {
 public:
  doublearray();
  virtual ~doublearray();

  doublearray(const doublearray& from);

  inline doublearray& operator=(const doublearray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doublearray& default_instance();

  void Swap(doublearray* other);

  // implements Message ----------------------------------------------

  doublearray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const doublearray& from);
  void MergeFrom(const doublearray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline double lst(int index) const;
  inline void set_lst(int index, double value);
  inline void add_lst(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      lst() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:doublearray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > lst_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static doublearray* default_instance_;
};
// -------------------------------------------------------------------

class boolarray : public ::google::protobuf::Message {
 public:
  boolarray();
  virtual ~boolarray();

  boolarray(const boolarray& from);

  inline boolarray& operator=(const boolarray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boolarray& default_instance();

  void Swap(boolarray* other);

  // implements Message ----------------------------------------------

  boolarray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boolarray& from);
  void MergeFrom(const boolarray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline bool lst(int index) const;
  inline void set_lst(int index, bool value);
  inline void add_lst(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      lst() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:boolarray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > lst_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static boolarray* default_instance_;
};
// -------------------------------------------------------------------

class stringarray : public ::google::protobuf::Message {
 public:
  stringarray();
  virtual ~stringarray();

  stringarray(const stringarray& from);

  inline stringarray& operator=(const stringarray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stringarray& default_instance();

  void Swap(stringarray* other);

  // implements Message ----------------------------------------------

  stringarray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stringarray& from);
  void MergeFrom(const stringarray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::std::string& lst(int index) const;
  inline ::std::string* mutable_lst(int index);
  inline void set_lst(int index, const ::std::string& value);
  inline void set_lst(int index, const char* value);
  inline void set_lst(int index, const char* value, size_t size);
  inline ::std::string* add_lst();
  inline void add_lst(const ::std::string& value);
  inline void add_lst(const char* value);
  inline void add_lst(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lst();

  // @@protoc_insertion_point(class_scope:stringarray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lst_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static stringarray* default_instance_;
};
// -------------------------------------------------------------------

class objectmsg : public ::google::protobuf::Message {
 public:
  objectmsg();
  virtual ~objectmsg();

  objectmsg(const objectmsg& from);

  inline objectmsg& operator=(const objectmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const objectmsg& default_instance();

  void Swap(objectmsg* other);

  // implements Message ----------------------------------------------

  objectmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const objectmsg& from);
  void MergeFrom(const objectmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required double posx = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 2;
  inline double posx() const;
  inline void set_posx(double value);

  // required double posy = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 3;
  inline double posy() const;
  inline void set_posy(double value);

  // required bool usexyfixsize = 4;
  inline bool has_usexyfixsize() const;
  inline void clear_usexyfixsize();
  static const int kUsexyfixsizeFieldNumber = 4;
  inline bool usexyfixsize() const;
  inline void set_usexyfixsize(bool value);

  // required double xratio = 5;
  inline bool has_xratio() const;
  inline void clear_xratio();
  static const int kXratioFieldNumber = 5;
  inline double xratio() const;
  inline void set_xratio(double value);

  // required double yratio = 6;
  inline bool has_yratio() const;
  inline void clear_yratio();
  static const int kYratioFieldNumber = 6;
  inline double yratio() const;
  inline void set_yratio(double value);

  // required bool useobjsectattrs = 7;
  inline bool has_useobjsectattrs() const;
  inline void clear_useobjsectattrs();
  static const int kUseobjsectattrsFieldNumber = 7;
  inline bool useobjsectattrs() const;
  inline void set_useobjsectattrs(bool value);

  // required double bottom = 8;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 8;
  inline double bottom() const;
  inline void set_bottom(double value);

  // required double angle = 9;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 9;
  inline double angle() const;
  inline void set_angle(double value);

  // required .additionalparams params = 10;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 10;
  inline const ::additionalparams& params() const;
  inline ::additionalparams* mutable_params();
  inline ::additionalparams* release_params();
  inline void set_allocated_params(::additionalparams* params);

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string layer = 13;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 13;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:objectmsg)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_usexyfixsize();
  inline void clear_has_usexyfixsize();
  inline void set_has_xratio();
  inline void clear_has_xratio();
  inline void set_has_yratio();
  inline void clear_has_yratio();
  inline void set_has_useobjsectattrs();
  inline void clear_has_useobjsectattrs();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double posx_;
  double posy_;
  ::google::protobuf::int32 index_;
  bool usexyfixsize_;
  bool useobjsectattrs_;
  double xratio_;
  double yratio_;
  double bottom_;
  double angle_;
  ::additionalparams* params_;
  ::std::string* name_;
  ::std::string* layer_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static objectmsg* default_instance_;
};
// -------------------------------------------------------------------

class libpartmsg : public ::google::protobuf::Message {
 public:
  libpartmsg();
  virtual ~libpartmsg();

  libpartmsg(const libpartmsg& from);

  inline libpartmsg& operator=(const libpartmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const libpartmsg& default_instance();

  void Swap(libpartmsg* other);

  // implements Message ----------------------------------------------

  libpartmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const libpartmsg& from);
  void MergeFrom(const libpartmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string twocode = 2;
  inline bool has_twocode() const;
  inline void clear_twocode();
  static const int kTwocodeFieldNumber = 2;
  inline const ::std::string& twocode() const;
  inline void set_twocode(const ::std::string& value);
  inline void set_twocode(const char* value);
  inline void set_twocode(const char* value, size_t size);
  inline ::std::string* mutable_twocode();
  inline ::std::string* release_twocode();
  inline void set_allocated_twocode(::std::string* twocode);

  // required string threecode = 3;
  inline bool has_threecode() const;
  inline void clear_threecode();
  static const int kThreecodeFieldNumber = 3;
  inline const ::std::string& threecode() const;
  inline void set_threecode(const ::std::string& value);
  inline void set_threecode(const char* value);
  inline void set_threecode(const char* value, size_t size);
  inline ::std::string* mutable_threecode();
  inline ::std::string* release_threecode();
  inline void set_allocated_threecode(::std::string* threecode);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string parentid = 5;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentidFieldNumber = 5;
  inline const ::std::string& parentid() const;
  inline void set_parentid(const ::std::string& value);
  inline void set_parentid(const char* value);
  inline void set_parentid(const char* value, size_t size);
  inline ::std::string* mutable_parentid();
  inline ::std::string* release_parentid();
  inline void set_allocated_parentid(::std::string* parentid);

  // required string mastercode = 6;
  inline bool has_mastercode() const;
  inline void clear_mastercode();
  static const int kMastercodeFieldNumber = 6;
  inline const ::std::string& mastercode() const;
  inline void set_mastercode(const ::std::string& value);
  inline void set_mastercode(const char* value);
  inline void set_mastercode(const char* value, size_t size);
  inline ::std::string* mutable_mastercode();
  inline ::std::string* release_mastercode();
  inline void set_allocated_mastercode(::std::string* mastercode);

  // required string parametercode = 7;
  inline bool has_parametercode() const;
  inline void clear_parametercode();
  static const int kParametercodeFieldNumber = 7;
  inline const ::std::string& parametercode() const;
  inline void set_parametercode(const ::std::string& value);
  inline void set_parametercode(const char* value);
  inline void set_parametercode(const char* value, size_t size);
  inline ::std::string* mutable_parametercode();
  inline ::std::string* release_parametercode();
  inline void set_allocated_parametercode(::std::string* parametercode);

  // repeated string names = 8;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 8;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated double doubles = 9;
  inline int doubles_size() const;
  inline void clear_doubles();
  static const int kDoublesFieldNumber = 9;
  inline double doubles(int index) const;
  inline void set_doubles(int index, double value);
  inline void add_doubles(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      doubles() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_doubles();

  // repeated string strings = 10;
  inline int strings_size() const;
  inline void clear_strings();
  static const int kStringsFieldNumber = 10;
  inline const ::std::string& strings(int index) const;
  inline ::std::string* mutable_strings(int index);
  inline void set_strings(int index, const ::std::string& value);
  inline void set_strings(int index, const char* value);
  inline void set_strings(int index, const char* value, size_t size);
  inline ::std::string* add_strings();
  inline void add_strings(const ::std::string& value);
  inline void add_strings(const char* value);
  inline void add_strings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // repeated int32 integers = 11;
  inline int integers_size() const;
  inline void clear_integers();
  static const int kIntegersFieldNumber = 11;
  inline ::google::protobuf::int32 integers(int index) const;
  inline void set_integers(int index, ::google::protobuf::int32 value);
  inline void add_integers(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      integers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_integers();

  // repeated bool booleans = 12;
  inline int booleans_size() const;
  inline void clear_booleans();
  static const int kBooleansFieldNumber = 12;
  inline bool booleans(int index) const;
  inline void set_booleans(int index, bool value);
  inline void add_booleans(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      booleans() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_booleans();

  // repeated string paramtype = 13;
  inline int paramtype_size() const;
  inline void clear_paramtype();
  static const int kParamtypeFieldNumber = 13;
  inline const ::std::string& paramtype(int index) const;
  inline ::std::string* mutable_paramtype(int index);
  inline void set_paramtype(int index, const ::std::string& value);
  inline void set_paramtype(int index, const char* value);
  inline void set_paramtype(int index, const char* value, size_t size);
  inline ::std::string* add_paramtype();
  inline void add_paramtype(const ::std::string& value);
  inline void add_paramtype(const char* value);
  inline void add_paramtype(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramtype() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramtype();

  // repeated .intarray intarrays = 14;
  inline int intarrays_size() const;
  inline void clear_intarrays();
  static const int kIntarraysFieldNumber = 14;
  inline const ::intarray& intarrays(int index) const;
  inline ::intarray* mutable_intarrays(int index);
  inline ::intarray* add_intarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::intarray >&
      intarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::intarray >*
      mutable_intarrays();

  // repeated .doublearray doublearrays = 15;
  inline int doublearrays_size() const;
  inline void clear_doublearrays();
  static const int kDoublearraysFieldNumber = 15;
  inline const ::doublearray& doublearrays(int index) const;
  inline ::doublearray* mutable_doublearrays(int index);
  inline ::doublearray* add_doublearrays();
  inline const ::google::protobuf::RepeatedPtrField< ::doublearray >&
      doublearrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::doublearray >*
      mutable_doublearrays();

  // repeated .boolarray boolarrays = 16;
  inline int boolarrays_size() const;
  inline void clear_boolarrays();
  static const int kBoolarraysFieldNumber = 16;
  inline const ::boolarray& boolarrays(int index) const;
  inline ::boolarray* mutable_boolarrays(int index);
  inline ::boolarray* add_boolarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::boolarray >&
      boolarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::boolarray >*
      mutable_boolarrays();

  // repeated .stringarray stringarrays = 17;
  inline int stringarrays_size() const;
  inline void clear_stringarrays();
  static const int kStringarraysFieldNumber = 17;
  inline const ::stringarray& stringarrays(int index) const;
  inline ::stringarray* mutable_stringarrays(int index);
  inline ::stringarray* add_stringarrays();
  inline const ::google::protobuf::RepeatedPtrField< ::stringarray >&
      stringarrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::stringarray >*
      mutable_stringarrays();

  // repeated bool isarray = 18;
  inline int isarray_size() const;
  inline void clear_isarray();
  static const int kIsarrayFieldNumber = 18;
  inline bool isarray(int index) const;
  inline void set_isarray(int index, bool value);
  inline void add_isarray(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      isarray() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_isarray();

  // @@protoc_insertion_point(class_scope:libpartmsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_twocode();
  inline void clear_has_twocode();
  inline void set_has_threecode();
  inline void clear_has_threecode();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_mastercode();
  inline void clear_has_mastercode();
  inline void set_has_parametercode();
  inline void clear_has_parametercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* twocode_;
  ::std::string* threecode_;
  ::std::string* type_;
  ::std::string* parentid_;
  ::std::string* mastercode_;
  ::std::string* parametercode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedField< double > doubles_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > integers_;
  ::google::protobuf::RepeatedField< bool > booleans_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramtype_;
  ::google::protobuf::RepeatedPtrField< ::intarray > intarrays_;
  ::google::protobuf::RepeatedPtrField< ::doublearray > doublearrays_;
  ::google::protobuf::RepeatedPtrField< ::boolarray > boolarrays_;
  ::google::protobuf::RepeatedPtrField< ::stringarray > stringarrays_;
  ::google::protobuf::RepeatedField< bool > isarray_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static libpartmsg* default_instance_;
};
// -------------------------------------------------------------------

class profilemsg : public ::google::protobuf::Message {
 public:
  profilemsg();
  virtual ~profilemsg();

  profilemsg(const profilemsg& from);

  inline profilemsg& operator=(const profilemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const profilemsg& default_instance();

  void Swap(profilemsg* other);

  // implements Message ----------------------------------------------

  profilemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const profilemsg& from);
  void MergeFrom(const profilemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // required .polyarcsmessage arcs = 2;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 2;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // required string material = 3;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 3;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:profilemsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  ::std::string* material_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static profilemsg* default_instance_;
};
// -------------------------------------------------------------------

class layermsg : public ::google::protobuf::Message {
 public:
  layermsg();
  virtual ~layermsg();

  layermsg(const layermsg& from);

  inline layermsg& operator=(const layermsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const layermsg& default_instance();

  void Swap(layermsg* other);

  // implements Message ----------------------------------------------

  layermsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const layermsg& from);
  void MergeFrom(const layermsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 connection = 2;
  inline bool has_connection() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 2;
  inline ::google::protobuf::int32 connection() const;
  inline void set_connection(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:layermsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_connection();
  inline void clear_has_connection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 connection_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static layermsg* default_instance_;
};
// -------------------------------------------------------------------

class layerelementmsg : public ::google::protobuf::Message {
 public:
  layerelementmsg();
  virtual ~layerelementmsg();

  layerelementmsg(const layerelementmsg& from);

  inline layerelementmsg& operator=(const layerelementmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const layerelementmsg& default_instance();

  void Swap(layerelementmsg* other);

  // implements Message ----------------------------------------------

  layerelementmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const layerelementmsg& from);
  void MergeFrom(const layerelementmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // required string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // @@protoc_insertion_point(class_scope:layerelementmsg)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::std::string* layer_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static layerelementmsg* default_instance_;
};
// -------------------------------------------------------------------

class splinemsg : public ::google::protobuf::Message {
 public:
  splinemsg();
  virtual ~splinemsg();

  splinemsg(const splinemsg& from);

  inline splinemsg& operator=(const splinemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const splinemsg& default_instance();

  void Swap(splinemsg* other);

  // implements Message ----------------------------------------------

  splinemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const splinemsg& from);
  void MergeFrom(const splinemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pointsmessage points = 1;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::pointsmessage& points() const;
  inline ::pointsmessage* mutable_points();
  inline ::pointsmessage* release_points();
  inline void set_allocated_points(::pointsmessage* points);

  // required bool closed = 2;
  inline bool has_closed() const;
  inline void clear_closed();
  static const int kClosedFieldNumber = 2;
  inline bool closed() const;
  inline void set_closed(bool value);

  // @@protoc_insertion_point(class_scope:splinemsg)
 private:
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_closed();
  inline void clear_has_closed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* points_;
  bool closed_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static splinemsg* default_instance_;
};
// -------------------------------------------------------------------

class linemsg : public ::google::protobuf::Message {
 public:
  linemsg();
  virtual ~linemsg();

  linemsg(const linemsg& from);

  inline linemsg& operator=(const linemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const linemsg& default_instance();

  void Swap(linemsg* other);

  // implements Message ----------------------------------------------

  linemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const linemsg& from);
  void MergeFrom(const linemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // @@protoc_insertion_point(class_scope:linemsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static linemsg* default_instance_;
};
// -------------------------------------------------------------------

class polylinemsg : public ::google::protobuf::Message {
 public:
  polylinemsg();
  virtual ~polylinemsg();

  polylinemsg(const polylinemsg& from);

  inline polylinemsg& operator=(const polylinemsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const polylinemsg& default_instance();

  void Swap(polylinemsg* other);

  // implements Message ----------------------------------------------

  polylinemsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const polylinemsg& from);
  void MergeFrom(const polylinemsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional .polyarcsmessage arcs = 2;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 2;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // @@protoc_insertion_point(class_scope:polylinemsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static polylinemsg* default_instance_;
};
// -------------------------------------------------------------------

class getlinesmsg : public ::google::protobuf::Message {
 public:
  getlinesmsg();
  virtual ~getlinesmsg();

  getlinesmsg(const getlinesmsg& from);

  inline getlinesmsg& operator=(const getlinesmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getlinesmsg& default_instance();

  void Swap(getlinesmsg* other);

  // implements Message ----------------------------------------------

  getlinesmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getlinesmsg& from);
  void MergeFrom(const getlinesmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .linemsg lines = 1;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 1;
  inline const ::linemsg& lines(int index) const;
  inline ::linemsg* mutable_lines(int index);
  inline ::linemsg* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::linemsg >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::linemsg >*
      mutable_lines();

  // repeated string guids = 2;
  inline int guids_size() const;
  inline void clear_guids();
  static const int kGuidsFieldNumber = 2;
  inline const ::std::string& guids(int index) const;
  inline ::std::string* mutable_guids(int index);
  inline void set_guids(int index, const ::std::string& value);
  inline void set_guids(int index, const char* value);
  inline void set_guids(int index, const char* value, size_t size);
  inline ::std::string* add_guids();
  inline void add_guids(const ::std::string& value);
  inline void add_guids(const char* value);
  inline void add_guids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guids();

  // @@protoc_insertion_point(class_scope:getlinesmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::linemsg > lines_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guids_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static getlinesmsg* default_instance_;
};
// -------------------------------------------------------------------

class getpolylinesmsg : public ::google::protobuf::Message {
 public:
  getpolylinesmsg();
  virtual ~getpolylinesmsg();

  getpolylinesmsg(const getpolylinesmsg& from);

  inline getpolylinesmsg& operator=(const getpolylinesmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getpolylinesmsg& default_instance();

  void Swap(getpolylinesmsg* other);

  // implements Message ----------------------------------------------

  getpolylinesmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getpolylinesmsg& from);
  void MergeFrom(const getpolylinesmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .polylinemsg polylines = 1;
  inline int polylines_size() const;
  inline void clear_polylines();
  static const int kPolylinesFieldNumber = 1;
  inline const ::polylinemsg& polylines(int index) const;
  inline ::polylinemsg* mutable_polylines(int index);
  inline ::polylinemsg* add_polylines();
  inline const ::google::protobuf::RepeatedPtrField< ::polylinemsg >&
      polylines() const;
  inline ::google::protobuf::RepeatedPtrField< ::polylinemsg >*
      mutable_polylines();

  // repeated string guids = 2;
  inline int guids_size() const;
  inline void clear_guids();
  static const int kGuidsFieldNumber = 2;
  inline const ::std::string& guids(int index) const;
  inline ::std::string* mutable_guids(int index);
  inline void set_guids(int index, const ::std::string& value);
  inline void set_guids(int index, const char* value);
  inline void set_guids(int index, const char* value, size_t size);
  inline ::std::string* add_guids();
  inline void add_guids(const ::std::string& value);
  inline void add_guids(const char* value);
  inline void add_guids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guids();

  // @@protoc_insertion_point(class_scope:getpolylinesmsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::polylinemsg > polylines_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guids_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static getpolylinesmsg* default_instance_;
};
// -------------------------------------------------------------------

class revshellmsg : public ::google::protobuf::Message {
 public:
  revshellmsg();
  virtual ~revshellmsg();

  revshellmsg(const revshellmsg& from);

  inline revshellmsg& operator=(const revshellmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const revshellmsg& default_instance();

  void Swap(revshellmsg* other);

  // implements Message ----------------------------------------------

  revshellmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const revshellmsg& from);
  void MergeFrom(const revshellmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional .polyarcsmessage arcs = 2;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 2;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required bool flipped = 4;
  inline bool has_flipped() const;
  inline void clear_flipped();
  static const int kFlippedFieldNumber = 4;
  inline bool flipped() const;
  inline void set_flipped(bool value);

  // required double slantangle = 5;
  inline bool has_slantangle() const;
  inline void clear_slantangle();
  static const int kSlantangleFieldNumber = 5;
  inline double slantangle() const;
  inline void set_slantangle(double value);

  // required double revangle = 6;
  inline bool has_revangle() const;
  inline void clear_revangle();
  static const int kRevangleFieldNumber = 6;
  inline double revangle() const;
  inline void set_revangle(double value);

  // required double distortionangle = 7;
  inline bool has_distortionangle() const;
  inline void clear_distortionangle();
  static const int kDistortionangleFieldNumber = 7;
  inline double distortionangle() const;
  inline void set_distortionangle(double value);

  // required double begangle = 8;
  inline bool has_begangle() const;
  inline void clear_begangle();
  static const int kBegangleFieldNumber = 8;
  inline double begangle() const;
  inline void set_begangle(double value);

  // repeated double axis = 9;
  inline int axis_size() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 9;
  inline double axis(int index) const;
  inline void set_axis(int index, double value);
  inline void add_axis(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      axis() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_axis();

  // required string material = 10;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 10;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required double thickness = 12;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 12;
  inline double thickness() const;
  inline void set_thickness(double value);

  // required double height = 13;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 13;
  inline double height() const;
  inline void set_height(double value);

  // @@protoc_insertion_point(class_scope:revshellmsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_flipped();
  inline void clear_has_flipped();
  inline void set_has_slantangle();
  inline void clear_has_slantangle();
  inline void set_has_revangle();
  inline void clear_has_revangle();
  inline void set_has_distortionangle();
  inline void clear_has_distortionangle();
  inline void set_has_begangle();
  inline void clear_has_begangle();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  ::google::protobuf::int32 level_;
  bool flipped_;
  double slantangle_;
  double revangle_;
  double distortionangle_;
  double begangle_;
  ::google::protobuf::RepeatedField< double > axis_;
  ::std::string* material_;
  ::std::string* type_;
  double thickness_;
  double height_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static revshellmsg* default_instance_;
};
// -------------------------------------------------------------------

class extshellmsg : public ::google::protobuf::Message {
 public:
  extshellmsg();
  virtual ~extshellmsg();

  extshellmsg(const extshellmsg& from);

  inline extshellmsg& operator=(const extshellmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extshellmsg& default_instance();

  void Swap(extshellmsg* other);

  // implements Message ----------------------------------------------

  extshellmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const extshellmsg& from);
  void MergeFrom(const extshellmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pointsmessage pts = 1;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 1;
  inline const ::pointsmessage& pts() const;
  inline ::pointsmessage* mutable_pts();
  inline ::pointsmessage* release_pts();
  inline void set_allocated_pts(::pointsmessage* pts);

  // optional .polyarcsmessage arcs = 2;
  inline bool has_arcs() const;
  inline void clear_arcs();
  static const int kArcsFieldNumber = 2;
  inline const ::polyarcsmessage& arcs() const;
  inline ::polyarcsmessage* mutable_arcs();
  inline ::polyarcsmessage* release_arcs();
  inline void set_allocated_arcs(::polyarcsmessage* arcs);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required bool flipped = 4;
  inline bool has_flipped() const;
  inline void clear_flipped();
  static const int kFlippedFieldNumber = 4;
  inline bool flipped() const;
  inline void set_flipped(bool value);

  // required double cextx = 5;
  inline bool has_cextx() const;
  inline void clear_cextx();
  static const int kCextxFieldNumber = 5;
  inline double cextx() const;
  inline void set_cextx(double value);

  // required double cexty = 6;
  inline bool has_cexty() const;
  inline void clear_cexty();
  static const int kCextyFieldNumber = 6;
  inline double cexty() const;
  inline void set_cexty(double value);

  // required double extx = 7;
  inline bool has_extx() const;
  inline void clear_extx();
  static const int kExtxFieldNumber = 7;
  inline double extx() const;
  inline void set_extx(double value);

  // required double exty = 8;
  inline bool has_exty() const;
  inline void clear_exty();
  static const int kExtyFieldNumber = 8;
  inline double exty() const;
  inline void set_exty(double value);

  // required double extz = 9;
  inline bool has_extz() const;
  inline void clear_extz();
  static const int kExtzFieldNumber = 9;
  inline double extz() const;
  inline void set_extz(double value);

  // repeated bool visible = 10;
  inline int visible_size() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 10;
  inline bool visible(int index) const;
  inline void set_visible(int index, bool value);
  inline void add_visible(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      visible() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_visible();

  // required string material = 11;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 11;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required double thickness = 13;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 13;
  inline double thickness() const;
  inline void set_thickness(double value);

  // @@protoc_insertion_point(class_scope:extshellmsg)
 private:
  inline void set_has_pts();
  inline void clear_has_pts();
  inline void set_has_arcs();
  inline void clear_has_arcs();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_flipped();
  inline void clear_has_flipped();
  inline void set_has_cextx();
  inline void clear_has_cextx();
  inline void set_has_cexty();
  inline void clear_has_cexty();
  inline void set_has_extx();
  inline void clear_has_extx();
  inline void set_has_exty();
  inline void clear_has_exty();
  inline void set_has_extz();
  inline void clear_has_extz();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_thickness();
  inline void clear_has_thickness();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pointsmessage* pts_;
  ::polyarcsmessage* arcs_;
  ::google::protobuf::int32 level_;
  bool flipped_;
  double cextx_;
  double cexty_;
  double extx_;
  double exty_;
  double extz_;
  ::google::protobuf::RepeatedField< bool > visible_;
  ::std::string* material_;
  ::std::string* type_;
  double thickness_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static extshellmsg* default_instance_;
};
// -------------------------------------------------------------------

class rendermsg : public ::google::protobuf::Message {
 public:
  rendermsg();
  virtual ~rendermsg();

  rendermsg(const rendermsg& from);

  inline rendermsg& operator=(const rendermsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rendermsg& default_instance();

  void Swap(rendermsg* other);

  // implements Message ----------------------------------------------

  rendermsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rendermsg& from);
  void MergeFrom(const rendermsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:rendermsg)
 private:
  inline void set_has_file();
  inline void clear_has_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static rendermsg* default_instance_;
};
// -------------------------------------------------------------------

class cameramsg : public ::google::protobuf::Message {
 public:
  cameramsg();
  virtual ~cameramsg();

  cameramsg(const cameramsg& from);

  inline cameramsg& operator=(const cameramsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cameramsg& default_instance();

  void Swap(cameramsg* other);

  // implements Message ----------------------------------------------

  cameramsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cameramsg& from);
  void MergeFrom(const cameramsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double cx = 1;
  inline bool has_cx() const;
  inline void clear_cx();
  static const int kCxFieldNumber = 1;
  inline double cx() const;
  inline void set_cx(double value);

  // required double cy = 2;
  inline bool has_cy() const;
  inline void clear_cy();
  static const int kCyFieldNumber = 2;
  inline double cy() const;
  inline void set_cy(double value);

  // required double cz = 3;
  inline bool has_cz() const;
  inline void clear_cz();
  static const int kCzFieldNumber = 3;
  inline double cz() const;
  inline void set_cz(double value);

  // required double tx = 4;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 4;
  inline double tx() const;
  inline void set_tx(double value);

  // required double ty = 5;
  inline bool has_ty() const;
  inline void clear_ty();
  static const int kTyFieldNumber = 5;
  inline double ty() const;
  inline void set_ty(double value);

  // required double tz = 6;
  inline bool has_tz() const;
  inline void clear_tz();
  static const int kTzFieldNumber = 6;
  inline double tz() const;
  inline void set_tz(double value);

  // required double lens = 7;
  inline bool has_lens() const;
  inline void clear_lens();
  static const int kLensFieldNumber = 7;
  inline double lens() const;
  inline void set_lens(double value);

  // required double sunazimuth = 8;
  inline bool has_sunazimuth() const;
  inline void clear_sunazimuth();
  static const int kSunazimuthFieldNumber = 8;
  inline double sunazimuth() const;
  inline void set_sunazimuth(double value);

  // required double sunaltitude = 9;
  inline bool has_sunaltitude() const;
  inline void clear_sunaltitude();
  static const int kSunaltitudeFieldNumber = 9;
  inline double sunaltitude() const;
  inline void set_sunaltitude(double value);

  // @@protoc_insertion_point(class_scope:cameramsg)
 private:
  inline void set_has_cx();
  inline void clear_has_cx();
  inline void set_has_cy();
  inline void clear_has_cy();
  inline void set_has_cz();
  inline void clear_has_cz();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_ty();
  inline void clear_has_ty();
  inline void set_has_tz();
  inline void clear_has_tz();
  inline void set_has_lens();
  inline void clear_has_lens();
  inline void set_has_sunazimuth();
  inline void clear_has_sunazimuth();
  inline void set_has_sunaltitude();
  inline void clear_has_sunaltitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double cx_;
  double cy_;
  double cz_;
  double tx_;
  double ty_;
  double tz_;
  double lens_;
  double sunazimuth_;
  double sunaltitude_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static cameramsg* default_instance_;
};
// ===================================================================


// ===================================================================

// namemessage

// required string name = 1;
inline bool namemessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void namemessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void namemessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void namemessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& namemessage::name() const {
  // @@protoc_insertion_point(field_get:namemessage.name)
  return *name_;
}
inline void namemessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:namemessage.name)
}
inline void namemessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:namemessage.name)
}
inline void namemessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:namemessage.name)
}
inline ::std::string* namemessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:namemessage.name)
  return name_;
}
inline ::std::string* namemessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void namemessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:namemessage.name)
}

// -------------------------------------------------------------------

// elementid

// required string guid = 1;
inline bool elementid::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void elementid::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void elementid::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void elementid::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& elementid::guid() const {
  // @@protoc_insertion_point(field_get:elementid.guid)
  return *guid_;
}
inline void elementid::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:elementid.guid)
}
inline void elementid::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:elementid.guid)
}
inline void elementid::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:elementid.guid)
}
inline ::std::string* elementid::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:elementid.guid)
  return guid_;
}
inline ::std::string* elementid::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void elementid::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:elementid.guid)
}

// required bool crashmaterial = 2;
inline bool elementid::has_crashmaterial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void elementid::set_has_crashmaterial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void elementid::clear_has_crashmaterial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void elementid::clear_crashmaterial() {
  crashmaterial_ = false;
  clear_has_crashmaterial();
}
inline bool elementid::crashmaterial() const {
  // @@protoc_insertion_point(field_get:elementid.crashmaterial)
  return crashmaterial_;
}
inline void elementid::set_crashmaterial(bool value) {
  set_has_crashmaterial();
  crashmaterial_ = value;
  // @@protoc_insertion_point(field_set:elementid.crashmaterial)
}

// -------------------------------------------------------------------

// elementidlist

// repeated string guid = 1;
inline int elementidlist::guid_size() const {
  return guid_.size();
}
inline void elementidlist::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& elementidlist::guid(int index) const {
  // @@protoc_insertion_point(field_get:elementidlist.guid)
  return guid_.Get(index);
}
inline ::std::string* elementidlist::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:elementidlist.guid)
  return guid_.Mutable(index);
}
inline void elementidlist::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:elementidlist.guid)
  guid_.Mutable(index)->assign(value);
}
inline void elementidlist::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:elementidlist.guid)
}
inline void elementidlist::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:elementidlist.guid)
}
inline ::std::string* elementidlist::add_guid() {
  return guid_.Add();
}
inline void elementidlist::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:elementidlist.guid)
}
inline void elementidlist::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:elementidlist.guid)
}
inline void elementidlist::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:elementidlist.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
elementidlist::guid() const {
  // @@protoc_insertion_point(field_list:elementidlist.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
elementidlist::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:elementidlist.guid)
  return &guid_;
}

// required bool crashmaterial = 2;
inline bool elementidlist::has_crashmaterial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void elementidlist::set_has_crashmaterial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void elementidlist::clear_has_crashmaterial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void elementidlist::clear_crashmaterial() {
  crashmaterial_ = false;
  clear_has_crashmaterial();
}
inline bool elementidlist::crashmaterial() const {
  // @@protoc_insertion_point(field_get:elementidlist.crashmaterial)
  return crashmaterial_;
}
inline void elementidlist::set_crashmaterial(bool value) {
  set_has_crashmaterial();
  crashmaterial_ = value;
  // @@protoc_insertion_point(field_set:elementidlist.crashmaterial)
}

// -------------------------------------------------------------------

// pointmessage

// required double p0x = 1;
inline bool pointmessage::has_p0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pointmessage::set_has_p0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pointmessage::clear_has_p0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pointmessage::clear_p0x() {
  p0x_ = 0;
  clear_has_p0x();
}
inline double pointmessage::p0x() const {
  // @@protoc_insertion_point(field_get:pointmessage.p0x)
  return p0x_;
}
inline void pointmessage::set_p0x(double value) {
  set_has_p0x();
  p0x_ = value;
  // @@protoc_insertion_point(field_set:pointmessage.p0x)
}

// required double p0y = 2;
inline bool pointmessage::has_p0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pointmessage::set_has_p0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pointmessage::clear_has_p0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pointmessage::clear_p0y() {
  p0y_ = 0;
  clear_has_p0y();
}
inline double pointmessage::p0y() const {
  // @@protoc_insertion_point(field_get:pointmessage.p0y)
  return p0y_;
}
inline void pointmessage::set_p0y(double value) {
  set_has_p0y();
  p0y_ = value;
  // @@protoc_insertion_point(field_set:pointmessage.p0y)
}

// -------------------------------------------------------------------

// polyarcmessage

// required int32 begindex = 1;
inline bool polyarcmessage::has_begindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void polyarcmessage::set_has_begindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void polyarcmessage::clear_has_begindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void polyarcmessage::clear_begindex() {
  begindex_ = 0;
  clear_has_begindex();
}
inline ::google::protobuf::int32 polyarcmessage::begindex() const {
  // @@protoc_insertion_point(field_get:polyarcmessage.begindex)
  return begindex_;
}
inline void polyarcmessage::set_begindex(::google::protobuf::int32 value) {
  set_has_begindex();
  begindex_ = value;
  // @@protoc_insertion_point(field_set:polyarcmessage.begindex)
}

// required int32 endindex = 2;
inline bool polyarcmessage::has_endindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void polyarcmessage::set_has_endindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void polyarcmessage::clear_has_endindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void polyarcmessage::clear_endindex() {
  endindex_ = 0;
  clear_has_endindex();
}
inline ::google::protobuf::int32 polyarcmessage::endindex() const {
  // @@protoc_insertion_point(field_get:polyarcmessage.endindex)
  return endindex_;
}
inline void polyarcmessage::set_endindex(::google::protobuf::int32 value) {
  set_has_endindex();
  endindex_ = value;
  // @@protoc_insertion_point(field_set:polyarcmessage.endindex)
}

// required double arcangle = 3;
inline bool polyarcmessage::has_arcangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void polyarcmessage::set_has_arcangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void polyarcmessage::clear_has_arcangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void polyarcmessage::clear_arcangle() {
  arcangle_ = 0;
  clear_has_arcangle();
}
inline double polyarcmessage::arcangle() const {
  // @@protoc_insertion_point(field_get:polyarcmessage.arcangle)
  return arcangle_;
}
inline void polyarcmessage::set_arcangle(double value) {
  set_has_arcangle();
  arcangle_ = value;
  // @@protoc_insertion_point(field_set:polyarcmessage.arcangle)
}

// -------------------------------------------------------------------

// doublemessage

// required double d = 1;
inline bool doublemessage::has_d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doublemessage::set_has_d() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doublemessage::clear_has_d() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doublemessage::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline double doublemessage::d() const {
  // @@protoc_insertion_point(field_get:doublemessage.d)
  return d_;
}
inline void doublemessage::set_d(double value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:doublemessage.d)
}

// -------------------------------------------------------------------

// intlistmsg

// repeated int32 ilist = 1;
inline int intlistmsg::ilist_size() const {
  return ilist_.size();
}
inline void intlistmsg::clear_ilist() {
  ilist_.Clear();
}
inline ::google::protobuf::int32 intlistmsg::ilist(int index) const {
  // @@protoc_insertion_point(field_get:intlistmsg.ilist)
  return ilist_.Get(index);
}
inline void intlistmsg::set_ilist(int index, ::google::protobuf::int32 value) {
  ilist_.Set(index, value);
  // @@protoc_insertion_point(field_set:intlistmsg.ilist)
}
inline void intlistmsg::add_ilist(::google::protobuf::int32 value) {
  ilist_.Add(value);
  // @@protoc_insertion_point(field_add:intlistmsg.ilist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
intlistmsg::ilist() const {
  // @@protoc_insertion_point(field_list:intlistmsg.ilist)
  return ilist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
intlistmsg::mutable_ilist() {
  // @@protoc_insertion_point(field_mutable_list:intlistmsg.ilist)
  return &ilist_;
}

// -------------------------------------------------------------------

// repeateddoublemsg

// repeated double dlist = 1;
inline int repeateddoublemsg::dlist_size() const {
  return dlist_.size();
}
inline void repeateddoublemsg::clear_dlist() {
  dlist_.Clear();
}
inline double repeateddoublemsg::dlist(int index) const {
  // @@protoc_insertion_point(field_get:repeateddoublemsg.dlist)
  return dlist_.Get(index);
}
inline void repeateddoublemsg::set_dlist(int index, double value) {
  dlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:repeateddoublemsg.dlist)
}
inline void repeateddoublemsg::add_dlist(double value) {
  dlist_.Add(value);
  // @@protoc_insertion_point(field_add:repeateddoublemsg.dlist)
}
inline const ::google::protobuf::RepeatedField< double >&
repeateddoublemsg::dlist() const {
  // @@protoc_insertion_point(field_list:repeateddoublemsg.dlist)
  return dlist_;
}
inline ::google::protobuf::RepeatedField< double >*
repeateddoublemsg::mutable_dlist() {
  // @@protoc_insertion_point(field_mutable_list:repeateddoublemsg.dlist)
  return &dlist_;
}

// -------------------------------------------------------------------

// additionalparams

// repeated string names = 1;
inline int additionalparams::names_size() const {
  return names_.size();
}
inline void additionalparams::clear_names() {
  names_.Clear();
}
inline const ::std::string& additionalparams::names(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.names)
  return names_.Get(index);
}
inline ::std::string* additionalparams::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.names)
  return names_.Mutable(index);
}
inline void additionalparams::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:additionalparams.names)
  names_.Mutable(index)->assign(value);
}
inline void additionalparams::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:additionalparams.names)
}
inline void additionalparams::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:additionalparams.names)
}
inline ::std::string* additionalparams::add_names() {
  return names_.Add();
}
inline void additionalparams::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:additionalparams.names)
}
inline void additionalparams::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:additionalparams.names)
}
inline void additionalparams::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:additionalparams.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
additionalparams::names() const {
  // @@protoc_insertion_point(field_list:additionalparams.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
additionalparams::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.names)
  return &names_;
}

// repeated double doubles = 2;
inline int additionalparams::doubles_size() const {
  return doubles_.size();
}
inline void additionalparams::clear_doubles() {
  doubles_.Clear();
}
inline double additionalparams::doubles(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.doubles)
  return doubles_.Get(index);
}
inline void additionalparams::set_doubles(int index, double value) {
  doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:additionalparams.doubles)
}
inline void additionalparams::add_doubles(double value) {
  doubles_.Add(value);
  // @@protoc_insertion_point(field_add:additionalparams.doubles)
}
inline const ::google::protobuf::RepeatedField< double >&
additionalparams::doubles() const {
  // @@protoc_insertion_point(field_list:additionalparams.doubles)
  return doubles_;
}
inline ::google::protobuf::RepeatedField< double >*
additionalparams::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.doubles)
  return &doubles_;
}

// repeated string strings = 3;
inline int additionalparams::strings_size() const {
  return strings_.size();
}
inline void additionalparams::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& additionalparams::strings(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.strings)
  return strings_.Get(index);
}
inline ::std::string* additionalparams::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.strings)
  return strings_.Mutable(index);
}
inline void additionalparams::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:additionalparams.strings)
  strings_.Mutable(index)->assign(value);
}
inline void additionalparams::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:additionalparams.strings)
}
inline void additionalparams::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:additionalparams.strings)
}
inline ::std::string* additionalparams::add_strings() {
  return strings_.Add();
}
inline void additionalparams::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:additionalparams.strings)
}
inline void additionalparams::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:additionalparams.strings)
}
inline void additionalparams::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:additionalparams.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
additionalparams::strings() const {
  // @@protoc_insertion_point(field_list:additionalparams.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
additionalparams::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.strings)
  return &strings_;
}

// repeated int32 integers = 4;
inline int additionalparams::integers_size() const {
  return integers_.size();
}
inline void additionalparams::clear_integers() {
  integers_.Clear();
}
inline ::google::protobuf::int32 additionalparams::integers(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.integers)
  return integers_.Get(index);
}
inline void additionalparams::set_integers(int index, ::google::protobuf::int32 value) {
  integers_.Set(index, value);
  // @@protoc_insertion_point(field_set:additionalparams.integers)
}
inline void additionalparams::add_integers(::google::protobuf::int32 value) {
  integers_.Add(value);
  // @@protoc_insertion_point(field_add:additionalparams.integers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
additionalparams::integers() const {
  // @@protoc_insertion_point(field_list:additionalparams.integers)
  return integers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
additionalparams::mutable_integers() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.integers)
  return &integers_;
}

// repeated bool booleans = 5;
inline int additionalparams::booleans_size() const {
  return booleans_.size();
}
inline void additionalparams::clear_booleans() {
  booleans_.Clear();
}
inline bool additionalparams::booleans(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.booleans)
  return booleans_.Get(index);
}
inline void additionalparams::set_booleans(int index, bool value) {
  booleans_.Set(index, value);
  // @@protoc_insertion_point(field_set:additionalparams.booleans)
}
inline void additionalparams::add_booleans(bool value) {
  booleans_.Add(value);
  // @@protoc_insertion_point(field_add:additionalparams.booleans)
}
inline const ::google::protobuf::RepeatedField< bool >&
additionalparams::booleans() const {
  // @@protoc_insertion_point(field_list:additionalparams.booleans)
  return booleans_;
}
inline ::google::protobuf::RepeatedField< bool >*
additionalparams::mutable_booleans() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.booleans)
  return &booleans_;
}

// repeated string paramtype = 6;
inline int additionalparams::paramtype_size() const {
  return paramtype_.size();
}
inline void additionalparams::clear_paramtype() {
  paramtype_.Clear();
}
inline const ::std::string& additionalparams::paramtype(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.paramtype)
  return paramtype_.Get(index);
}
inline ::std::string* additionalparams::mutable_paramtype(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.paramtype)
  return paramtype_.Mutable(index);
}
inline void additionalparams::set_paramtype(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:additionalparams.paramtype)
  paramtype_.Mutable(index)->assign(value);
}
inline void additionalparams::set_paramtype(int index, const char* value) {
  paramtype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:additionalparams.paramtype)
}
inline void additionalparams::set_paramtype(int index, const char* value, size_t size) {
  paramtype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:additionalparams.paramtype)
}
inline ::std::string* additionalparams::add_paramtype() {
  return paramtype_.Add();
}
inline void additionalparams::add_paramtype(const ::std::string& value) {
  paramtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:additionalparams.paramtype)
}
inline void additionalparams::add_paramtype(const char* value) {
  paramtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:additionalparams.paramtype)
}
inline void additionalparams::add_paramtype(const char* value, size_t size) {
  paramtype_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:additionalparams.paramtype)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
additionalparams::paramtype() const {
  // @@protoc_insertion_point(field_list:additionalparams.paramtype)
  return paramtype_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
additionalparams::mutable_paramtype() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.paramtype)
  return &paramtype_;
}

// repeated .intarray intarrays = 7;
inline int additionalparams::intarrays_size() const {
  return intarrays_.size();
}
inline void additionalparams::clear_intarrays() {
  intarrays_.Clear();
}
inline const ::intarray& additionalparams::intarrays(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.intarrays)
  return intarrays_.Get(index);
}
inline ::intarray* additionalparams::mutable_intarrays(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.intarrays)
  return intarrays_.Mutable(index);
}
inline ::intarray* additionalparams::add_intarrays() {
  // @@protoc_insertion_point(field_add:additionalparams.intarrays)
  return intarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::intarray >&
additionalparams::intarrays() const {
  // @@protoc_insertion_point(field_list:additionalparams.intarrays)
  return intarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::intarray >*
additionalparams::mutable_intarrays() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.intarrays)
  return &intarrays_;
}

// repeated .doublearray doublearrays = 8;
inline int additionalparams::doublearrays_size() const {
  return doublearrays_.size();
}
inline void additionalparams::clear_doublearrays() {
  doublearrays_.Clear();
}
inline const ::doublearray& additionalparams::doublearrays(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.doublearrays)
  return doublearrays_.Get(index);
}
inline ::doublearray* additionalparams::mutable_doublearrays(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.doublearrays)
  return doublearrays_.Mutable(index);
}
inline ::doublearray* additionalparams::add_doublearrays() {
  // @@protoc_insertion_point(field_add:additionalparams.doublearrays)
  return doublearrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::doublearray >&
additionalparams::doublearrays() const {
  // @@protoc_insertion_point(field_list:additionalparams.doublearrays)
  return doublearrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::doublearray >*
additionalparams::mutable_doublearrays() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.doublearrays)
  return &doublearrays_;
}

// repeated .boolarray boolarrays = 9;
inline int additionalparams::boolarrays_size() const {
  return boolarrays_.size();
}
inline void additionalparams::clear_boolarrays() {
  boolarrays_.Clear();
}
inline const ::boolarray& additionalparams::boolarrays(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.boolarrays)
  return boolarrays_.Get(index);
}
inline ::boolarray* additionalparams::mutable_boolarrays(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.boolarrays)
  return boolarrays_.Mutable(index);
}
inline ::boolarray* additionalparams::add_boolarrays() {
  // @@protoc_insertion_point(field_add:additionalparams.boolarrays)
  return boolarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::boolarray >&
additionalparams::boolarrays() const {
  // @@protoc_insertion_point(field_list:additionalparams.boolarrays)
  return boolarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::boolarray >*
additionalparams::mutable_boolarrays() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.boolarrays)
  return &boolarrays_;
}

// repeated .stringarray stringarrays = 10;
inline int additionalparams::stringarrays_size() const {
  return stringarrays_.size();
}
inline void additionalparams::clear_stringarrays() {
  stringarrays_.Clear();
}
inline const ::stringarray& additionalparams::stringarrays(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.stringarrays)
  return stringarrays_.Get(index);
}
inline ::stringarray* additionalparams::mutable_stringarrays(int index) {
  // @@protoc_insertion_point(field_mutable:additionalparams.stringarrays)
  return stringarrays_.Mutable(index);
}
inline ::stringarray* additionalparams::add_stringarrays() {
  // @@protoc_insertion_point(field_add:additionalparams.stringarrays)
  return stringarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stringarray >&
additionalparams::stringarrays() const {
  // @@protoc_insertion_point(field_list:additionalparams.stringarrays)
  return stringarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::stringarray >*
additionalparams::mutable_stringarrays() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.stringarrays)
  return &stringarrays_;
}

// repeated bool isarray = 11;
inline int additionalparams::isarray_size() const {
  return isarray_.size();
}
inline void additionalparams::clear_isarray() {
  isarray_.Clear();
}
inline bool additionalparams::isarray(int index) const {
  // @@protoc_insertion_point(field_get:additionalparams.isarray)
  return isarray_.Get(index);
}
inline void additionalparams::set_isarray(int index, bool value) {
  isarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:additionalparams.isarray)
}
inline void additionalparams::add_isarray(bool value) {
  isarray_.Add(value);
  // @@protoc_insertion_point(field_add:additionalparams.isarray)
}
inline const ::google::protobuf::RepeatedField< bool >&
additionalparams::isarray() const {
  // @@protoc_insertion_point(field_list:additionalparams.isarray)
  return isarray_;
}
inline ::google::protobuf::RepeatedField< bool >*
additionalparams::mutable_isarray() {
  // @@protoc_insertion_point(field_mutable_list:additionalparams.isarray)
  return &isarray_;
}

// -------------------------------------------------------------------

// rooflevelsmsg

// repeated double angle = 1;
inline int rooflevelsmsg::angle_size() const {
  return angle_.size();
}
inline void rooflevelsmsg::clear_angle() {
  angle_.Clear();
}
inline double rooflevelsmsg::angle(int index) const {
  // @@protoc_insertion_point(field_get:rooflevelsmsg.angle)
  return angle_.Get(index);
}
inline void rooflevelsmsg::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:rooflevelsmsg.angle)
}
inline void rooflevelsmsg::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:rooflevelsmsg.angle)
}
inline const ::google::protobuf::RepeatedField< double >&
rooflevelsmsg::angle() const {
  // @@protoc_insertion_point(field_list:rooflevelsmsg.angle)
  return angle_;
}
inline ::google::protobuf::RepeatedField< double >*
rooflevelsmsg::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:rooflevelsmsg.angle)
  return &angle_;
}

// repeated double height = 2;
inline int rooflevelsmsg::height_size() const {
  return height_.size();
}
inline void rooflevelsmsg::clear_height() {
  height_.Clear();
}
inline double rooflevelsmsg::height(int index) const {
  // @@protoc_insertion_point(field_get:rooflevelsmsg.height)
  return height_.Get(index);
}
inline void rooflevelsmsg::set_height(int index, double value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:rooflevelsmsg.height)
}
inline void rooflevelsmsg::add_height(double value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:rooflevelsmsg.height)
}
inline const ::google::protobuf::RepeatedField< double >&
rooflevelsmsg::height() const {
  // @@protoc_insertion_point(field_list:rooflevelsmsg.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< double >*
rooflevelsmsg::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:rooflevelsmsg.height)
  return &height_;
}

// -------------------------------------------------------------------

// transmatmessage

// required double p0 = 1;
inline bool transmatmessage::has_p0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void transmatmessage::set_has_p0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void transmatmessage::clear_has_p0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void transmatmessage::clear_p0() {
  p0_ = 0;
  clear_has_p0();
}
inline double transmatmessage::p0() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p0)
  return p0_;
}
inline void transmatmessage::set_p0(double value) {
  set_has_p0();
  p0_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p0)
}

// required double p1 = 2;
inline bool transmatmessage::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void transmatmessage::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void transmatmessage::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void transmatmessage::clear_p1() {
  p1_ = 0;
  clear_has_p1();
}
inline double transmatmessage::p1() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p1)
  return p1_;
}
inline void transmatmessage::set_p1(double value) {
  set_has_p1();
  p1_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p1)
}

// required double p2 = 3;
inline bool transmatmessage::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void transmatmessage::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void transmatmessage::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void transmatmessage::clear_p2() {
  p2_ = 0;
  clear_has_p2();
}
inline double transmatmessage::p2() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p2)
  return p2_;
}
inline void transmatmessage::set_p2(double value) {
  set_has_p2();
  p2_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p2)
}

// required double p3 = 4;
inline bool transmatmessage::has_p3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void transmatmessage::set_has_p3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void transmatmessage::clear_has_p3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void transmatmessage::clear_p3() {
  p3_ = 0;
  clear_has_p3();
}
inline double transmatmessage::p3() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p3)
  return p3_;
}
inline void transmatmessage::set_p3(double value) {
  set_has_p3();
  p3_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p3)
}

// required double p4 = 5;
inline bool transmatmessage::has_p4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void transmatmessage::set_has_p4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void transmatmessage::clear_has_p4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void transmatmessage::clear_p4() {
  p4_ = 0;
  clear_has_p4();
}
inline double transmatmessage::p4() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p4)
  return p4_;
}
inline void transmatmessage::set_p4(double value) {
  set_has_p4();
  p4_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p4)
}

// required double p5 = 6;
inline bool transmatmessage::has_p5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void transmatmessage::set_has_p5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void transmatmessage::clear_has_p5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void transmatmessage::clear_p5() {
  p5_ = 0;
  clear_has_p5();
}
inline double transmatmessage::p5() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p5)
  return p5_;
}
inline void transmatmessage::set_p5(double value) {
  set_has_p5();
  p5_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p5)
}

// required double p6 = 7;
inline bool transmatmessage::has_p6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void transmatmessage::set_has_p6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void transmatmessage::clear_has_p6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void transmatmessage::clear_p6() {
  p6_ = 0;
  clear_has_p6();
}
inline double transmatmessage::p6() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p6)
  return p6_;
}
inline void transmatmessage::set_p6(double value) {
  set_has_p6();
  p6_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p6)
}

// required double p7 = 8;
inline bool transmatmessage::has_p7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void transmatmessage::set_has_p7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void transmatmessage::clear_has_p7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void transmatmessage::clear_p7() {
  p7_ = 0;
  clear_has_p7();
}
inline double transmatmessage::p7() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p7)
  return p7_;
}
inline void transmatmessage::set_p7(double value) {
  set_has_p7();
  p7_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p7)
}

// required double p8 = 9;
inline bool transmatmessage::has_p8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void transmatmessage::set_has_p8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void transmatmessage::clear_has_p8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void transmatmessage::clear_p8() {
  p8_ = 0;
  clear_has_p8();
}
inline double transmatmessage::p8() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p8)
  return p8_;
}
inline void transmatmessage::set_p8(double value) {
  set_has_p8();
  p8_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p8)
}

// required double p9 = 10;
inline bool transmatmessage::has_p9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void transmatmessage::set_has_p9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void transmatmessage::clear_has_p9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void transmatmessage::clear_p9() {
  p9_ = 0;
  clear_has_p9();
}
inline double transmatmessage::p9() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p9)
  return p9_;
}
inline void transmatmessage::set_p9(double value) {
  set_has_p9();
  p9_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p9)
}

// required double p10 = 11;
inline bool transmatmessage::has_p10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void transmatmessage::set_has_p10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void transmatmessage::clear_has_p10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void transmatmessage::clear_p10() {
  p10_ = 0;
  clear_has_p10();
}
inline double transmatmessage::p10() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p10)
  return p10_;
}
inline void transmatmessage::set_p10(double value) {
  set_has_p10();
  p10_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p10)
}

// required double p11 = 12;
inline bool transmatmessage::has_p11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void transmatmessage::set_has_p11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void transmatmessage::clear_has_p11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void transmatmessage::clear_p11() {
  p11_ = 0;
  clear_has_p11();
}
inline double transmatmessage::p11() const {
  // @@protoc_insertion_point(field_get:transmatmessage.p11)
  return p11_;
}
inline void transmatmessage::set_p11(double value) {
  set_has_p11();
  p11_ = value;
  // @@protoc_insertion_point(field_set:transmatmessage.p11)
}

// -------------------------------------------------------------------

// wallmsg

// required int32 bottomindex = 1;
inline bool wallmsg::has_bottomindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wallmsg::set_has_bottomindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wallmsg::clear_has_bottomindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wallmsg::clear_bottomindex() {
  bottomindex_ = 0;
  clear_has_bottomindex();
}
inline ::google::protobuf::int32 wallmsg::bottomindex() const {
  // @@protoc_insertion_point(field_get:wallmsg.bottomindex)
  return bottomindex_;
}
inline void wallmsg::set_bottomindex(::google::protobuf::int32 value) {
  set_has_bottomindex();
  bottomindex_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.bottomindex)
}

// required double thickness = 2;
inline bool wallmsg::has_thickness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wallmsg::set_has_thickness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wallmsg::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wallmsg::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double wallmsg::thickness() const {
  // @@protoc_insertion_point(field_get:wallmsg.thickness)
  return thickness_;
}
inline void wallmsg::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.thickness)
}

// optional .polyarcsmessage arcs = 3;
inline bool wallmsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wallmsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wallmsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wallmsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& wallmsg::arcs() const {
  // @@protoc_insertion_point(field_get:wallmsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* wallmsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:wallmsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* wallmsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void wallmsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.arcs)
}

// required int32 upperindex = 4;
inline bool wallmsg::has_upperindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wallmsg::set_has_upperindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wallmsg::clear_has_upperindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wallmsg::clear_upperindex() {
  upperindex_ = 0;
  clear_has_upperindex();
}
inline ::google::protobuf::int32 wallmsg::upperindex() const {
  // @@protoc_insertion_point(field_get:wallmsg.upperindex)
  return upperindex_;
}
inline void wallmsg::set_upperindex(::google::protobuf::int32 value) {
  set_has_upperindex();
  upperindex_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.upperindex)
}

// required string material = 5;
inline bool wallmsg::has_material() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wallmsg::set_has_material() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wallmsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wallmsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& wallmsg::material() const {
  // @@protoc_insertion_point(field_get:wallmsg.material)
  return *material_;
}
inline void wallmsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.material)
}
inline void wallmsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.material)
}
inline void wallmsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.material)
}
inline ::std::string* wallmsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.material)
  return material_;
}
inline ::std::string* wallmsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.material)
}

// required string type = 6;
inline bool wallmsg::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wallmsg::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wallmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wallmsg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& wallmsg::type() const {
  // @@protoc_insertion_point(field_get:wallmsg.type)
  return *type_;
}
inline void wallmsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.type)
}
inline void wallmsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.type)
}
inline void wallmsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.type)
}
inline ::std::string* wallmsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.type)
  return type_;
}
inline ::std::string* wallmsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.type)
}

// required string referenceline = 7;
inline bool wallmsg::has_referenceline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wallmsg::set_has_referenceline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wallmsg::clear_has_referenceline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wallmsg::clear_referenceline() {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_->clear();
  }
  clear_has_referenceline();
}
inline const ::std::string& wallmsg::referenceline() const {
  // @@protoc_insertion_point(field_get:wallmsg.referenceline)
  return *referenceline_;
}
inline void wallmsg::set_referenceline(const ::std::string& value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.referenceline)
}
inline void wallmsg::set_referenceline(const char* value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.referenceline)
}
inline void wallmsg::set_referenceline(const char* value, size_t size) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.referenceline)
}
inline ::std::string* wallmsg::mutable_referenceline() {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.referenceline)
  return referenceline_;
}
inline ::std::string* wallmsg::release_referenceline() {
  clear_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = referenceline_;
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_referenceline(::std::string* referenceline) {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referenceline_;
  }
  if (referenceline) {
    set_has_referenceline();
    referenceline_ = referenceline;
  } else {
    clear_has_referenceline();
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.referenceline)
}

// required double alphaangle = 8;
inline bool wallmsg::has_alphaangle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wallmsg::set_has_alphaangle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wallmsg::clear_has_alphaangle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wallmsg::clear_alphaangle() {
  alphaangle_ = 0;
  clear_has_alphaangle();
}
inline double wallmsg::alphaangle() const {
  // @@protoc_insertion_point(field_get:wallmsg.alphaangle)
  return alphaangle_;
}
inline void wallmsg::set_alphaangle(double value) {
  set_has_alphaangle();
  alphaangle_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.alphaangle)
}

// required double betaangle = 9;
inline bool wallmsg::has_betaangle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wallmsg::set_has_betaangle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wallmsg::clear_has_betaangle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wallmsg::clear_betaangle() {
  betaangle_ = 0;
  clear_has_betaangle();
}
inline double wallmsg::betaangle() const {
  // @@protoc_insertion_point(field_get:wallmsg.betaangle)
  return betaangle_;
}
inline void wallmsg::set_betaangle(double value) {
  set_has_betaangle();
  betaangle_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.betaangle)
}

// required string typeprofile = 10;
inline bool wallmsg::has_typeprofile() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wallmsg::set_has_typeprofile() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wallmsg::clear_has_typeprofile() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wallmsg::clear_typeprofile() {
  if (typeprofile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typeprofile_->clear();
  }
  clear_has_typeprofile();
}
inline const ::std::string& wallmsg::typeprofile() const {
  // @@protoc_insertion_point(field_get:wallmsg.typeprofile)
  return *typeprofile_;
}
inline void wallmsg::set_typeprofile(const ::std::string& value) {
  set_has_typeprofile();
  if (typeprofile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typeprofile_ = new ::std::string;
  }
  typeprofile_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.typeprofile)
}
inline void wallmsg::set_typeprofile(const char* value) {
  set_has_typeprofile();
  if (typeprofile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typeprofile_ = new ::std::string;
  }
  typeprofile_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.typeprofile)
}
inline void wallmsg::set_typeprofile(const char* value, size_t size) {
  set_has_typeprofile();
  if (typeprofile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typeprofile_ = new ::std::string;
  }
  typeprofile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.typeprofile)
}
inline ::std::string* wallmsg::mutable_typeprofile() {
  set_has_typeprofile();
  if (typeprofile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typeprofile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.typeprofile)
  return typeprofile_;
}
inline ::std::string* wallmsg::release_typeprofile() {
  clear_has_typeprofile();
  if (typeprofile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typeprofile_;
    typeprofile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_typeprofile(::std::string* typeprofile) {
  if (typeprofile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typeprofile_;
  }
  if (typeprofile) {
    set_has_typeprofile();
    typeprofile_ = typeprofile;
  } else {
    clear_has_typeprofile();
    typeprofile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.typeprofile)
}

// optional .pointsmessage pts = 11;
inline bool wallmsg::has_pts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void wallmsg::set_has_pts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void wallmsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void wallmsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& wallmsg::pts() const {
  // @@protoc_insertion_point(field_get:wallmsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* wallmsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:wallmsg.pts)
  return pts_;
}
inline ::pointsmessage* wallmsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void wallmsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.pts)
}

// optional string profilename = 12;
inline bool wallmsg::has_profilename() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void wallmsg::set_has_profilename() {
  _has_bits_[0] |= 0x00000800u;
}
inline void wallmsg::clear_has_profilename() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void wallmsg::clear_profilename() {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_->clear();
  }
  clear_has_profilename();
}
inline const ::std::string& wallmsg::profilename() const {
  // @@protoc_insertion_point(field_get:wallmsg.profilename)
  return *profilename_;
}
inline void wallmsg::set_profilename(const ::std::string& value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.profilename)
}
inline void wallmsg::set_profilename(const char* value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.profilename)
}
inline void wallmsg::set_profilename(const char* value, size_t size) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.profilename)
}
inline ::std::string* wallmsg::mutable_profilename() {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.profilename)
  return profilename_;
}
inline ::std::string* wallmsg::release_profilename() {
  clear_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = profilename_;
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_profilename(::std::string* profilename) {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profilename_;
  }
  if (profilename) {
    set_has_profilename();
    profilename_ = profilename;
  } else {
    clear_has_profilename();
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.profilename)
}

// optional double height = 13;
inline bool wallmsg::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void wallmsg::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void wallmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void wallmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double wallmsg::height() const {
  // @@protoc_insertion_point(field_get:wallmsg.height)
  return height_;
}
inline void wallmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.height)
}

// optional bool flipped = 14;
inline bool wallmsg::has_flipped() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void wallmsg::set_has_flipped() {
  _has_bits_[0] |= 0x00002000u;
}
inline void wallmsg::clear_has_flipped() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void wallmsg::clear_flipped() {
  flipped_ = false;
  clear_has_flipped();
}
inline bool wallmsg::flipped() const {
  // @@protoc_insertion_point(field_get:wallmsg.flipped)
  return flipped_;
}
inline void wallmsg::set_flipped(bool value) {
  set_has_flipped();
  flipped_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.flipped)
}

// optional double bottomoffset = 15;
inline bool wallmsg::has_bottomoffset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void wallmsg::set_has_bottomoffset() {
  _has_bits_[0] |= 0x00004000u;
}
inline void wallmsg::clear_has_bottomoffset() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void wallmsg::clear_bottomoffset() {
  bottomoffset_ = 0;
  clear_has_bottomoffset();
}
inline double wallmsg::bottomoffset() const {
  // @@protoc_insertion_point(field_get:wallmsg.bottomoffset)
  return bottomoffset_;
}
inline void wallmsg::set_bottomoffset(double value) {
  set_has_bottomoffset();
  bottomoffset_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.bottomoffset)
}

// optional string layer = 16;
inline bool wallmsg::has_layer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void wallmsg::set_has_layer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void wallmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void wallmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& wallmsg::layer() const {
  // @@protoc_insertion_point(field_get:wallmsg.layer)
  return *layer_;
}
inline void wallmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.layer)
}
inline void wallmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.layer)
}
inline void wallmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.layer)
}
inline ::std::string* wallmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.layer)
  return layer_;
}
inline ::std::string* wallmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.layer)
}

// repeated .windowmessage windows = 17;
inline int wallmsg::windows_size() const {
  return windows_.size();
}
inline void wallmsg::clear_windows() {
  windows_.Clear();
}
inline const ::windowmessage& wallmsg::windows(int index) const {
  // @@protoc_insertion_point(field_get:wallmsg.windows)
  return windows_.Get(index);
}
inline ::windowmessage* wallmsg::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:wallmsg.windows)
  return windows_.Mutable(index);
}
inline ::windowmessage* wallmsg::add_windows() {
  // @@protoc_insertion_point(field_add:wallmsg.windows)
  return windows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::windowmessage >&
wallmsg::windows() const {
  // @@protoc_insertion_point(field_list:wallmsg.windows)
  return windows_;
}
inline ::google::protobuf::RepeatedPtrField< ::windowmessage >*
wallmsg::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:wallmsg.windows)
  return &windows_;
}

// repeated double windoworder = 18;
inline int wallmsg::windoworder_size() const {
  return windoworder_.size();
}
inline void wallmsg::clear_windoworder() {
  windoworder_.Clear();
}
inline double wallmsg::windoworder(int index) const {
  // @@protoc_insertion_point(field_get:wallmsg.windoworder)
  return windoworder_.Get(index);
}
inline void wallmsg::set_windoworder(int index, double value) {
  windoworder_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallmsg.windoworder)
}
inline void wallmsg::add_windoworder(double value) {
  windoworder_.Add(value);
  // @@protoc_insertion_point(field_add:wallmsg.windoworder)
}
inline const ::google::protobuf::RepeatedField< double >&
wallmsg::windoworder() const {
  // @@protoc_insertion_point(field_list:wallmsg.windoworder)
  return windoworder_;
}
inline ::google::protobuf::RepeatedField< double >*
wallmsg::mutable_windoworder() {
  // @@protoc_insertion_point(field_mutable_list:wallmsg.windoworder)
  return &windoworder_;
}

// required double refoffset = 19;
inline bool wallmsg::has_refoffset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void wallmsg::set_has_refoffset() {
  _has_bits_[0] |= 0x00040000u;
}
inline void wallmsg::clear_has_refoffset() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void wallmsg::clear_refoffset() {
  refoffset_ = 0;
  clear_has_refoffset();
}
inline double wallmsg::refoffset() const {
  // @@protoc_insertion_point(field_get:wallmsg.refoffset)
  return refoffset_;
}
inline void wallmsg::set_refoffset(double value) {
  set_has_refoffset();
  refoffset_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.refoffset)
}

// required string refmat = 20;
inline bool wallmsg::has_refmat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void wallmsg::set_has_refmat() {
  _has_bits_[0] |= 0x00080000u;
}
inline void wallmsg::clear_has_refmat() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void wallmsg::clear_refmat() {
  if (refmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refmat_->clear();
  }
  clear_has_refmat();
}
inline const ::std::string& wallmsg::refmat() const {
  // @@protoc_insertion_point(field_get:wallmsg.refmat)
  return *refmat_;
}
inline void wallmsg::set_refmat(const ::std::string& value) {
  set_has_refmat();
  if (refmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refmat_ = new ::std::string;
  }
  refmat_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.refmat)
}
inline void wallmsg::set_refmat(const char* value) {
  set_has_refmat();
  if (refmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refmat_ = new ::std::string;
  }
  refmat_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.refmat)
}
inline void wallmsg::set_refmat(const char* value, size_t size) {
  set_has_refmat();
  if (refmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refmat_ = new ::std::string;
  }
  refmat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.refmat)
}
inline ::std::string* wallmsg::mutable_refmat() {
  set_has_refmat();
  if (refmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refmat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.refmat)
  return refmat_;
}
inline ::std::string* wallmsg::release_refmat() {
  clear_has_refmat();
  if (refmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refmat_;
    refmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_refmat(::std::string* refmat) {
  if (refmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refmat_;
  }
  if (refmat) {
    set_has_refmat();
    refmat_ = refmat;
  } else {
    clear_has_refmat();
    refmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.refmat)
}

// required string oppmat = 21;
inline bool wallmsg::has_oppmat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void wallmsg::set_has_oppmat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void wallmsg::clear_has_oppmat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void wallmsg::clear_oppmat() {
  if (oppmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oppmat_->clear();
  }
  clear_has_oppmat();
}
inline const ::std::string& wallmsg::oppmat() const {
  // @@protoc_insertion_point(field_get:wallmsg.oppmat)
  return *oppmat_;
}
inline void wallmsg::set_oppmat(const ::std::string& value) {
  set_has_oppmat();
  if (oppmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oppmat_ = new ::std::string;
  }
  oppmat_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.oppmat)
}
inline void wallmsg::set_oppmat(const char* value) {
  set_has_oppmat();
  if (oppmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oppmat_ = new ::std::string;
  }
  oppmat_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.oppmat)
}
inline void wallmsg::set_oppmat(const char* value, size_t size) {
  set_has_oppmat();
  if (oppmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oppmat_ = new ::std::string;
  }
  oppmat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.oppmat)
}
inline ::std::string* wallmsg::mutable_oppmat() {
  set_has_oppmat();
  if (oppmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oppmat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.oppmat)
  return oppmat_;
}
inline ::std::string* wallmsg::release_oppmat() {
  clear_has_oppmat();
  if (oppmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oppmat_;
    oppmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_oppmat(::std::string* oppmat) {
  if (oppmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oppmat_;
  }
  if (oppmat) {
    set_has_oppmat();
    oppmat_ = oppmat;
  } else {
    clear_has_oppmat();
    oppmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.oppmat)
}

// required string sidmat = 22;
inline bool wallmsg::has_sidmat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void wallmsg::set_has_sidmat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void wallmsg::clear_has_sidmat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void wallmsg::clear_sidmat() {
  if (sidmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sidmat_->clear();
  }
  clear_has_sidmat();
}
inline const ::std::string& wallmsg::sidmat() const {
  // @@protoc_insertion_point(field_get:wallmsg.sidmat)
  return *sidmat_;
}
inline void wallmsg::set_sidmat(const ::std::string& value) {
  set_has_sidmat();
  if (sidmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sidmat_ = new ::std::string;
  }
  sidmat_->assign(value);
  // @@protoc_insertion_point(field_set:wallmsg.sidmat)
}
inline void wallmsg::set_sidmat(const char* value) {
  set_has_sidmat();
  if (sidmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sidmat_ = new ::std::string;
  }
  sidmat_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmsg.sidmat)
}
inline void wallmsg::set_sidmat(const char* value, size_t size) {
  set_has_sidmat();
  if (sidmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sidmat_ = new ::std::string;
  }
  sidmat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmsg.sidmat)
}
inline ::std::string* wallmsg::mutable_sidmat() {
  set_has_sidmat();
  if (sidmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sidmat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmsg.sidmat)
  return sidmat_;
}
inline ::std::string* wallmsg::release_sidmat() {
  clear_has_sidmat();
  if (sidmat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sidmat_;
    sidmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmsg::set_allocated_sidmat(::std::string* sidmat) {
  if (sidmat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sidmat_;
  }
  if (sidmat) {
    set_has_sidmat();
    sidmat_ = sidmat;
  } else {
    clear_has_sidmat();
    sidmat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmsg.sidmat)
}

// optional bool toplinked = 23;
inline bool wallmsg::has_toplinked() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void wallmsg::set_has_toplinked() {
  _has_bits_[0] |= 0x00400000u;
}
inline void wallmsg::clear_has_toplinked() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void wallmsg::clear_toplinked() {
  toplinked_ = false;
  clear_has_toplinked();
}
inline bool wallmsg::toplinked() const {
  // @@protoc_insertion_point(field_get:wallmsg.toplinked)
  return toplinked_;
}
inline void wallmsg::set_toplinked(bool value) {
  set_has_toplinked();
  toplinked_ = value;
  // @@protoc_insertion_point(field_set:wallmsg.toplinked)
}

// -------------------------------------------------------------------

// getwallmsg

// repeated .wallmsg walls = 1;
inline int getwallmsg::walls_size() const {
  return walls_.size();
}
inline void getwallmsg::clear_walls() {
  walls_.Clear();
}
inline const ::wallmsg& getwallmsg::walls(int index) const {
  // @@protoc_insertion_point(field_get:getwallmsg.walls)
  return walls_.Get(index);
}
inline ::wallmsg* getwallmsg::mutable_walls(int index) {
  // @@protoc_insertion_point(field_mutable:getwallmsg.walls)
  return walls_.Mutable(index);
}
inline ::wallmsg* getwallmsg::add_walls() {
  // @@protoc_insertion_point(field_add:getwallmsg.walls)
  return walls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wallmsg >&
getwallmsg::walls() const {
  // @@protoc_insertion_point(field_list:getwallmsg.walls)
  return walls_;
}
inline ::google::protobuf::RepeatedPtrField< ::wallmsg >*
getwallmsg::mutable_walls() {
  // @@protoc_insertion_point(field_mutable_list:getwallmsg.walls)
  return &walls_;
}

// repeated string guid = 2;
inline int getwallmsg::guid_size() const {
  return guid_.size();
}
inline void getwallmsg::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& getwallmsg::guid(int index) const {
  // @@protoc_insertion_point(field_get:getwallmsg.guid)
  return guid_.Get(index);
}
inline ::std::string* getwallmsg::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:getwallmsg.guid)
  return guid_.Mutable(index);
}
inline void getwallmsg::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:getwallmsg.guid)
  guid_.Mutable(index)->assign(value);
}
inline void getwallmsg::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:getwallmsg.guid)
}
inline void getwallmsg::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:getwallmsg.guid)
}
inline ::std::string* getwallmsg::add_guid() {
  return guid_.Add();
}
inline void getwallmsg::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:getwallmsg.guid)
}
inline void getwallmsg::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:getwallmsg.guid)
}
inline void getwallmsg::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:getwallmsg.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
getwallmsg::guid() const {
  // @@protoc_insertion_point(field_list:getwallmsg.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
getwallmsg::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:getwallmsg.guid)
  return &guid_;
}

// -------------------------------------------------------------------

// wallmessage

// required double p0x = 1;
inline bool wallmessage::has_p0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wallmessage::set_has_p0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wallmessage::clear_has_p0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wallmessage::clear_p0x() {
  p0x_ = 0;
  clear_has_p0x();
}
inline double wallmessage::p0x() const {
  // @@protoc_insertion_point(field_get:wallmessage.p0x)
  return p0x_;
}
inline void wallmessage::set_p0x(double value) {
  set_has_p0x();
  p0x_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.p0x)
}

// required double p0y = 2;
inline bool wallmessage::has_p0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wallmessage::set_has_p0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wallmessage::clear_has_p0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wallmessage::clear_p0y() {
  p0y_ = 0;
  clear_has_p0y();
}
inline double wallmessage::p0y() const {
  // @@protoc_insertion_point(field_get:wallmessage.p0y)
  return p0y_;
}
inline void wallmessage::set_p0y(double value) {
  set_has_p0y();
  p0y_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.p0y)
}

// required double p1x = 3;
inline bool wallmessage::has_p1x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wallmessage::set_has_p1x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wallmessage::clear_has_p1x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wallmessage::clear_p1x() {
  p1x_ = 0;
  clear_has_p1x();
}
inline double wallmessage::p1x() const {
  // @@protoc_insertion_point(field_get:wallmessage.p1x)
  return p1x_;
}
inline void wallmessage::set_p1x(double value) {
  set_has_p1x();
  p1x_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.p1x)
}

// required double p1y = 4;
inline bool wallmessage::has_p1y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wallmessage::set_has_p1y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wallmessage::clear_has_p1y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wallmessage::clear_p1y() {
  p1y_ = 0;
  clear_has_p1y();
}
inline double wallmessage::p1y() const {
  // @@protoc_insertion_point(field_get:wallmessage.p1y)
  return p1y_;
}
inline void wallmessage::set_p1y(double value) {
  set_has_p1y();
  p1y_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.p1y)
}

// required double height = 5;
inline bool wallmessage::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wallmessage::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wallmessage::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wallmessage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double wallmessage::height() const {
  // @@protoc_insertion_point(field_get:wallmessage.height)
  return height_;
}
inline void wallmessage::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.height)
}

// required double thickness = 6;
inline bool wallmessage::has_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wallmessage::set_has_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wallmessage::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wallmessage::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double wallmessage::thickness() const {
  // @@protoc_insertion_point(field_get:wallmessage.thickness)
  return thickness_;
}
inline void wallmessage::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.thickness)
}

// required double angle = 7;
inline bool wallmessage::has_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wallmessage::set_has_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wallmessage::clear_has_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wallmessage::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double wallmessage::angle() const {
  // @@protoc_insertion_point(field_get:wallmessage.angle)
  return angle_;
}
inline void wallmessage::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.angle)
}

// required double bottom = 8;
inline bool wallmessage::has_bottom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wallmessage::set_has_bottom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wallmessage::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wallmessage::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline double wallmessage::bottom() const {
  // @@protoc_insertion_point(field_get:wallmessage.bottom)
  return bottom_;
}
inline void wallmessage::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.bottom)
}

// required string material = 9;
inline bool wallmessage::has_material() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wallmessage::set_has_material() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wallmessage::clear_has_material() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wallmessage::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& wallmessage::material() const {
  // @@protoc_insertion_point(field_get:wallmessage.material)
  return *material_;
}
inline void wallmessage::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:wallmessage.material)
}
inline void wallmessage::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmessage.material)
}
inline void wallmessage::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmessage.material)
}
inline ::std::string* wallmessage::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmessage.material)
  return material_;
}
inline ::std::string* wallmessage::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmessage::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmessage.material)
}

// required string type = 10;
inline bool wallmessage::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wallmessage::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wallmessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wallmessage::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& wallmessage::type() const {
  // @@protoc_insertion_point(field_get:wallmessage.type)
  return *type_;
}
inline void wallmessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:wallmessage.type)
}
inline void wallmessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmessage.type)
}
inline void wallmessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmessage.type)
}
inline ::std::string* wallmessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmessage.type)
  return type_;
}
inline ::std::string* wallmessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmessage.type)
}

// required string referenceline = 11;
inline bool wallmessage::has_referenceline() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void wallmessage::set_has_referenceline() {
  _has_bits_[0] |= 0x00000400u;
}
inline void wallmessage::clear_has_referenceline() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void wallmessage::clear_referenceline() {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_->clear();
  }
  clear_has_referenceline();
}
inline const ::std::string& wallmessage::referenceline() const {
  // @@protoc_insertion_point(field_get:wallmessage.referenceline)
  return *referenceline_;
}
inline void wallmessage::set_referenceline(const ::std::string& value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set:wallmessage.referenceline)
}
inline void wallmessage::set_referenceline(const char* value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallmessage.referenceline)
}
inline void wallmessage::set_referenceline(const char* value, size_t size) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallmessage.referenceline)
}
inline ::std::string* wallmessage::mutable_referenceline() {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallmessage.referenceline)
  return referenceline_;
}
inline ::std::string* wallmessage::release_referenceline() {
  clear_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = referenceline_;
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallmessage::set_allocated_referenceline(::std::string* referenceline) {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referenceline_;
  }
  if (referenceline) {
    set_has_referenceline();
    referenceline_ = referenceline;
  } else {
    clear_has_referenceline();
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallmessage.referenceline)
}

// optional int32 bottomstory = 12;
inline bool wallmessage::has_bottomstory() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void wallmessage::set_has_bottomstory() {
  _has_bits_[0] |= 0x00000800u;
}
inline void wallmessage::clear_has_bottomstory() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void wallmessage::clear_bottomstory() {
  bottomstory_ = 0;
  clear_has_bottomstory();
}
inline ::google::protobuf::int32 wallmessage::bottomstory() const {
  // @@protoc_insertion_point(field_get:wallmessage.bottomstory)
  return bottomstory_;
}
inline void wallmessage::set_bottomstory(::google::protobuf::int32 value) {
  set_has_bottomstory();
  bottomstory_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.bottomstory)
}

// optional int32 topstory = 13;
inline bool wallmessage::has_topstory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void wallmessage::set_has_topstory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void wallmessage::clear_has_topstory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void wallmessage::clear_topstory() {
  topstory_ = 0;
  clear_has_topstory();
}
inline ::google::protobuf::int32 wallmessage::topstory() const {
  // @@protoc_insertion_point(field_get:wallmessage.topstory)
  return topstory_;
}
inline void wallmessage::set_topstory(::google::protobuf::int32 value) {
  set_has_topstory();
  topstory_ = value;
  // @@protoc_insertion_point(field_set:wallmessage.topstory)
}

// -------------------------------------------------------------------

// doormessage

// required string guid = 1;
inline bool doormessage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doormessage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doormessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doormessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& doormessage::guid() const {
  // @@protoc_insertion_point(field_get:doormessage.guid)
  return *guid_;
}
inline void doormessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:doormessage.guid)
}
inline void doormessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:doormessage.guid)
}
inline void doormessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doormessage.guid)
}
inline ::std::string* doormessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doormessage.guid)
  return guid_;
}
inline ::std::string* doormessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doormessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doormessage.guid)
}

// required double objloc = 2;
inline bool doormessage::has_objloc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doormessage::set_has_objloc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doormessage::clear_has_objloc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doormessage::clear_objloc() {
  objloc_ = 0;
  clear_has_objloc();
}
inline double doormessage::objloc() const {
  // @@protoc_insertion_point(field_get:doormessage.objloc)
  return objloc_;
}
inline void doormessage::set_objloc(double value) {
  set_has_objloc();
  objloc_ = value;
  // @@protoc_insertion_point(field_set:doormessage.objloc)
}

// required double zpos = 3;
inline bool doormessage::has_zpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void doormessage::set_has_zpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void doormessage::clear_has_zpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void doormessage::clear_zpos() {
  zpos_ = 0;
  clear_has_zpos();
}
inline double doormessage::zpos() const {
  // @@protoc_insertion_point(field_get:doormessage.zpos)
  return zpos_;
}
inline void doormessage::set_zpos(double value) {
  set_has_zpos();
  zpos_ = value;
  // @@protoc_insertion_point(field_set:doormessage.zpos)
}

// required double height = 4;
inline bool doormessage::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void doormessage::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void doormessage::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void doormessage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double doormessage::height() const {
  // @@protoc_insertion_point(field_get:doormessage.height)
  return height_;
}
inline void doormessage::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:doormessage.height)
}

// required double width = 5;
inline bool doormessage::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void doormessage::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void doormessage::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void doormessage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double doormessage::width() const {
  // @@protoc_insertion_point(field_get:doormessage.width)
  return width_;
}
inline void doormessage::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:doormessage.width)
}

// required bool hole = 6;
inline bool doormessage::has_hole() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void doormessage::set_has_hole() {
  _has_bits_[0] |= 0x00000020u;
}
inline void doormessage::clear_has_hole() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void doormessage::clear_hole() {
  hole_ = false;
  clear_has_hole();
}
inline bool doormessage::hole() const {
  // @@protoc_insertion_point(field_get:doormessage.hole)
  return hole_;
}
inline void doormessage::set_hole(bool value) {
  set_has_hole();
  hole_ = value;
  // @@protoc_insertion_point(field_set:doormessage.hole)
}

// required string name = 7;
inline bool doormessage::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void doormessage::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void doormessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void doormessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& doormessage::name() const {
  // @@protoc_insertion_point(field_get:doormessage.name)
  return *name_;
}
inline void doormessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:doormessage.name)
}
inline void doormessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:doormessage.name)
}
inline void doormessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doormessage.name)
}
inline ::std::string* doormessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doormessage.name)
  return name_;
}
inline ::std::string* doormessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doormessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doormessage.name)
}

// required bool flipx = 8;
inline bool doormessage::has_flipx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void doormessage::set_has_flipx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void doormessage::clear_has_flipx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void doormessage::clear_flipx() {
  flipx_ = false;
  clear_has_flipx();
}
inline bool doormessage::flipx() const {
  // @@protoc_insertion_point(field_get:doormessage.flipx)
  return flipx_;
}
inline void doormessage::set_flipx(bool value) {
  set_has_flipx();
  flipx_ = value;
  // @@protoc_insertion_point(field_set:doormessage.flipx)
}

// required bool flipy = 9;
inline bool doormessage::has_flipy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void doormessage::set_has_flipy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void doormessage::clear_has_flipy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void doormessage::clear_flipy() {
  flipy_ = false;
  clear_has_flipy();
}
inline bool doormessage::flipy() const {
  // @@protoc_insertion_point(field_get:doormessage.flipy)
  return flipy_;
}
inline void doormessage::set_flipy(bool value) {
  set_has_flipy();
  flipy_ = value;
  // @@protoc_insertion_point(field_set:doormessage.flipy)
}

// required .additionalparams params = 10;
inline bool doormessage::has_params() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void doormessage::set_has_params() {
  _has_bits_[0] |= 0x00000200u;
}
inline void doormessage::clear_has_params() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void doormessage::clear_params() {
  if (params_ != NULL) params_->::additionalparams::Clear();
  clear_has_params();
}
inline const ::additionalparams& doormessage::params() const {
  // @@protoc_insertion_point(field_get:doormessage.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::additionalparams* doormessage::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::additionalparams;
  // @@protoc_insertion_point(field_mutable:doormessage.params)
  return params_;
}
inline ::additionalparams* doormessage::release_params() {
  clear_has_params();
  ::additionalparams* temp = params_;
  params_ = NULL;
  return temp;
}
inline void doormessage::set_allocated_params(::additionalparams* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:doormessage.params)
}

// required double depthoffset = 11;
inline bool doormessage::has_depthoffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void doormessage::set_has_depthoffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void doormessage::clear_has_depthoffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void doormessage::clear_depthoffset() {
  depthoffset_ = 0;
  clear_has_depthoffset();
}
inline double doormessage::depthoffset() const {
  // @@protoc_insertion_point(field_get:doormessage.depthoffset)
  return depthoffset_;
}
inline void doormessage::set_depthoffset(double value) {
  set_has_depthoffset();
  depthoffset_ = value;
  // @@protoc_insertion_point(field_set:doormessage.depthoffset)
}

// optional string layer = 12;
inline bool doormessage::has_layer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void doormessage::set_has_layer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void doormessage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void doormessage::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& doormessage::layer() const {
  // @@protoc_insertion_point(field_get:doormessage.layer)
  return *layer_;
}
inline void doormessage::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:doormessage.layer)
}
inline void doormessage::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:doormessage.layer)
}
inline void doormessage::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doormessage.layer)
}
inline ::std::string* doormessage::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:doormessage.layer)
  return layer_;
}
inline ::std::string* doormessage::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void doormessage::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:doormessage.layer)
}

// -------------------------------------------------------------------

// windowmessage

// optional string guid = 1;
inline bool windowmessage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void windowmessage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void windowmessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void windowmessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& windowmessage::guid() const {
  // @@protoc_insertion_point(field_get:windowmessage.guid)
  return *guid_;
}
inline void windowmessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:windowmessage.guid)
}
inline void windowmessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:windowmessage.guid)
}
inline void windowmessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:windowmessage.guid)
}
inline ::std::string* windowmessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:windowmessage.guid)
  return guid_;
}
inline ::std::string* windowmessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void windowmessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:windowmessage.guid)
}

// required double objloc = 2;
inline bool windowmessage::has_objloc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void windowmessage::set_has_objloc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void windowmessage::clear_has_objloc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void windowmessage::clear_objloc() {
  objloc_ = 0;
  clear_has_objloc();
}
inline double windowmessage::objloc() const {
  // @@protoc_insertion_point(field_get:windowmessage.objloc)
  return objloc_;
}
inline void windowmessage::set_objloc(double value) {
  set_has_objloc();
  objloc_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.objloc)
}

// required double zpos = 3;
inline bool windowmessage::has_zpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void windowmessage::set_has_zpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void windowmessage::clear_has_zpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void windowmessage::clear_zpos() {
  zpos_ = 0;
  clear_has_zpos();
}
inline double windowmessage::zpos() const {
  // @@protoc_insertion_point(field_get:windowmessage.zpos)
  return zpos_;
}
inline void windowmessage::set_zpos(double value) {
  set_has_zpos();
  zpos_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.zpos)
}

// required string name = 4;
inline bool windowmessage::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void windowmessage::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void windowmessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void windowmessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& windowmessage::name() const {
  // @@protoc_insertion_point(field_get:windowmessage.name)
  return *name_;
}
inline void windowmessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:windowmessage.name)
}
inline void windowmessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:windowmessage.name)
}
inline void windowmessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:windowmessage.name)
}
inline ::std::string* windowmessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:windowmessage.name)
  return name_;
}
inline ::std::string* windowmessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void windowmessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:windowmessage.name)
}

// optional .additionalparams params = 5;
inline bool windowmessage::has_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void windowmessage::set_has_params() {
  _has_bits_[0] |= 0x00000010u;
}
inline void windowmessage::clear_has_params() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void windowmessage::clear_params() {
  if (params_ != NULL) params_->::additionalparams::Clear();
  clear_has_params();
}
inline const ::additionalparams& windowmessage::params() const {
  // @@protoc_insertion_point(field_get:windowmessage.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::additionalparams* windowmessage::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::additionalparams;
  // @@protoc_insertion_point(field_mutable:windowmessage.params)
  return params_;
}
inline ::additionalparams* windowmessage::release_params() {
  clear_has_params();
  ::additionalparams* temp = params_;
  params_ = NULL;
  return temp;
}
inline void windowmessage::set_allocated_params(::additionalparams* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:windowmessage.params)
}

// required double width = 6;
inline bool windowmessage::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void windowmessage::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void windowmessage::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void windowmessage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double windowmessage::width() const {
  // @@protoc_insertion_point(field_get:windowmessage.width)
  return width_;
}
inline void windowmessage::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.width)
}

// required double height = 7;
inline bool windowmessage::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void windowmessage::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void windowmessage::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void windowmessage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double windowmessage::height() const {
  // @@protoc_insertion_point(field_get:windowmessage.height)
  return height_;
}
inline void windowmessage::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.height)
}

// required double depthoffset = 8;
inline bool windowmessage::has_depthoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void windowmessage::set_has_depthoffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void windowmessage::clear_has_depthoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void windowmessage::clear_depthoffset() {
  depthoffset_ = 0;
  clear_has_depthoffset();
}
inline double windowmessage::depthoffset() const {
  // @@protoc_insertion_point(field_get:windowmessage.depthoffset)
  return depthoffset_;
}
inline void windowmessage::set_depthoffset(double value) {
  set_has_depthoffset();
  depthoffset_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.depthoffset)
}

// required bool flipx = 9;
inline bool windowmessage::has_flipx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void windowmessage::set_has_flipx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void windowmessage::clear_has_flipx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void windowmessage::clear_flipx() {
  flipx_ = false;
  clear_has_flipx();
}
inline bool windowmessage::flipx() const {
  // @@protoc_insertion_point(field_get:windowmessage.flipx)
  return flipx_;
}
inline void windowmessage::set_flipx(bool value) {
  set_has_flipx();
  flipx_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.flipx)
}

// required bool flipy = 10;
inline bool windowmessage::has_flipy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void windowmessage::set_has_flipy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void windowmessage::clear_has_flipy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void windowmessage::clear_flipy() {
  flipy_ = false;
  clear_has_flipy();
}
inline bool windowmessage::flipy() const {
  // @@protoc_insertion_point(field_get:windowmessage.flipy)
  return flipy_;
}
inline void windowmessage::set_flipy(bool value) {
  set_has_flipy();
  flipy_ = value;
  // @@protoc_insertion_point(field_set:windowmessage.flipy)
}

// optional string layer = 11;
inline bool windowmessage::has_layer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void windowmessage::set_has_layer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void windowmessage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void windowmessage::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& windowmessage::layer() const {
  // @@protoc_insertion_point(field_get:windowmessage.layer)
  return *layer_;
}
inline void windowmessage::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:windowmessage.layer)
}
inline void windowmessage::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:windowmessage.layer)
}
inline void windowmessage::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:windowmessage.layer)
}
inline ::std::string* windowmessage::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:windowmessage.layer)
  return layer_;
}
inline ::std::string* windowmessage::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void windowmessage::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:windowmessage.layer)
}

// -------------------------------------------------------------------

// circlemessage

// required double p0x = 1;
inline bool circlemessage::has_p0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void circlemessage::set_has_p0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void circlemessage::clear_has_p0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void circlemessage::clear_p0x() {
  p0x_ = 0;
  clear_has_p0x();
}
inline double circlemessage::p0x() const {
  // @@protoc_insertion_point(field_get:circlemessage.p0x)
  return p0x_;
}
inline void circlemessage::set_p0x(double value) {
  set_has_p0x();
  p0x_ = value;
  // @@protoc_insertion_point(field_set:circlemessage.p0x)
}

// required double p0y = 2;
inline bool circlemessage::has_p0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void circlemessage::set_has_p0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void circlemessage::clear_has_p0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void circlemessage::clear_p0y() {
  p0y_ = 0;
  clear_has_p0y();
}
inline double circlemessage::p0y() const {
  // @@protoc_insertion_point(field_get:circlemessage.p0y)
  return p0y_;
}
inline void circlemessage::set_p0y(double value) {
  set_has_p0y();
  p0y_ = value;
  // @@protoc_insertion_point(field_set:circlemessage.p0y)
}

// required double radius = 3;
inline bool circlemessage::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void circlemessage::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void circlemessage::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void circlemessage::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double circlemessage::radius() const {
  // @@protoc_insertion_point(field_get:circlemessage.radius)
  return radius_;
}
inline void circlemessage::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:circlemessage.radius)
}

// -------------------------------------------------------------------

// arcmessage

// required double p0x = 1;
inline bool arcmessage::has_p0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void arcmessage::set_has_p0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void arcmessage::clear_has_p0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void arcmessage::clear_p0x() {
  p0x_ = 0;
  clear_has_p0x();
}
inline double arcmessage::p0x() const {
  // @@protoc_insertion_point(field_get:arcmessage.p0x)
  return p0x_;
}
inline void arcmessage::set_p0x(double value) {
  set_has_p0x();
  p0x_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.p0x)
}

// required double p0y = 2;
inline bool arcmessage::has_p0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void arcmessage::set_has_p0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void arcmessage::clear_has_p0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void arcmessage::clear_p0y() {
  p0y_ = 0;
  clear_has_p0y();
}
inline double arcmessage::p0y() const {
  // @@protoc_insertion_point(field_get:arcmessage.p0y)
  return p0y_;
}
inline void arcmessage::set_p0y(double value) {
  set_has_p0y();
  p0y_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.p0y)
}

// required double radius = 3;
inline bool arcmessage::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void arcmessage::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void arcmessage::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void arcmessage::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double arcmessage::radius() const {
  // @@protoc_insertion_point(field_get:arcmessage.radius)
  return radius_;
}
inline void arcmessage::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.radius)
}

// required double angle = 4;
inline bool arcmessage::has_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void arcmessage::set_has_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void arcmessage::clear_has_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void arcmessage::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double arcmessage::angle() const {
  // @@protoc_insertion_point(field_get:arcmessage.angle)
  return angle_;
}
inline void arcmessage::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.angle)
}

// required double begang = 5;
inline bool arcmessage::has_begang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void arcmessage::set_has_begang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void arcmessage::clear_has_begang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void arcmessage::clear_begang() {
  begang_ = 0;
  clear_has_begang();
}
inline double arcmessage::begang() const {
  // @@protoc_insertion_point(field_get:arcmessage.begang)
  return begang_;
}
inline void arcmessage::set_begang(double value) {
  set_has_begang();
  begang_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.begang)
}

// required double endang = 6;
inline bool arcmessage::has_endang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void arcmessage::set_has_endang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void arcmessage::clear_has_endang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void arcmessage::clear_endang() {
  endang_ = 0;
  clear_has_endang();
}
inline double arcmessage::endang() const {
  // @@protoc_insertion_point(field_get:arcmessage.endang)
  return endang_;
}
inline void arcmessage::set_endang(double value) {
  set_has_endang();
  endang_ = value;
  // @@protoc_insertion_point(field_set:arcmessage.endang)
}

// -------------------------------------------------------------------

// spheremessage

// required double c0x = 1;
inline bool spheremessage::has_c0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void spheremessage::set_has_c0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void spheremessage::clear_has_c0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void spheremessage::clear_c0x() {
  c0x_ = 0;
  clear_has_c0x();
}
inline double spheremessage::c0x() const {
  // @@protoc_insertion_point(field_get:spheremessage.c0x)
  return c0x_;
}
inline void spheremessage::set_c0x(double value) {
  set_has_c0x();
  c0x_ = value;
  // @@protoc_insertion_point(field_set:spheremessage.c0x)
}

// required double c0y = 2;
inline bool spheremessage::has_c0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void spheremessage::set_has_c0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void spheremessage::clear_has_c0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void spheremessage::clear_c0y() {
  c0y_ = 0;
  clear_has_c0y();
}
inline double spheremessage::c0y() const {
  // @@protoc_insertion_point(field_get:spheremessage.c0y)
  return c0y_;
}
inline void spheremessage::set_c0y(double value) {
  set_has_c0y();
  c0y_ = value;
  // @@protoc_insertion_point(field_set:spheremessage.c0y)
}

// required double c0z = 3;
inline bool spheremessage::has_c0z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void spheremessage::set_has_c0z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void spheremessage::clear_has_c0z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void spheremessage::clear_c0z() {
  c0z_ = 0;
  clear_has_c0z();
}
inline double spheremessage::c0z() const {
  // @@protoc_insertion_point(field_get:spheremessage.c0z)
  return c0z_;
}
inline void spheremessage::set_c0z(double value) {
  set_has_c0z();
  c0z_ = value;
  // @@protoc_insertion_point(field_set:spheremessage.c0z)
}

// required double radius = 4;
inline bool spheremessage::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void spheremessage::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void spheremessage::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void spheremessage::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double spheremessage::radius() const {
  // @@protoc_insertion_point(field_get:spheremessage.radius)
  return radius_;
}
inline void spheremessage::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:spheremessage.radius)
}

// required int32 level = 5;
inline bool spheremessage::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void spheremessage::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void spheremessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void spheremessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 spheremessage::level() const {
  // @@protoc_insertion_point(field_get:spheremessage.level)
  return level_;
}
inline void spheremessage::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:spheremessage.level)
}

// -------------------------------------------------------------------

// cylindermsg

// required double p0x = 1;
inline bool cylindermsg::has_p0x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cylindermsg::set_has_p0x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cylindermsg::clear_has_p0x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cylindermsg::clear_p0x() {
  p0x_ = 0;
  clear_has_p0x();
}
inline double cylindermsg::p0x() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p0x)
  return p0x_;
}
inline void cylindermsg::set_p0x(double value) {
  set_has_p0x();
  p0x_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p0x)
}

// required double p0y = 2;
inline bool cylindermsg::has_p0y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cylindermsg::set_has_p0y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cylindermsg::clear_has_p0y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cylindermsg::clear_p0y() {
  p0y_ = 0;
  clear_has_p0y();
}
inline double cylindermsg::p0y() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p0y)
  return p0y_;
}
inline void cylindermsg::set_p0y(double value) {
  set_has_p0y();
  p0y_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p0y)
}

// required double p0z = 3;
inline bool cylindermsg::has_p0z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cylindermsg::set_has_p0z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cylindermsg::clear_has_p0z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cylindermsg::clear_p0z() {
  p0z_ = 0;
  clear_has_p0z();
}
inline double cylindermsg::p0z() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p0z)
  return p0z_;
}
inline void cylindermsg::set_p0z(double value) {
  set_has_p0z();
  p0z_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p0z)
}

// required double p1x = 4;
inline bool cylindermsg::has_p1x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cylindermsg::set_has_p1x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cylindermsg::clear_has_p1x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cylindermsg::clear_p1x() {
  p1x_ = 0;
  clear_has_p1x();
}
inline double cylindermsg::p1x() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p1x)
  return p1x_;
}
inline void cylindermsg::set_p1x(double value) {
  set_has_p1x();
  p1x_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p1x)
}

// required double p1y = 5;
inline bool cylindermsg::has_p1y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cylindermsg::set_has_p1y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cylindermsg::clear_has_p1y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cylindermsg::clear_p1y() {
  p1y_ = 0;
  clear_has_p1y();
}
inline double cylindermsg::p1y() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p1y)
  return p1y_;
}
inline void cylindermsg::set_p1y(double value) {
  set_has_p1y();
  p1y_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p1y)
}

// required double p1z = 6;
inline bool cylindermsg::has_p1z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cylindermsg::set_has_p1z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cylindermsg::clear_has_p1z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cylindermsg::clear_p1z() {
  p1z_ = 0;
  clear_has_p1z();
}
inline double cylindermsg::p1z() const {
  // @@protoc_insertion_point(field_get:cylindermsg.p1z)
  return p1z_;
}
inline void cylindermsg::set_p1z(double value) {
  set_has_p1z();
  p1z_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.p1z)
}

// required double radius = 7;
inline bool cylindermsg::has_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cylindermsg::set_has_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cylindermsg::clear_has_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cylindermsg::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double cylindermsg::radius() const {
  // @@protoc_insertion_point(field_get:cylindermsg.radius)
  return radius_;
}
inline void cylindermsg::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.radius)
}

// required int32 level = 8;
inline bool cylindermsg::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cylindermsg::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cylindermsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cylindermsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 cylindermsg::level() const {
  // @@protoc_insertion_point(field_get:cylindermsg.level)
  return level_;
}
inline void cylindermsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:cylindermsg.level)
}

// -------------------------------------------------------------------

// shellcomplexmessage

// required int32 numpoints = 1;
inline bool shellcomplexmessage::has_numpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shellcomplexmessage::set_has_numpoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shellcomplexmessage::clear_has_numpoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shellcomplexmessage::clear_numpoints() {
  numpoints_ = 0;
  clear_has_numpoints();
}
inline ::google::protobuf::int32 shellcomplexmessage::numpoints() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.numpoints)
  return numpoints_;
}
inline void shellcomplexmessage::set_numpoints(::google::protobuf::int32 value) {
  set_has_numpoints();
  numpoints_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.numpoints)
}

// required int32 numarcs = 2;
inline bool shellcomplexmessage::has_numarcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shellcomplexmessage::set_has_numarcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shellcomplexmessage::clear_has_numarcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shellcomplexmessage::clear_numarcs() {
  numarcs_ = 0;
  clear_has_numarcs();
}
inline ::google::protobuf::int32 shellcomplexmessage::numarcs() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.numarcs)
  return numarcs_;
}
inline void shellcomplexmessage::set_numarcs(::google::protobuf::int32 value) {
  set_has_numarcs();
  numarcs_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.numarcs)
}

// required int32 numholes = 3;
inline bool shellcomplexmessage::has_numholes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shellcomplexmessage::set_has_numholes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shellcomplexmessage::clear_has_numholes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shellcomplexmessage::clear_numholes() {
  numholes_ = 0;
  clear_has_numholes();
}
inline ::google::protobuf::int32 shellcomplexmessage::numholes() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.numholes)
  return numholes_;
}
inline void shellcomplexmessage::set_numholes(::google::protobuf::int32 value) {
  set_has_numholes();
  numholes_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.numholes)
}

// required int32 numhpoints = 4;
inline bool shellcomplexmessage::has_numhpoints() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shellcomplexmessage::set_has_numhpoints() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shellcomplexmessage::clear_has_numhpoints() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shellcomplexmessage::clear_numhpoints() {
  numhpoints_ = 0;
  clear_has_numhpoints();
}
inline ::google::protobuf::int32 shellcomplexmessage::numhpoints() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.numhpoints)
  return numhpoints_;
}
inline void shellcomplexmessage::set_numhpoints(::google::protobuf::int32 value) {
  set_has_numhpoints();
  numhpoints_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.numhpoints)
}

// required int32 numharcs = 5;
inline bool shellcomplexmessage::has_numharcs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shellcomplexmessage::set_has_numharcs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shellcomplexmessage::clear_has_numharcs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shellcomplexmessage::clear_numharcs() {
  numharcs_ = 0;
  clear_has_numharcs();
}
inline ::google::protobuf::int32 shellcomplexmessage::numharcs() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.numharcs)
  return numharcs_;
}
inline void shellcomplexmessage::set_numharcs(::google::protobuf::int32 value) {
  set_has_numharcs();
  numharcs_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.numharcs)
}

// required double holeheight = 6;
inline bool shellcomplexmessage::has_holeheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void shellcomplexmessage::set_has_holeheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void shellcomplexmessage::clear_has_holeheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void shellcomplexmessage::clear_holeheight() {
  holeheight_ = 0;
  clear_has_holeheight();
}
inline double shellcomplexmessage::holeheight() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.holeheight)
  return holeheight_;
}
inline void shellcomplexmessage::set_holeheight(double value) {
  set_has_holeheight();
  holeheight_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.holeheight)
}

// required double reflectx = 7;
inline bool shellcomplexmessage::has_reflectx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void shellcomplexmessage::set_has_reflectx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void shellcomplexmessage::clear_has_reflectx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void shellcomplexmessage::clear_reflectx() {
  reflectx_ = 0;
  clear_has_reflectx();
}
inline double shellcomplexmessage::reflectx() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.reflectx)
  return reflectx_;
}
inline void shellcomplexmessage::set_reflectx(double value) {
  set_has_reflectx();
  reflectx_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.reflectx)
}

// required double reflecty = 8;
inline bool shellcomplexmessage::has_reflecty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void shellcomplexmessage::set_has_reflecty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void shellcomplexmessage::clear_has_reflecty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void shellcomplexmessage::clear_reflecty() {
  reflecty_ = 0;
  clear_has_reflecty();
}
inline double shellcomplexmessage::reflecty() const {
  // @@protoc_insertion_point(field_get:shellcomplexmessage.reflecty)
  return reflecty_;
}
inline void shellcomplexmessage::set_reflecty(double value) {
  set_has_reflecty();
  reflecty_ = value;
  // @@protoc_insertion_point(field_set:shellcomplexmessage.reflecty)
}

// -------------------------------------------------------------------

// shellsimplemessage

// required int32 numpoints = 1;
inline bool shellsimplemessage::has_numpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shellsimplemessage::set_has_numpoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shellsimplemessage::clear_has_numpoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shellsimplemessage::clear_numpoints() {
  numpoints_ = 0;
  clear_has_numpoints();
}
inline ::google::protobuf::int32 shellsimplemessage::numpoints() const {
  // @@protoc_insertion_point(field_get:shellsimplemessage.numpoints)
  return numpoints_;
}
inline void shellsimplemessage::set_numpoints(::google::protobuf::int32 value) {
  set_has_numpoints();
  numpoints_ = value;
  // @@protoc_insertion_point(field_set:shellsimplemessage.numpoints)
}

// -------------------------------------------------------------------

// shellmessage

// required int32 numpoints = 1;
inline bool shellmessage::has_numpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shellmessage::set_has_numpoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shellmessage::clear_has_numpoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shellmessage::clear_numpoints() {
  numpoints_ = 0;
  clear_has_numpoints();
}
inline ::google::protobuf::int32 shellmessage::numpoints() const {
  // @@protoc_insertion_point(field_get:shellmessage.numpoints)
  return numpoints_;
}
inline void shellmessage::set_numpoints(::google::protobuf::int32 value) {
  set_has_numpoints();
  numpoints_ = value;
  // @@protoc_insertion_point(field_set:shellmessage.numpoints)
}

// required int32 numarcs = 2;
inline bool shellmessage::has_numarcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shellmessage::set_has_numarcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shellmessage::clear_has_numarcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shellmessage::clear_numarcs() {
  numarcs_ = 0;
  clear_has_numarcs();
}
inline ::google::protobuf::int32 shellmessage::numarcs() const {
  // @@protoc_insertion_point(field_get:shellmessage.numarcs)
  return numarcs_;
}
inline void shellmessage::set_numarcs(::google::protobuf::int32 value) {
  set_has_numarcs();
  numarcs_ = value;
  // @@protoc_insertion_point(field_set:shellmessage.numarcs)
}

// -------------------------------------------------------------------

// pointsmessage

// repeated double px = 1;
inline int pointsmessage::px_size() const {
  return px_.size();
}
inline void pointsmessage::clear_px() {
  px_.Clear();
}
inline double pointsmessage::px(int index) const {
  // @@protoc_insertion_point(field_get:pointsmessage.px)
  return px_.Get(index);
}
inline void pointsmessage::set_px(int index, double value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:pointsmessage.px)
}
inline void pointsmessage::add_px(double value) {
  px_.Add(value);
  // @@protoc_insertion_point(field_add:pointsmessage.px)
}
inline const ::google::protobuf::RepeatedField< double >&
pointsmessage::px() const {
  // @@protoc_insertion_point(field_list:pointsmessage.px)
  return px_;
}
inline ::google::protobuf::RepeatedField< double >*
pointsmessage::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:pointsmessage.px)
  return &px_;
}

// repeated double py = 2;
inline int pointsmessage::py_size() const {
  return py_.size();
}
inline void pointsmessage::clear_py() {
  py_.Clear();
}
inline double pointsmessage::py(int index) const {
  // @@protoc_insertion_point(field_get:pointsmessage.py)
  return py_.Get(index);
}
inline void pointsmessage::set_py(int index, double value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:pointsmessage.py)
}
inline void pointsmessage::add_py(double value) {
  py_.Add(value);
  // @@protoc_insertion_point(field_add:pointsmessage.py)
}
inline const ::google::protobuf::RepeatedField< double >&
pointsmessage::py() const {
  // @@protoc_insertion_point(field_list:pointsmessage.py)
  return py_;
}
inline ::google::protobuf::RepeatedField< double >*
pointsmessage::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:pointsmessage.py)
  return &py_;
}

// repeated double pz = 3;
inline int pointsmessage::pz_size() const {
  return pz_.size();
}
inline void pointsmessage::clear_pz() {
  pz_.Clear();
}
inline double pointsmessage::pz(int index) const {
  // @@protoc_insertion_point(field_get:pointsmessage.pz)
  return pz_.Get(index);
}
inline void pointsmessage::set_pz(int index, double value) {
  pz_.Set(index, value);
  // @@protoc_insertion_point(field_set:pointsmessage.pz)
}
inline void pointsmessage::add_pz(double value) {
  pz_.Add(value);
  // @@protoc_insertion_point(field_add:pointsmessage.pz)
}
inline const ::google::protobuf::RepeatedField< double >&
pointsmessage::pz() const {
  // @@protoc_insertion_point(field_list:pointsmessage.pz)
  return pz_;
}
inline ::google::protobuf::RepeatedField< double >*
pointsmessage::mutable_pz() {
  // @@protoc_insertion_point(field_mutable_list:pointsmessage.pz)
  return &pz_;
}

// -------------------------------------------------------------------

// polyarcsmessage

// repeated int32 begindex = 1;
inline int polyarcsmessage::begindex_size() const {
  return begindex_.size();
}
inline void polyarcsmessage::clear_begindex() {
  begindex_.Clear();
}
inline ::google::protobuf::int32 polyarcsmessage::begindex(int index) const {
  // @@protoc_insertion_point(field_get:polyarcsmessage.begindex)
  return begindex_.Get(index);
}
inline void polyarcsmessage::set_begindex(int index, ::google::protobuf::int32 value) {
  begindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:polyarcsmessage.begindex)
}
inline void polyarcsmessage::add_begindex(::google::protobuf::int32 value) {
  begindex_.Add(value);
  // @@protoc_insertion_point(field_add:polyarcsmessage.begindex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
polyarcsmessage::begindex() const {
  // @@protoc_insertion_point(field_list:polyarcsmessage.begindex)
  return begindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
polyarcsmessage::mutable_begindex() {
  // @@protoc_insertion_point(field_mutable_list:polyarcsmessage.begindex)
  return &begindex_;
}

// repeated int32 endindex = 2;
inline int polyarcsmessage::endindex_size() const {
  return endindex_.size();
}
inline void polyarcsmessage::clear_endindex() {
  endindex_.Clear();
}
inline ::google::protobuf::int32 polyarcsmessage::endindex(int index) const {
  // @@protoc_insertion_point(field_get:polyarcsmessage.endindex)
  return endindex_.Get(index);
}
inline void polyarcsmessage::set_endindex(int index, ::google::protobuf::int32 value) {
  endindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:polyarcsmessage.endindex)
}
inline void polyarcsmessage::add_endindex(::google::protobuf::int32 value) {
  endindex_.Add(value);
  // @@protoc_insertion_point(field_add:polyarcsmessage.endindex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
polyarcsmessage::endindex() const {
  // @@protoc_insertion_point(field_list:polyarcsmessage.endindex)
  return endindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
polyarcsmessage::mutable_endindex() {
  // @@protoc_insertion_point(field_mutable_list:polyarcsmessage.endindex)
  return &endindex_;
}

// repeated double arcangle = 3;
inline int polyarcsmessage::arcangle_size() const {
  return arcangle_.size();
}
inline void polyarcsmessage::clear_arcangle() {
  arcangle_.Clear();
}
inline double polyarcsmessage::arcangle(int index) const {
  // @@protoc_insertion_point(field_get:polyarcsmessage.arcangle)
  return arcangle_.Get(index);
}
inline void polyarcsmessage::set_arcangle(int index, double value) {
  arcangle_.Set(index, value);
  // @@protoc_insertion_point(field_set:polyarcsmessage.arcangle)
}
inline void polyarcsmessage::add_arcangle(double value) {
  arcangle_.Add(value);
  // @@protoc_insertion_point(field_add:polyarcsmessage.arcangle)
}
inline const ::google::protobuf::RepeatedField< double >&
polyarcsmessage::arcangle() const {
  // @@protoc_insertion_point(field_list:polyarcsmessage.arcangle)
  return arcangle_;
}
inline ::google::protobuf::RepeatedField< double >*
polyarcsmessage::mutable_arcangle() {
  // @@protoc_insertion_point(field_mutable_list:polyarcsmessage.arcangle)
  return &arcangle_;
}

// -------------------------------------------------------------------

// rotshellmessage

// required string axis = 1;
inline bool rotshellmessage::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rotshellmessage::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rotshellmessage::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rotshellmessage::clear_axis() {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_->clear();
  }
  clear_has_axis();
}
inline const ::std::string& rotshellmessage::axis() const {
  // @@protoc_insertion_point(field_get:rotshellmessage.axis)
  return *axis_;
}
inline void rotshellmessage::set_axis(const ::std::string& value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set:rotshellmessage.axis)
}
inline void rotshellmessage::set_axis(const char* value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set_char:rotshellmessage.axis)
}
inline void rotshellmessage::set_axis(const char* value, size_t size) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rotshellmessage.axis)
}
inline ::std::string* rotshellmessage::mutable_axis() {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rotshellmessage.axis)
  return axis_;
}
inline ::std::string* rotshellmessage::release_axis() {
  clear_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = axis_;
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rotshellmessage::set_allocated_axis(::std::string* axis) {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete axis_;
  }
  if (axis) {
    set_has_axis();
    axis_ = axis;
  } else {
    clear_has_axis();
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rotshellmessage.axis)
}

// required double angle = 2;
inline bool rotshellmessage::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rotshellmessage::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rotshellmessage::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rotshellmessage::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double rotshellmessage::angle() const {
  // @@protoc_insertion_point(field_get:rotshellmessage.angle)
  return angle_;
}
inline void rotshellmessage::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:rotshellmessage.angle)
}

// required string guid = 3;
inline bool rotshellmessage::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rotshellmessage::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rotshellmessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rotshellmessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& rotshellmessage::guid() const {
  // @@protoc_insertion_point(field_get:rotshellmessage.guid)
  return *guid_;
}
inline void rotshellmessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:rotshellmessage.guid)
}
inline void rotshellmessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:rotshellmessage.guid)
}
inline void rotshellmessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rotshellmessage.guid)
}
inline ::std::string* rotshellmessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rotshellmessage.guid)
  return guid_;
}
inline ::std::string* rotshellmessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rotshellmessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rotshellmessage.guid)
}

// -------------------------------------------------------------------

// tshellmessage

// required double tx = 1;
inline bool tshellmessage::has_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tshellmessage::set_has_tx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tshellmessage::clear_has_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tshellmessage::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline double tshellmessage::tx() const {
  // @@protoc_insertion_point(field_get:tshellmessage.tx)
  return tx_;
}
inline void tshellmessage::set_tx(double value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:tshellmessage.tx)
}

// required double ty = 2;
inline bool tshellmessage::has_ty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tshellmessage::set_has_ty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tshellmessage::clear_has_ty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tshellmessage::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline double tshellmessage::ty() const {
  // @@protoc_insertion_point(field_get:tshellmessage.ty)
  return ty_;
}
inline void tshellmessage::set_ty(double value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:tshellmessage.ty)
}

// required double tz = 3;
inline bool tshellmessage::has_tz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tshellmessage::set_has_tz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tshellmessage::clear_has_tz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tshellmessage::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline double tshellmessage::tz() const {
  // @@protoc_insertion_point(field_get:tshellmessage.tz)
  return tz_;
}
inline void tshellmessage::set_tz(double value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:tshellmessage.tz)
}

// required string guid = 4;
inline bool tshellmessage::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tshellmessage::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tshellmessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tshellmessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& tshellmessage::guid() const {
  // @@protoc_insertion_point(field_get:tshellmessage.guid)
  return *guid_;
}
inline void tshellmessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:tshellmessage.guid)
}
inline void tshellmessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:tshellmessage.guid)
}
inline void tshellmessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tshellmessage.guid)
}
inline ::std::string* tshellmessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tshellmessage.guid)
  return guid_;
}
inline ::std::string* tshellmessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tshellmessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tshellmessage.guid)
}

// -------------------------------------------------------------------

// oldholemessage

// required double height = 1;
inline bool oldholemessage::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void oldholemessage::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void oldholemessage::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void oldholemessage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double oldholemessage::height() const {
  // @@protoc_insertion_point(field_get:oldholemessage.height)
  return height_;
}
inline void oldholemessage::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:oldholemessage.height)
}

// required string guid = 2;
inline bool oldholemessage::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void oldholemessage::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void oldholemessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void oldholemessage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& oldholemessage::guid() const {
  // @@protoc_insertion_point(field_get:oldholemessage.guid)
  return *guid_;
}
inline void oldholemessage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:oldholemessage.guid)
}
inline void oldholemessage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:oldholemessage.guid)
}
inline void oldholemessage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oldholemessage.guid)
}
inline ::std::string* oldholemessage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:oldholemessage.guid)
  return guid_;
}
inline ::std::string* oldholemessage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void oldholemessage::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:oldholemessage.guid)
}

// -------------------------------------------------------------------

// curtainwallmsg

// required .pointsmessage pts = 1;
inline bool curtainwallmsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void curtainwallmsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void curtainwallmsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void curtainwallmsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& curtainwallmsg::pts() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* curtainwallmsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.pts)
  return pts_;
}
inline ::pointsmessage* curtainwallmsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void curtainwallmsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.pts)
}

// required .polyarcsmessage arcs = 2;
inline bool curtainwallmsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void curtainwallmsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void curtainwallmsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void curtainwallmsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& curtainwallmsg::arcs() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* curtainwallmsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* curtainwallmsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void curtainwallmsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.arcs)
}

// required int32 bottomindex = 3;
inline bool curtainwallmsg::has_bottomindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void curtainwallmsg::set_has_bottomindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void curtainwallmsg::clear_has_bottomindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void curtainwallmsg::clear_bottomindex() {
  bottomindex_ = 0;
  clear_has_bottomindex();
}
inline ::google::protobuf::int32 curtainwallmsg::bottomindex() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.bottomindex)
  return bottomindex_;
}
inline void curtainwallmsg::set_bottomindex(::google::protobuf::int32 value) {
  set_has_bottomindex();
  bottomindex_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.bottomindex)
}

// required int32 upperindex = 4;
inline bool curtainwallmsg::has_upperindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void curtainwallmsg::set_has_upperindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void curtainwallmsg::clear_has_upperindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void curtainwallmsg::clear_upperindex() {
  upperindex_ = 0;
  clear_has_upperindex();
}
inline ::google::protobuf::int32 curtainwallmsg::upperindex() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.upperindex)
  return upperindex_;
}
inline void curtainwallmsg::set_upperindex(::google::protobuf::int32 value) {
  set_has_upperindex();
  upperindex_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.upperindex)
}

// repeated double primaries = 5;
inline int curtainwallmsg::primaries_size() const {
  return primaries_.size();
}
inline void curtainwallmsg::clear_primaries() {
  primaries_.Clear();
}
inline double curtainwallmsg::primaries(int index) const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.primaries)
  return primaries_.Get(index);
}
inline void curtainwallmsg::set_primaries(int index, double value) {
  primaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.primaries)
}
inline void curtainwallmsg::add_primaries(double value) {
  primaries_.Add(value);
  // @@protoc_insertion_point(field_add:curtainwallmsg.primaries)
}
inline const ::google::protobuf::RepeatedField< double >&
curtainwallmsg::primaries() const {
  // @@protoc_insertion_point(field_list:curtainwallmsg.primaries)
  return primaries_;
}
inline ::google::protobuf::RepeatedField< double >*
curtainwallmsg::mutable_primaries() {
  // @@protoc_insertion_point(field_mutable_list:curtainwallmsg.primaries)
  return &primaries_;
}

// repeated double secondaries = 6;
inline int curtainwallmsg::secondaries_size() const {
  return secondaries_.size();
}
inline void curtainwallmsg::clear_secondaries() {
  secondaries_.Clear();
}
inline double curtainwallmsg::secondaries(int index) const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.secondaries)
  return secondaries_.Get(index);
}
inline void curtainwallmsg::set_secondaries(int index, double value) {
  secondaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.secondaries)
}
inline void curtainwallmsg::add_secondaries(double value) {
  secondaries_.Add(value);
  // @@protoc_insertion_point(field_add:curtainwallmsg.secondaries)
}
inline const ::google::protobuf::RepeatedField< double >&
curtainwallmsg::secondaries() const {
  // @@protoc_insertion_point(field_list:curtainwallmsg.secondaries)
  return secondaries_;
}
inline ::google::protobuf::RepeatedField< double >*
curtainwallmsg::mutable_secondaries() {
  // @@protoc_insertion_point(field_mutable_list:curtainwallmsg.secondaries)
  return &secondaries_;
}

// repeated bool mainpanels = 7;
inline int curtainwallmsg::mainpanels_size() const {
  return mainpanels_.size();
}
inline void curtainwallmsg::clear_mainpanels() {
  mainpanels_.Clear();
}
inline bool curtainwallmsg::mainpanels(int index) const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.mainpanels)
  return mainpanels_.Get(index);
}
inline void curtainwallmsg::set_mainpanels(int index, bool value) {
  mainpanels_.Set(index, value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.mainpanels)
}
inline void curtainwallmsg::add_mainpanels(bool value) {
  mainpanels_.Add(value);
  // @@protoc_insertion_point(field_add:curtainwallmsg.mainpanels)
}
inline const ::google::protobuf::RepeatedField< bool >&
curtainwallmsg::mainpanels() const {
  // @@protoc_insertion_point(field_list:curtainwallmsg.mainpanels)
  return mainpanels_;
}
inline ::google::protobuf::RepeatedField< bool >*
curtainwallmsg::mutable_mainpanels() {
  // @@protoc_insertion_point(field_mutable_list:curtainwallmsg.mainpanels)
  return &mainpanels_;
}

// required string panelmaterial = 8;
inline bool curtainwallmsg::has_panelmaterial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void curtainwallmsg::set_has_panelmaterial() {
  _has_bits_[0] |= 0x00000080u;
}
inline void curtainwallmsg::clear_has_panelmaterial() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void curtainwallmsg::clear_panelmaterial() {
  if (panelmaterial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    panelmaterial_->clear();
  }
  clear_has_panelmaterial();
}
inline const ::std::string& curtainwallmsg::panelmaterial() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.panelmaterial)
  return *panelmaterial_;
}
inline void curtainwallmsg::set_panelmaterial(const ::std::string& value) {
  set_has_panelmaterial();
  if (panelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    panelmaterial_ = new ::std::string;
  }
  panelmaterial_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.panelmaterial)
}
inline void curtainwallmsg::set_panelmaterial(const char* value) {
  set_has_panelmaterial();
  if (panelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    panelmaterial_ = new ::std::string;
  }
  panelmaterial_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.panelmaterial)
}
inline void curtainwallmsg::set_panelmaterial(const char* value, size_t size) {
  set_has_panelmaterial();
  if (panelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    panelmaterial_ = new ::std::string;
  }
  panelmaterial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.panelmaterial)
}
inline ::std::string* curtainwallmsg::mutable_panelmaterial() {
  set_has_panelmaterial();
  if (panelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    panelmaterial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.panelmaterial)
  return panelmaterial_;
}
inline ::std::string* curtainwallmsg::release_panelmaterial() {
  clear_has_panelmaterial();
  if (panelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = panelmaterial_;
    panelmaterial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_panelmaterial(::std::string* panelmaterial) {
  if (panelmaterial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete panelmaterial_;
  }
  if (panelmaterial) {
    set_has_panelmaterial();
    panelmaterial_ = panelmaterial;
  } else {
    clear_has_panelmaterial();
    panelmaterial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.panelmaterial)
}

// required string secpanelmaterial = 9;
inline bool curtainwallmsg::has_secpanelmaterial() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void curtainwallmsg::set_has_secpanelmaterial() {
  _has_bits_[0] |= 0x00000100u;
}
inline void curtainwallmsg::clear_has_secpanelmaterial() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void curtainwallmsg::clear_secpanelmaterial() {
  if (secpanelmaterial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secpanelmaterial_->clear();
  }
  clear_has_secpanelmaterial();
}
inline const ::std::string& curtainwallmsg::secpanelmaterial() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.secpanelmaterial)
  return *secpanelmaterial_;
}
inline void curtainwallmsg::set_secpanelmaterial(const ::std::string& value) {
  set_has_secpanelmaterial();
  if (secpanelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secpanelmaterial_ = new ::std::string;
  }
  secpanelmaterial_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.secpanelmaterial)
}
inline void curtainwallmsg::set_secpanelmaterial(const char* value) {
  set_has_secpanelmaterial();
  if (secpanelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secpanelmaterial_ = new ::std::string;
  }
  secpanelmaterial_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.secpanelmaterial)
}
inline void curtainwallmsg::set_secpanelmaterial(const char* value, size_t size) {
  set_has_secpanelmaterial();
  if (secpanelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secpanelmaterial_ = new ::std::string;
  }
  secpanelmaterial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.secpanelmaterial)
}
inline ::std::string* curtainwallmsg::mutable_secpanelmaterial() {
  set_has_secpanelmaterial();
  if (secpanelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secpanelmaterial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.secpanelmaterial)
  return secpanelmaterial_;
}
inline ::std::string* curtainwallmsg::release_secpanelmaterial() {
  clear_has_secpanelmaterial();
  if (secpanelmaterial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = secpanelmaterial_;
    secpanelmaterial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_secpanelmaterial(::std::string* secpanelmaterial) {
  if (secpanelmaterial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secpanelmaterial_;
  }
  if (secpanelmaterial) {
    set_has_secpanelmaterial();
    secpanelmaterial_ = secpanelmaterial;
  } else {
    clear_has_secpanelmaterial();
    secpanelmaterial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.secpanelmaterial)
}

// required string verticalframematerial = 10;
inline bool curtainwallmsg::has_verticalframematerial() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void curtainwallmsg::set_has_verticalframematerial() {
  _has_bits_[0] |= 0x00000200u;
}
inline void curtainwallmsg::clear_has_verticalframematerial() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void curtainwallmsg::clear_verticalframematerial() {
  if (verticalframematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verticalframematerial_->clear();
  }
  clear_has_verticalframematerial();
}
inline const ::std::string& curtainwallmsg::verticalframematerial() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.verticalframematerial)
  return *verticalframematerial_;
}
inline void curtainwallmsg::set_verticalframematerial(const ::std::string& value) {
  set_has_verticalframematerial();
  if (verticalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verticalframematerial_ = new ::std::string;
  }
  verticalframematerial_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.verticalframematerial)
}
inline void curtainwallmsg::set_verticalframematerial(const char* value) {
  set_has_verticalframematerial();
  if (verticalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verticalframematerial_ = new ::std::string;
  }
  verticalframematerial_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.verticalframematerial)
}
inline void curtainwallmsg::set_verticalframematerial(const char* value, size_t size) {
  set_has_verticalframematerial();
  if (verticalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verticalframematerial_ = new ::std::string;
  }
  verticalframematerial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.verticalframematerial)
}
inline ::std::string* curtainwallmsg::mutable_verticalframematerial() {
  set_has_verticalframematerial();
  if (verticalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verticalframematerial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.verticalframematerial)
  return verticalframematerial_;
}
inline ::std::string* curtainwallmsg::release_verticalframematerial() {
  clear_has_verticalframematerial();
  if (verticalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = verticalframematerial_;
    verticalframematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_verticalframematerial(::std::string* verticalframematerial) {
  if (verticalframematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verticalframematerial_;
  }
  if (verticalframematerial) {
    set_has_verticalframematerial();
    verticalframematerial_ = verticalframematerial;
  } else {
    clear_has_verticalframematerial();
    verticalframematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.verticalframematerial)
}

// required string horizontalframematerial = 11;
inline bool curtainwallmsg::has_horizontalframematerial() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void curtainwallmsg::set_has_horizontalframematerial() {
  _has_bits_[0] |= 0x00000400u;
}
inline void curtainwallmsg::clear_has_horizontalframematerial() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void curtainwallmsg::clear_horizontalframematerial() {
  if (horizontalframematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horizontalframematerial_->clear();
  }
  clear_has_horizontalframematerial();
}
inline const ::std::string& curtainwallmsg::horizontalframematerial() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.horizontalframematerial)
  return *horizontalframematerial_;
}
inline void curtainwallmsg::set_horizontalframematerial(const ::std::string& value) {
  set_has_horizontalframematerial();
  if (horizontalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horizontalframematerial_ = new ::std::string;
  }
  horizontalframematerial_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.horizontalframematerial)
}
inline void curtainwallmsg::set_horizontalframematerial(const char* value) {
  set_has_horizontalframematerial();
  if (horizontalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horizontalframematerial_ = new ::std::string;
  }
  horizontalframematerial_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.horizontalframematerial)
}
inline void curtainwallmsg::set_horizontalframematerial(const char* value, size_t size) {
  set_has_horizontalframematerial();
  if (horizontalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horizontalframematerial_ = new ::std::string;
  }
  horizontalframematerial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.horizontalframematerial)
}
inline ::std::string* curtainwallmsg::mutable_horizontalframematerial() {
  set_has_horizontalframematerial();
  if (horizontalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horizontalframematerial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.horizontalframematerial)
  return horizontalframematerial_;
}
inline ::std::string* curtainwallmsg::release_horizontalframematerial() {
  clear_has_horizontalframematerial();
  if (horizontalframematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = horizontalframematerial_;
    horizontalframematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_horizontalframematerial(::std::string* horizontalframematerial) {
  if (horizontalframematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete horizontalframematerial_;
  }
  if (horizontalframematerial) {
    set_has_horizontalframematerial();
    horizontalframematerial_ = horizontalframematerial;
  } else {
    clear_has_horizontalframematerial();
    horizontalframematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.horizontalframematerial)
}

// required string framematerial = 12;
inline bool curtainwallmsg::has_framematerial() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void curtainwallmsg::set_has_framematerial() {
  _has_bits_[0] |= 0x00000800u;
}
inline void curtainwallmsg::clear_has_framematerial() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void curtainwallmsg::clear_framematerial() {
  if (framematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    framematerial_->clear();
  }
  clear_has_framematerial();
}
inline const ::std::string& curtainwallmsg::framematerial() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.framematerial)
  return *framematerial_;
}
inline void curtainwallmsg::set_framematerial(const ::std::string& value) {
  set_has_framematerial();
  if (framematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    framematerial_ = new ::std::string;
  }
  framematerial_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.framematerial)
}
inline void curtainwallmsg::set_framematerial(const char* value) {
  set_has_framematerial();
  if (framematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    framematerial_ = new ::std::string;
  }
  framematerial_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.framematerial)
}
inline void curtainwallmsg::set_framematerial(const char* value, size_t size) {
  set_has_framematerial();
  if (framematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    framematerial_ = new ::std::string;
  }
  framematerial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.framematerial)
}
inline ::std::string* curtainwallmsg::mutable_framematerial() {
  set_has_framematerial();
  if (framematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    framematerial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.framematerial)
  return framematerial_;
}
inline ::std::string* curtainwallmsg::release_framematerial() {
  clear_has_framematerial();
  if (framematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = framematerial_;
    framematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_framematerial(::std::string* framematerial) {
  if (framematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete framematerial_;
  }
  if (framematerial) {
    set_has_framematerial();
    framematerial_ = framematerial;
  } else {
    clear_has_framematerial();
    framematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.framematerial)
}

// required double panelsangle = 13;
inline bool curtainwallmsg::has_panelsangle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void curtainwallmsg::set_has_panelsangle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void curtainwallmsg::clear_has_panelsangle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void curtainwallmsg::clear_panelsangle() {
  panelsangle_ = 0;
  clear_has_panelsangle();
}
inline double curtainwallmsg::panelsangle() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.panelsangle)
  return panelsangle_;
}
inline void curtainwallmsg::set_panelsangle(double value) {
  set_has_panelsangle();
  panelsangle_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.panelsangle)
}

// required double offset = 14;
inline bool curtainwallmsg::has_offset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void curtainwallmsg::set_has_offset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void curtainwallmsg::clear_has_offset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void curtainwallmsg::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline double curtainwallmsg::offset() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.offset)
  return offset_;
}
inline void curtainwallmsg::set_offset(double value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.offset)
}

// optional string layer = 15;
inline bool curtainwallmsg::has_layer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void curtainwallmsg::set_has_layer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void curtainwallmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void curtainwallmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& curtainwallmsg::layer() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.layer)
  return *layer_;
}
inline void curtainwallmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:curtainwallmsg.layer)
}
inline void curtainwallmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:curtainwallmsg.layer)
}
inline void curtainwallmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curtainwallmsg.layer)
}
inline ::std::string* curtainwallmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:curtainwallmsg.layer)
  return layer_;
}
inline ::std::string* curtainwallmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void curtainwallmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:curtainwallmsg.layer)
}

// optional double height = 16;
inline bool curtainwallmsg::has_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void curtainwallmsg::set_has_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void curtainwallmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void curtainwallmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double curtainwallmsg::height() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.height)
  return height_;
}
inline void curtainwallmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.height)
}

// optional bool toplinked = 17;
inline bool curtainwallmsg::has_toplinked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void curtainwallmsg::set_has_toplinked() {
  _has_bits_[0] |= 0x00010000u;
}
inline void curtainwallmsg::clear_has_toplinked() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void curtainwallmsg::clear_toplinked() {
  toplinked_ = false;
  clear_has_toplinked();
}
inline bool curtainwallmsg::toplinked() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.toplinked)
  return toplinked_;
}
inline void curtainwallmsg::set_toplinked(bool value) {
  set_has_toplinked();
  toplinked_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.toplinked)
}

// optional double mainpanelthickness = 18;
inline bool curtainwallmsg::has_mainpanelthickness() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void curtainwallmsg::set_has_mainpanelthickness() {
  _has_bits_[0] |= 0x00020000u;
}
inline void curtainwallmsg::clear_has_mainpanelthickness() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void curtainwallmsg::clear_mainpanelthickness() {
  mainpanelthickness_ = 0;
  clear_has_mainpanelthickness();
}
inline double curtainwallmsg::mainpanelthickness() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.mainpanelthickness)
  return mainpanelthickness_;
}
inline void curtainwallmsg::set_mainpanelthickness(double value) {
  set_has_mainpanelthickness();
  mainpanelthickness_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.mainpanelthickness)
}

// optional double secondarypanelthickness = 19;
inline bool curtainwallmsg::has_secondarypanelthickness() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void curtainwallmsg::set_has_secondarypanelthickness() {
  _has_bits_[0] |= 0x00040000u;
}
inline void curtainwallmsg::clear_has_secondarypanelthickness() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void curtainwallmsg::clear_secondarypanelthickness() {
  secondarypanelthickness_ = 0;
  clear_has_secondarypanelthickness();
}
inline double curtainwallmsg::secondarypanelthickness() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.secondarypanelthickness)
  return secondarypanelthickness_;
}
inline void curtainwallmsg::set_secondarypanelthickness(double value) {
  set_has_secondarypanelthickness();
  secondarypanelthickness_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.secondarypanelthickness)
}

// optional double bframewidth = 20;
inline bool curtainwallmsg::has_bframewidth() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void curtainwallmsg::set_has_bframewidth() {
  _has_bits_[0] |= 0x00080000u;
}
inline void curtainwallmsg::clear_has_bframewidth() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void curtainwallmsg::clear_bframewidth() {
  bframewidth_ = 0;
  clear_has_bframewidth();
}
inline double curtainwallmsg::bframewidth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.bframewidth)
  return bframewidth_;
}
inline void curtainwallmsg::set_bframewidth(double value) {
  set_has_bframewidth();
  bframewidth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.bframewidth)
}

// optional double bframedepth = 21;
inline bool curtainwallmsg::has_bframedepth() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void curtainwallmsg::set_has_bframedepth() {
  _has_bits_[0] |= 0x00100000u;
}
inline void curtainwallmsg::clear_has_bframedepth() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void curtainwallmsg::clear_bframedepth() {
  bframedepth_ = 0;
  clear_has_bframedepth();
}
inline double curtainwallmsg::bframedepth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.bframedepth)
  return bframedepth_;
}
inline void curtainwallmsg::set_bframedepth(double value) {
  set_has_bframedepth();
  bframedepth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.bframedepth)
}

// optional double bframeoffset = 22;
inline bool curtainwallmsg::has_bframeoffset() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void curtainwallmsg::set_has_bframeoffset() {
  _has_bits_[0] |= 0x00200000u;
}
inline void curtainwallmsg::clear_has_bframeoffset() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void curtainwallmsg::clear_bframeoffset() {
  bframeoffset_ = 0;
  clear_has_bframeoffset();
}
inline double curtainwallmsg::bframeoffset() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.bframeoffset)
  return bframeoffset_;
}
inline void curtainwallmsg::set_bframeoffset(double value) {
  set_has_bframeoffset();
  bframeoffset_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.bframeoffset)
}

// optional double mframewidth = 23;
inline bool curtainwallmsg::has_mframewidth() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void curtainwallmsg::set_has_mframewidth() {
  _has_bits_[0] |= 0x00400000u;
}
inline void curtainwallmsg::clear_has_mframewidth() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void curtainwallmsg::clear_mframewidth() {
  mframewidth_ = 0;
  clear_has_mframewidth();
}
inline double curtainwallmsg::mframewidth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.mframewidth)
  return mframewidth_;
}
inline void curtainwallmsg::set_mframewidth(double value) {
  set_has_mframewidth();
  mframewidth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.mframewidth)
}

// optional double mframedepth = 24;
inline bool curtainwallmsg::has_mframedepth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void curtainwallmsg::set_has_mframedepth() {
  _has_bits_[0] |= 0x00800000u;
}
inline void curtainwallmsg::clear_has_mframedepth() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void curtainwallmsg::clear_mframedepth() {
  mframedepth_ = 0;
  clear_has_mframedepth();
}
inline double curtainwallmsg::mframedepth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.mframedepth)
  return mframedepth_;
}
inline void curtainwallmsg::set_mframedepth(double value) {
  set_has_mframedepth();
  mframedepth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.mframedepth)
}

// optional double mframeoffset = 25;
inline bool curtainwallmsg::has_mframeoffset() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void curtainwallmsg::set_has_mframeoffset() {
  _has_bits_[0] |= 0x01000000u;
}
inline void curtainwallmsg::clear_has_mframeoffset() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void curtainwallmsg::clear_mframeoffset() {
  mframeoffset_ = 0;
  clear_has_mframeoffset();
}
inline double curtainwallmsg::mframeoffset() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.mframeoffset)
  return mframeoffset_;
}
inline void curtainwallmsg::set_mframeoffset(double value) {
  set_has_mframeoffset();
  mframeoffset_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.mframeoffset)
}

// optional double tframewidth = 26;
inline bool curtainwallmsg::has_tframewidth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void curtainwallmsg::set_has_tframewidth() {
  _has_bits_[0] |= 0x02000000u;
}
inline void curtainwallmsg::clear_has_tframewidth() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void curtainwallmsg::clear_tframewidth() {
  tframewidth_ = 0;
  clear_has_tframewidth();
}
inline double curtainwallmsg::tframewidth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.tframewidth)
  return tframewidth_;
}
inline void curtainwallmsg::set_tframewidth(double value) {
  set_has_tframewidth();
  tframewidth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.tframewidth)
}

// optional double tframedepth = 27;
inline bool curtainwallmsg::has_tframedepth() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void curtainwallmsg::set_has_tframedepth() {
  _has_bits_[0] |= 0x04000000u;
}
inline void curtainwallmsg::clear_has_tframedepth() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void curtainwallmsg::clear_tframedepth() {
  tframedepth_ = 0;
  clear_has_tframedepth();
}
inline double curtainwallmsg::tframedepth() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.tframedepth)
  return tframedepth_;
}
inline void curtainwallmsg::set_tframedepth(double value) {
  set_has_tframedepth();
  tframedepth_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.tframedepth)
}

// optional double tframeoffset = 28;
inline bool curtainwallmsg::has_tframeoffset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void curtainwallmsg::set_has_tframeoffset() {
  _has_bits_[0] |= 0x08000000u;
}
inline void curtainwallmsg::clear_has_tframeoffset() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void curtainwallmsg::clear_tframeoffset() {
  tframeoffset_ = 0;
  clear_has_tframeoffset();
}
inline double curtainwallmsg::tframeoffset() const {
  // @@protoc_insertion_point(field_get:curtainwallmsg.tframeoffset)
  return tframeoffset_;
}
inline void curtainwallmsg::set_tframeoffset(double value) {
  set_has_tframeoffset();
  tframeoffset_ = value;
  // @@protoc_insertion_point(field_set:curtainwallmsg.tframeoffset)
}

// -------------------------------------------------------------------

// translatemsg

// required double tx = 1;
inline bool translatemsg::has_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void translatemsg::set_has_tx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void translatemsg::clear_has_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void translatemsg::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline double translatemsg::tx() const {
  // @@protoc_insertion_point(field_get:translatemsg.tx)
  return tx_;
}
inline void translatemsg::set_tx(double value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:translatemsg.tx)
}

// required double ty = 2;
inline bool translatemsg::has_ty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void translatemsg::set_has_ty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void translatemsg::clear_has_ty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void translatemsg::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline double translatemsg::ty() const {
  // @@protoc_insertion_point(field_get:translatemsg.ty)
  return ty_;
}
inline void translatemsg::set_ty(double value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:translatemsg.ty)
}

// required double tz = 3;
inline bool translatemsg::has_tz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void translatemsg::set_has_tz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void translatemsg::clear_has_tz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void translatemsg::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline double translatemsg::tz() const {
  // @@protoc_insertion_point(field_get:translatemsg.tz)
  return tz_;
}
inline void translatemsg::set_tz(double value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:translatemsg.tz)
}

// required string guid = 4;
inline bool translatemsg::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void translatemsg::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void translatemsg::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void translatemsg::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& translatemsg::guid() const {
  // @@protoc_insertion_point(field_get:translatemsg.guid)
  return *guid_;
}
inline void translatemsg::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:translatemsg.guid)
}
inline void translatemsg::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:translatemsg.guid)
}
inline void translatemsg::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:translatemsg.guid)
}
inline ::std::string* translatemsg::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:translatemsg.guid)
  return guid_;
}
inline ::std::string* translatemsg::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void translatemsg::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:translatemsg.guid)
}

// -------------------------------------------------------------------

// slabmessage

// required double level = 1;
inline bool slabmessage::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void slabmessage::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void slabmessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void slabmessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline double slabmessage::level() const {
  // @@protoc_insertion_point(field_get:slabmessage.level)
  return level_;
}
inline void slabmessage::set_level(double value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:slabmessage.level)
}

// required string material = 2;
inline bool slabmessage::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void slabmessage::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void slabmessage::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void slabmessage::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& slabmessage::material() const {
  // @@protoc_insertion_point(field_get:slabmessage.material)
  return *material_;
}
inline void slabmessage::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:slabmessage.material)
}
inline void slabmessage::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:slabmessage.material)
}
inline void slabmessage::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabmessage.material)
}
inline ::std::string* slabmessage::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:slabmessage.material)
  return material_;
}
inline ::std::string* slabmessage::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void slabmessage::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.material)
}

// required double thickness = 3;
inline bool slabmessage::has_thickness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void slabmessage::set_has_thickness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void slabmessage::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void slabmessage::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double slabmessage::thickness() const {
  // @@protoc_insertion_point(field_get:slabmessage.thickness)
  return thickness_;
}
inline void slabmessage::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:slabmessage.thickness)
}

// required string type = 4;
inline bool slabmessage::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void slabmessage::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void slabmessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void slabmessage::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& slabmessage::type() const {
  // @@protoc_insertion_point(field_get:slabmessage.type)
  return *type_;
}
inline void slabmessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:slabmessage.type)
}
inline void slabmessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:slabmessage.type)
}
inline void slabmessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabmessage.type)
}
inline ::std::string* slabmessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:slabmessage.type)
  return type_;
}
inline ::std::string* slabmessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void slabmessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.type)
}

// required int32 bottomlevel = 5;
inline bool slabmessage::has_bottomlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void slabmessage::set_has_bottomlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void slabmessage::clear_has_bottomlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void slabmessage::clear_bottomlevel() {
  bottomlevel_ = 0;
  clear_has_bottomlevel();
}
inline ::google::protobuf::int32 slabmessage::bottomlevel() const {
  // @@protoc_insertion_point(field_get:slabmessage.bottomlevel)
  return bottomlevel_;
}
inline void slabmessage::set_bottomlevel(::google::protobuf::int32 value) {
  set_has_bottomlevel();
  bottomlevel_ = value;
  // @@protoc_insertion_point(field_set:slabmessage.bottomlevel)
}

// repeated int32 subpolygons = 6;
inline int slabmessage::subpolygons_size() const {
  return subpolygons_.size();
}
inline void slabmessage::clear_subpolygons() {
  subpolygons_.Clear();
}
inline ::google::protobuf::int32 slabmessage::subpolygons(int index) const {
  // @@protoc_insertion_point(field_get:slabmessage.subpolygons)
  return subpolygons_.Get(index);
}
inline void slabmessage::set_subpolygons(int index, ::google::protobuf::int32 value) {
  subpolygons_.Set(index, value);
  // @@protoc_insertion_point(field_set:slabmessage.subpolygons)
}
inline void slabmessage::add_subpolygons(::google::protobuf::int32 value) {
  subpolygons_.Add(value);
  // @@protoc_insertion_point(field_add:slabmessage.subpolygons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
slabmessage::subpolygons() const {
  // @@protoc_insertion_point(field_list:slabmessage.subpolygons)
  return subpolygons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
slabmessage::mutable_subpolygons() {
  // @@protoc_insertion_point(field_mutable_list:slabmessage.subpolygons)
  return &subpolygons_;
}

// required .pointsmessage pts = 7;
inline bool slabmessage::has_pts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void slabmessage::set_has_pts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void slabmessage::clear_has_pts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void slabmessage::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& slabmessage::pts() const {
  // @@protoc_insertion_point(field_get:slabmessage.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* slabmessage::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:slabmessage.pts)
  return pts_;
}
inline ::pointsmessage* slabmessage::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void slabmessage::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.pts)
}

// required .polyarcsmessage parcs = 8;
inline bool slabmessage::has_parcs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void slabmessage::set_has_parcs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void slabmessage::clear_has_parcs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void slabmessage::clear_parcs() {
  if (parcs_ != NULL) parcs_->::polyarcsmessage::Clear();
  clear_has_parcs();
}
inline const ::polyarcsmessage& slabmessage::parcs() const {
  // @@protoc_insertion_point(field_get:slabmessage.parcs)
  return parcs_ != NULL ? *parcs_ : *default_instance_->parcs_;
}
inline ::polyarcsmessage* slabmessage::mutable_parcs() {
  set_has_parcs();
  if (parcs_ == NULL) parcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:slabmessage.parcs)
  return parcs_;
}
inline ::polyarcsmessage* slabmessage::release_parcs() {
  clear_has_parcs();
  ::polyarcsmessage* temp = parcs_;
  parcs_ = NULL;
  return temp;
}
inline void slabmessage::set_allocated_parcs(::polyarcsmessage* parcs) {
  delete parcs_;
  parcs_ = parcs;
  if (parcs) {
    set_has_parcs();
  } else {
    clear_has_parcs();
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.parcs)
}

// optional string layer = 9;
inline bool slabmessage::has_layer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void slabmessage::set_has_layer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void slabmessage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void slabmessage::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& slabmessage::layer() const {
  // @@protoc_insertion_point(field_get:slabmessage.layer)
  return *layer_;
}
inline void slabmessage::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:slabmessage.layer)
}
inline void slabmessage::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:slabmessage.layer)
}
inline void slabmessage::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabmessage.layer)
}
inline ::std::string* slabmessage::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:slabmessage.layer)
  return layer_;
}
inline ::std::string* slabmessage::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void slabmessage::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.layer)
}

// optional string reference = 10;
inline bool slabmessage::has_reference() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void slabmessage::set_has_reference() {
  _has_bits_[0] |= 0x00000200u;
}
inline void slabmessage::clear_has_reference() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void slabmessage::clear_reference() {
  if (reference_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reference_->clear();
  }
  clear_has_reference();
}
inline const ::std::string& slabmessage::reference() const {
  // @@protoc_insertion_point(field_get:slabmessage.reference)
  return *reference_;
}
inline void slabmessage::set_reference(const ::std::string& value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
  // @@protoc_insertion_point(field_set:slabmessage.reference)
}
inline void slabmessage::set_reference(const char* value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
  // @@protoc_insertion_point(field_set_char:slabmessage.reference)
}
inline void slabmessage::set_reference(const char* value, size_t size) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reference_ = new ::std::string;
  }
  reference_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabmessage.reference)
}
inline ::std::string* slabmessage::mutable_reference() {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reference_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:slabmessage.reference)
  return reference_;
}
inline ::std::string* slabmessage::release_reference() {
  clear_has_reference();
  if (reference_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reference_;
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void slabmessage::set_allocated_reference(::std::string* reference) {
  if (reference_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reference_;
  }
  if (reference) {
    set_has_reference();
    reference_ = reference;
  } else {
    clear_has_reference();
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:slabmessage.reference)
}

// -------------------------------------------------------------------

// meshmessage

// required double level = 1;
inline bool meshmessage::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meshmessage::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void meshmessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void meshmessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline double meshmessage::level() const {
  // @@protoc_insertion_point(field_get:meshmessage.level)
  return level_;
}
inline void meshmessage::set_level(double value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:meshmessage.level)
}

// required string material = 2;
inline bool meshmessage::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meshmessage::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void meshmessage::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void meshmessage::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& meshmessage::material() const {
  // @@protoc_insertion_point(field_get:meshmessage.material)
  return *material_;
}
inline void meshmessage::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:meshmessage.material)
}
inline void meshmessage::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:meshmessage.material)
}
inline void meshmessage::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meshmessage.material)
}
inline ::std::string* meshmessage::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:meshmessage.material)
  return material_;
}
inline ::std::string* meshmessage::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void meshmessage::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:meshmessage.material)
}

// required int32 bottomlevel = 3;
inline bool meshmessage::has_bottomlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void meshmessage::set_has_bottomlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void meshmessage::clear_has_bottomlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void meshmessage::clear_bottomlevel() {
  bottomlevel_ = 0;
  clear_has_bottomlevel();
}
inline ::google::protobuf::int32 meshmessage::bottomlevel() const {
  // @@protoc_insertion_point(field_get:meshmessage.bottomlevel)
  return bottomlevel_;
}
inline void meshmessage::set_bottomlevel(::google::protobuf::int32 value) {
  set_has_bottomlevel();
  bottomlevel_ = value;
  // @@protoc_insertion_point(field_set:meshmessage.bottomlevel)
}

// optional string overridematerial = 4;
inline bool meshmessage::has_overridematerial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void meshmessage::set_has_overridematerial() {
  _has_bits_[0] |= 0x00000008u;
}
inline void meshmessage::clear_has_overridematerial() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void meshmessage::clear_overridematerial() {
  if (overridematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overridematerial_->clear();
  }
  clear_has_overridematerial();
}
inline const ::std::string& meshmessage::overridematerial() const {
  // @@protoc_insertion_point(field_get:meshmessage.overridematerial)
  return *overridematerial_;
}
inline void meshmessage::set_overridematerial(const ::std::string& value) {
  set_has_overridematerial();
  if (overridematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overridematerial_ = new ::std::string;
  }
  overridematerial_->assign(value);
  // @@protoc_insertion_point(field_set:meshmessage.overridematerial)
}
inline void meshmessage::set_overridematerial(const char* value) {
  set_has_overridematerial();
  if (overridematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overridematerial_ = new ::std::string;
  }
  overridematerial_->assign(value);
  // @@protoc_insertion_point(field_set_char:meshmessage.overridematerial)
}
inline void meshmessage::set_overridematerial(const char* value, size_t size) {
  set_has_overridematerial();
  if (overridematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overridematerial_ = new ::std::string;
  }
  overridematerial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meshmessage.overridematerial)
}
inline ::std::string* meshmessage::mutable_overridematerial() {
  set_has_overridematerial();
  if (overridematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overridematerial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:meshmessage.overridematerial)
  return overridematerial_;
}
inline ::std::string* meshmessage::release_overridematerial() {
  clear_has_overridematerial();
  if (overridematerial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = overridematerial_;
    overridematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void meshmessage::set_allocated_overridematerial(::std::string* overridematerial) {
  if (overridematerial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete overridematerial_;
  }
  if (overridematerial) {
    set_has_overridematerial();
    overridematerial_ = overridematerial;
  } else {
    clear_has_overridematerial();
    overridematerial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:meshmessage.overridematerial)
}

// optional string layer = 5;
inline bool meshmessage::has_layer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void meshmessage::set_has_layer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void meshmessage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void meshmessage::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& meshmessage::layer() const {
  // @@protoc_insertion_point(field_get:meshmessage.layer)
  return *layer_;
}
inline void meshmessage::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:meshmessage.layer)
}
inline void meshmessage::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:meshmessage.layer)
}
inline void meshmessage::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meshmessage.layer)
}
inline ::std::string* meshmessage::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:meshmessage.layer)
  return layer_;
}
inline ::std::string* meshmessage::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void meshmessage::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:meshmessage.layer)
}

// -------------------------------------------------------------------

// rotatemsg

// repeated string guid = 1;
inline int rotatemsg::guid_size() const {
  return guid_.size();
}
inline void rotatemsg::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& rotatemsg::guid(int index) const {
  // @@protoc_insertion_point(field_get:rotatemsg.guid)
  return guid_.Get(index);
}
inline ::std::string* rotatemsg::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:rotatemsg.guid)
  return guid_.Mutable(index);
}
inline void rotatemsg::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rotatemsg.guid)
  guid_.Mutable(index)->assign(value);
}
inline void rotatemsg::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rotatemsg.guid)
}
inline void rotatemsg::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rotatemsg.guid)
}
inline ::std::string* rotatemsg::add_guid() {
  return guid_.Add();
}
inline void rotatemsg::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rotatemsg.guid)
}
inline void rotatemsg::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rotatemsg.guid)
}
inline void rotatemsg::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rotatemsg.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rotatemsg::guid() const {
  // @@protoc_insertion_point(field_list:rotatemsg.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rotatemsg::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:rotatemsg.guid)
  return &guid_;
}

// required string axis = 2;
inline bool rotatemsg::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rotatemsg::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rotatemsg::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rotatemsg::clear_axis() {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_->clear();
  }
  clear_has_axis();
}
inline const ::std::string& rotatemsg::axis() const {
  // @@protoc_insertion_point(field_get:rotatemsg.axis)
  return *axis_;
}
inline void rotatemsg::set_axis(const ::std::string& value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set:rotatemsg.axis)
}
inline void rotatemsg::set_axis(const char* value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set_char:rotatemsg.axis)
}
inline void rotatemsg::set_axis(const char* value, size_t size) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rotatemsg.axis)
}
inline ::std::string* rotatemsg::mutable_axis() {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rotatemsg.axis)
  return axis_;
}
inline ::std::string* rotatemsg::release_axis() {
  clear_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = axis_;
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rotatemsg::set_allocated_axis(::std::string* axis) {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete axis_;
  }
  if (axis) {
    set_has_axis();
    axis_ = axis;
  } else {
    clear_has_axis();
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rotatemsg.axis)
}

// required double angle = 3;
inline bool rotatemsg::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rotatemsg::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rotatemsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rotatemsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double rotatemsg::angle() const {
  // @@protoc_insertion_point(field_get:rotatemsg.angle)
  return angle_;
}
inline void rotatemsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:rotatemsg.angle)
}

// required bool copy = 4;
inline bool rotatemsg::has_copy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rotatemsg::set_has_copy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rotatemsg::clear_has_copy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rotatemsg::clear_copy() {
  copy_ = false;
  clear_has_copy();
}
inline bool rotatemsg::copy() const {
  // @@protoc_insertion_point(field_get:rotatemsg.copy)
  return copy_;
}
inline void rotatemsg::set_copy(bool value) {
  set_has_copy();
  copy_ = value;
  // @@protoc_insertion_point(field_set:rotatemsg.copy)
}

// -------------------------------------------------------------------

// trimmsg

// repeated string guids = 1;
inline int trimmsg::guids_size() const {
  return guids_.size();
}
inline void trimmsg::clear_guids() {
  guids_.Clear();
}
inline const ::std::string& trimmsg::guids(int index) const {
  // @@protoc_insertion_point(field_get:trimmsg.guids)
  return guids_.Get(index);
}
inline ::std::string* trimmsg::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:trimmsg.guids)
  return guids_.Mutable(index);
}
inline void trimmsg::set_guids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trimmsg.guids)
  guids_.Mutable(index)->assign(value);
}
inline void trimmsg::set_guids(int index, const char* value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trimmsg.guids)
}
inline void trimmsg::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trimmsg.guids)
}
inline ::std::string* trimmsg::add_guids() {
  return guids_.Add();
}
inline void trimmsg::add_guids(const ::std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trimmsg.guids)
}
inline void trimmsg::add_guids(const char* value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trimmsg.guids)
}
inline void trimmsg::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trimmsg.guids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
trimmsg::guids() const {
  // @@protoc_insertion_point(field_list:trimmsg.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
trimmsg::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:trimmsg.guids)
  return &guids_;
}

// repeated string guids2 = 2;
inline int trimmsg::guids2_size() const {
  return guids2_.size();
}
inline void trimmsg::clear_guids2() {
  guids2_.Clear();
}
inline const ::std::string& trimmsg::guids2(int index) const {
  // @@protoc_insertion_point(field_get:trimmsg.guids2)
  return guids2_.Get(index);
}
inline ::std::string* trimmsg::mutable_guids2(int index) {
  // @@protoc_insertion_point(field_mutable:trimmsg.guids2)
  return guids2_.Mutable(index);
}
inline void trimmsg::set_guids2(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trimmsg.guids2)
  guids2_.Mutable(index)->assign(value);
}
inline void trimmsg::set_guids2(int index, const char* value) {
  guids2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trimmsg.guids2)
}
inline void trimmsg::set_guids2(int index, const char* value, size_t size) {
  guids2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trimmsg.guids2)
}
inline ::std::string* trimmsg::add_guids2() {
  return guids2_.Add();
}
inline void trimmsg::add_guids2(const ::std::string& value) {
  guids2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trimmsg.guids2)
}
inline void trimmsg::add_guids2(const char* value) {
  guids2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trimmsg.guids2)
}
inline void trimmsg::add_guids2(const char* value, size_t size) {
  guids2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trimmsg.guids2)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
trimmsg::guids2() const {
  // @@protoc_insertion_point(field_list:trimmsg.guids2)
  return guids2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
trimmsg::mutable_guids2() {
  // @@protoc_insertion_point(field_mutable_list:trimmsg.guids2)
  return &guids2_;
}

// -------------------------------------------------------------------

// intersectmsg

// required string guid1 = 1;
inline bool intersectmsg::has_guid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void intersectmsg::set_has_guid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void intersectmsg::clear_has_guid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void intersectmsg::clear_guid1() {
  if (guid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid1_->clear();
  }
  clear_has_guid1();
}
inline const ::std::string& intersectmsg::guid1() const {
  // @@protoc_insertion_point(field_get:intersectmsg.guid1)
  return *guid1_;
}
inline void intersectmsg::set_guid1(const ::std::string& value) {
  set_has_guid1();
  if (guid1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid1_ = new ::std::string;
  }
  guid1_->assign(value);
  // @@protoc_insertion_point(field_set:intersectmsg.guid1)
}
inline void intersectmsg::set_guid1(const char* value) {
  set_has_guid1();
  if (guid1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid1_ = new ::std::string;
  }
  guid1_->assign(value);
  // @@protoc_insertion_point(field_set_char:intersectmsg.guid1)
}
inline void intersectmsg::set_guid1(const char* value, size_t size) {
  set_has_guid1();
  if (guid1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid1_ = new ::std::string;
  }
  guid1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:intersectmsg.guid1)
}
inline ::std::string* intersectmsg::mutable_guid1() {
  set_has_guid1();
  if (guid1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:intersectmsg.guid1)
  return guid1_;
}
inline ::std::string* intersectmsg::release_guid1() {
  clear_has_guid1();
  if (guid1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid1_;
    guid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void intersectmsg::set_allocated_guid1(::std::string* guid1) {
  if (guid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid1_;
  }
  if (guid1) {
    set_has_guid1();
    guid1_ = guid1;
  } else {
    clear_has_guid1();
    guid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:intersectmsg.guid1)
}

// required string guid2 = 2;
inline bool intersectmsg::has_guid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void intersectmsg::set_has_guid2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void intersectmsg::clear_has_guid2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void intersectmsg::clear_guid2() {
  if (guid2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid2_->clear();
  }
  clear_has_guid2();
}
inline const ::std::string& intersectmsg::guid2() const {
  // @@protoc_insertion_point(field_get:intersectmsg.guid2)
  return *guid2_;
}
inline void intersectmsg::set_guid2(const ::std::string& value) {
  set_has_guid2();
  if (guid2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid2_ = new ::std::string;
  }
  guid2_->assign(value);
  // @@protoc_insertion_point(field_set:intersectmsg.guid2)
}
inline void intersectmsg::set_guid2(const char* value) {
  set_has_guid2();
  if (guid2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid2_ = new ::std::string;
  }
  guid2_->assign(value);
  // @@protoc_insertion_point(field_set_char:intersectmsg.guid2)
}
inline void intersectmsg::set_guid2(const char* value, size_t size) {
  set_has_guid2();
  if (guid2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid2_ = new ::std::string;
  }
  guid2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:intersectmsg.guid2)
}
inline ::std::string* intersectmsg::mutable_guid2() {
  set_has_guid2();
  if (guid2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:intersectmsg.guid2)
  return guid2_;
}
inline ::std::string* intersectmsg::release_guid2() {
  clear_has_guid2();
  if (guid2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid2_;
    guid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void intersectmsg::set_allocated_guid2(::std::string* guid2) {
  if (guid2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid2_;
  }
  if (guid2) {
    set_has_guid2();
    guid2_ = guid2;
  } else {
    clear_has_guid2();
    guid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:intersectmsg.guid2)
}

// -------------------------------------------------------------------

// columnmsg

// required double posx = 1;
inline bool columnmsg::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void columnmsg::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void columnmsg::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void columnmsg::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline double columnmsg::posx() const {
  // @@protoc_insertion_point(field_get:columnmsg.posx)
  return posx_;
}
inline void columnmsg::set_posx(double value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.posx)
}

// required double posy = 2;
inline bool columnmsg::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void columnmsg::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void columnmsg::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void columnmsg::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline double columnmsg::posy() const {
  // @@protoc_insertion_point(field_get:columnmsg.posy)
  return posy_;
}
inline void columnmsg::set_posy(double value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.posy)
}

// required double bottom = 3;
inline bool columnmsg::has_bottom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void columnmsg::set_has_bottom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void columnmsg::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void columnmsg::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline double columnmsg::bottom() const {
  // @@protoc_insertion_point(field_get:columnmsg.bottom)
  return bottom_;
}
inline void columnmsg::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.bottom)
}

// optional double height = 4;
inline bool columnmsg::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void columnmsg::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void columnmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void columnmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double columnmsg::height() const {
  // @@protoc_insertion_point(field_get:columnmsg.height)
  return height_;
}
inline void columnmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.height)
}

// required bool circlebased = 5;
inline bool columnmsg::has_circlebased() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void columnmsg::set_has_circlebased() {
  _has_bits_[0] |= 0x00000010u;
}
inline void columnmsg::clear_has_circlebased() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void columnmsg::clear_circlebased() {
  circlebased_ = false;
  clear_has_circlebased();
}
inline bool columnmsg::circlebased() const {
  // @@protoc_insertion_point(field_get:columnmsg.circlebased)
  return circlebased_;
}
inline void columnmsg::set_circlebased(bool value) {
  set_has_circlebased();
  circlebased_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.circlebased)
}

// required double angle = 6;
inline bool columnmsg::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void columnmsg::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void columnmsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void columnmsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double columnmsg::angle() const {
  // @@protoc_insertion_point(field_get:columnmsg.angle)
  return angle_;
}
inline void columnmsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.angle)
}

// required double depth = 7;
inline bool columnmsg::has_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void columnmsg::set_has_depth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void columnmsg::clear_has_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void columnmsg::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline double columnmsg::depth() const {
  // @@protoc_insertion_point(field_get:columnmsg.depth)
  return depth_;
}
inline void columnmsg::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.depth)
}

// required double width = 8;
inline bool columnmsg::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void columnmsg::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void columnmsg::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void columnmsg::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double columnmsg::width() const {
  // @@protoc_insertion_point(field_get:columnmsg.width)
  return width_;
}
inline void columnmsg::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.width)
}

// optional int32 bottomindex = 9;
inline bool columnmsg::has_bottomindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void columnmsg::set_has_bottomindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void columnmsg::clear_has_bottomindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void columnmsg::clear_bottomindex() {
  bottomindex_ = 0;
  clear_has_bottomindex();
}
inline ::google::protobuf::int32 columnmsg::bottomindex() const {
  // @@protoc_insertion_point(field_get:columnmsg.bottomindex)
  return bottomindex_;
}
inline void columnmsg::set_bottomindex(::google::protobuf::int32 value) {
  set_has_bottomindex();
  bottomindex_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.bottomindex)
}

// optional int32 upperindex = 10;
inline bool columnmsg::has_upperindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void columnmsg::set_has_upperindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void columnmsg::clear_has_upperindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void columnmsg::clear_upperindex() {
  upperindex_ = 0;
  clear_has_upperindex();
}
inline ::google::protobuf::int32 columnmsg::upperindex() const {
  // @@protoc_insertion_point(field_get:columnmsg.upperindex)
  return upperindex_;
}
inline void columnmsg::set_upperindex(::google::protobuf::int32 value) {
  set_has_upperindex();
  upperindex_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.upperindex)
}

// required double slantangle = 11;
inline bool columnmsg::has_slantangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void columnmsg::set_has_slantangle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void columnmsg::clear_has_slantangle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void columnmsg::clear_slantangle() {
  slantangle_ = 0;
  clear_has_slantangle();
}
inline double columnmsg::slantangle() const {
  // @@protoc_insertion_point(field_get:columnmsg.slantangle)
  return slantangle_;
}
inline void columnmsg::set_slantangle(double value) {
  set_has_slantangle();
  slantangle_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.slantangle)
}

// required double slantdirection = 12;
inline bool columnmsg::has_slantdirection() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void columnmsg::set_has_slantdirection() {
  _has_bits_[0] |= 0x00000800u;
}
inline void columnmsg::clear_has_slantdirection() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void columnmsg::clear_slantdirection() {
  slantdirection_ = 0;
  clear_has_slantdirection();
}
inline double columnmsg::slantdirection() const {
  // @@protoc_insertion_point(field_get:columnmsg.slantdirection)
  return slantdirection_;
}
inline void columnmsg::set_slantdirection(double value) {
  set_has_slantdirection();
  slantdirection_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.slantdirection)
}

// required string profilename = 13;
inline bool columnmsg::has_profilename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void columnmsg::set_has_profilename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void columnmsg::clear_has_profilename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void columnmsg::clear_profilename() {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_->clear();
  }
  clear_has_profilename();
}
inline const ::std::string& columnmsg::profilename() const {
  // @@protoc_insertion_point(field_get:columnmsg.profilename)
  return *profilename_;
}
inline void columnmsg::set_profilename(const ::std::string& value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set:columnmsg.profilename)
}
inline void columnmsg::set_profilename(const char* value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:columnmsg.profilename)
}
inline void columnmsg::set_profilename(const char* value, size_t size) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnmsg.profilename)
}
inline ::std::string* columnmsg::mutable_profilename() {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:columnmsg.profilename)
  return profilename_;
}
inline ::std::string* columnmsg::release_profilename() {
  clear_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = profilename_;
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void columnmsg::set_allocated_profilename(::std::string* profilename) {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profilename_;
  }
  if (profilename) {
    set_has_profilename();
    profilename_ = profilename;
  } else {
    clear_has_profilename();
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:columnmsg.profilename)
}

// optional double bottomoffset = 14;
inline bool columnmsg::has_bottomoffset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void columnmsg::set_has_bottomoffset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void columnmsg::clear_has_bottomoffset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void columnmsg::clear_bottomoffset() {
  bottomoffset_ = 0;
  clear_has_bottomoffset();
}
inline double columnmsg::bottomoffset() const {
  // @@protoc_insertion_point(field_get:columnmsg.bottomoffset)
  return bottomoffset_;
}
inline void columnmsg::set_bottomoffset(double value) {
  set_has_bottomoffset();
  bottomoffset_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.bottomoffset)
}

// optional string layer = 15;
inline bool columnmsg::has_layer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void columnmsg::set_has_layer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void columnmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void columnmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& columnmsg::layer() const {
  // @@protoc_insertion_point(field_get:columnmsg.layer)
  return *layer_;
}
inline void columnmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:columnmsg.layer)
}
inline void columnmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:columnmsg.layer)
}
inline void columnmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnmsg.layer)
}
inline ::std::string* columnmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:columnmsg.layer)
  return layer_;
}
inline ::std::string* columnmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void columnmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:columnmsg.layer)
}

// optional bool toplinked = 16;
inline bool columnmsg::has_toplinked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void columnmsg::set_has_toplinked() {
  _has_bits_[0] |= 0x00008000u;
}
inline void columnmsg::clear_has_toplinked() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void columnmsg::clear_toplinked() {
  toplinked_ = false;
  clear_has_toplinked();
}
inline bool columnmsg::toplinked() const {
  // @@protoc_insertion_point(field_get:columnmsg.toplinked)
  return toplinked_;
}
inline void columnmsg::set_toplinked(bool value) {
  set_has_toplinked();
  toplinked_ = value;
  // @@protoc_insertion_point(field_set:columnmsg.toplinked)
}

// -------------------------------------------------------------------

// storymsg

// required double height = 1;
inline bool storymsg::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void storymsg::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void storymsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void storymsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double storymsg::height() const {
  // @@protoc_insertion_point(field_get:storymsg.height)
  return height_;
}
inline void storymsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:storymsg.height)
}

// required string name = 2;
inline bool storymsg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void storymsg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void storymsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void storymsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& storymsg::name() const {
  // @@protoc_insertion_point(field_get:storymsg.name)
  return *name_;
}
inline void storymsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:storymsg.name)
}
inline void storymsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:storymsg.name)
}
inline void storymsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storymsg.name)
}
inline ::std::string* storymsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:storymsg.name)
  return name_;
}
inline ::std::string* storymsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void storymsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:storymsg.name)
}

// -------------------------------------------------------------------

// storyinfo

// required bool exists = 1;
inline bool storyinfo::has_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void storyinfo::set_has_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void storyinfo::clear_has_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void storyinfo::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
inline bool storyinfo::exists() const {
  // @@protoc_insertion_point(field_get:storyinfo.exists)
  return exists_;
}
inline void storyinfo::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
  // @@protoc_insertion_point(field_set:storyinfo.exists)
}

// required int32 index = 2;
inline bool storyinfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void storyinfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void storyinfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void storyinfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 storyinfo::index() const {
  // @@protoc_insertion_point(field_get:storyinfo.index)
  return index_;
}
inline void storyinfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:storyinfo.index)
}

// required double level = 3;
inline bool storyinfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void storyinfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void storyinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void storyinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline double storyinfo::level() const {
  // @@protoc_insertion_point(field_get:storyinfo.level)
  return level_;
}
inline void storyinfo::set_level(double value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:storyinfo.level)
}

// required string name = 4;
inline bool storyinfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void storyinfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void storyinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void storyinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& storyinfo::name() const {
  // @@protoc_insertion_point(field_get:storyinfo.name)
  return *name_;
}
inline void storyinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:storyinfo.name)
}
inline void storyinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:storyinfo.name)
}
inline void storyinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storyinfo.name)
}
inline ::std::string* storyinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:storyinfo.name)
  return name_;
}
inline ::std::string* storyinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void storyinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:storyinfo.name)
}

// -------------------------------------------------------------------

// upperlevelmsg

// required int32 index = 1;
inline bool upperlevelmsg::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upperlevelmsg::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upperlevelmsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upperlevelmsg::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 upperlevelmsg::index() const {
  // @@protoc_insertion_point(field_get:upperlevelmsg.index)
  return index_;
}
inline void upperlevelmsg::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:upperlevelmsg.index)
}

// required double height = 2;
inline bool upperlevelmsg::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upperlevelmsg::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upperlevelmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upperlevelmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double upperlevelmsg::height() const {
  // @@protoc_insertion_point(field_get:upperlevelmsg.height)
  return height_;
}
inline void upperlevelmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:upperlevelmsg.height)
}

// -------------------------------------------------------------------

// wallsfromslab

// required string guid = 1;
inline bool wallsfromslab::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wallsfromslab::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wallsfromslab::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wallsfromslab::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& wallsfromslab::guid() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.guid)
  return *guid_;
}
inline void wallsfromslab::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:wallsfromslab.guid)
}
inline void wallsfromslab::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallsfromslab.guid)
}
inline void wallsfromslab::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallsfromslab.guid)
}
inline ::std::string* wallsfromslab::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallsfromslab.guid)
  return guid_;
}
inline ::std::string* wallsfromslab::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallsfromslab::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallsfromslab.guid)
}

// required double height = 2;
inline bool wallsfromslab::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wallsfromslab::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wallsfromslab::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wallsfromslab::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double wallsfromslab::height() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.height)
  return height_;
}
inline void wallsfromslab::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:wallsfromslab.height)
}

// required string material = 3;
inline bool wallsfromslab::has_material() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wallsfromslab::set_has_material() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wallsfromslab::clear_has_material() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wallsfromslab::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& wallsfromslab::material() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.material)
  return *material_;
}
inline void wallsfromslab::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:wallsfromslab.material)
}
inline void wallsfromslab::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallsfromslab.material)
}
inline void wallsfromslab::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallsfromslab.material)
}
inline ::std::string* wallsfromslab::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallsfromslab.material)
  return material_;
}
inline ::std::string* wallsfromslab::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallsfromslab::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallsfromslab.material)
}

// required string type = 4;
inline bool wallsfromslab::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wallsfromslab::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wallsfromslab::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wallsfromslab::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& wallsfromslab::type() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.type)
  return *type_;
}
inline void wallsfromslab::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:wallsfromslab.type)
}
inline void wallsfromslab::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallsfromslab.type)
}
inline void wallsfromslab::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallsfromslab.type)
}
inline ::std::string* wallsfromslab::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallsfromslab.type)
  return type_;
}
inline ::std::string* wallsfromslab::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallsfromslab::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallsfromslab.type)
}

// required string referenceline = 5;
inline bool wallsfromslab::has_referenceline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wallsfromslab::set_has_referenceline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wallsfromslab::clear_has_referenceline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wallsfromslab::clear_referenceline() {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_->clear();
  }
  clear_has_referenceline();
}
inline const ::std::string& wallsfromslab::referenceline() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.referenceline)
  return *referenceline_;
}
inline void wallsfromslab::set_referenceline(const ::std::string& value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set:wallsfromslab.referenceline)
}
inline void wallsfromslab::set_referenceline(const char* value) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallsfromslab.referenceline)
}
inline void wallsfromslab::set_referenceline(const char* value, size_t size) {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  referenceline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallsfromslab.referenceline)
}
inline ::std::string* wallsfromslab::mutable_referenceline() {
  set_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referenceline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallsfromslab.referenceline)
  return referenceline_;
}
inline ::std::string* wallsfromslab::release_referenceline() {
  clear_has_referenceline();
  if (referenceline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = referenceline_;
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallsfromslab::set_allocated_referenceline(::std::string* referenceline) {
  if (referenceline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referenceline_;
  }
  if (referenceline) {
    set_has_referenceline();
    referenceline_ = referenceline;
  } else {
    clear_has_referenceline();
    referenceline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallsfromslab.referenceline)
}

// required double thickness = 6;
inline bool wallsfromslab::has_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wallsfromslab::set_has_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wallsfromslab::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wallsfromslab::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double wallsfromslab::thickness() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.thickness)
  return thickness_;
}
inline void wallsfromslab::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:wallsfromslab.thickness)
}

// optional string layer = 7;
inline bool wallsfromslab::has_layer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wallsfromslab::set_has_layer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wallsfromslab::clear_has_layer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wallsfromslab::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& wallsfromslab::layer() const {
  // @@protoc_insertion_point(field_get:wallsfromslab.layer)
  return *layer_;
}
inline void wallsfromslab::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:wallsfromslab.layer)
}
inline void wallsfromslab::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:wallsfromslab.layer)
}
inline void wallsfromslab::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallsfromslab.layer)
}
inline ::std::string* wallsfromslab::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wallsfromslab.layer)
  return layer_;
}
inline ::std::string* wallsfromslab::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wallsfromslab::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wallsfromslab.layer)
}

// -------------------------------------------------------------------

// columnsfromslab

// required string guid = 1;
inline bool columnsfromslab::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void columnsfromslab::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void columnsfromslab::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void columnsfromslab::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& columnsfromslab::guid() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.guid)
  return *guid_;
}
inline void columnsfromslab::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:columnsfromslab.guid)
}
inline void columnsfromslab::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:columnsfromslab.guid)
}
inline void columnsfromslab::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnsfromslab.guid)
}
inline ::std::string* columnsfromslab::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:columnsfromslab.guid)
  return guid_;
}
inline ::std::string* columnsfromslab::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void columnsfromslab::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:columnsfromslab.guid)
}

// required double height = 2;
inline bool columnsfromslab::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void columnsfromslab::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void columnsfromslab::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void columnsfromslab::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double columnsfromslab::height() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.height)
  return height_;
}
inline void columnsfromslab::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:columnsfromslab.height)
}

// required string material = 3;
inline bool columnsfromslab::has_material() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void columnsfromslab::set_has_material() {
  _has_bits_[0] |= 0x00000004u;
}
inline void columnsfromslab::clear_has_material() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void columnsfromslab::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& columnsfromslab::material() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.material)
  return *material_;
}
inline void columnsfromslab::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:columnsfromslab.material)
}
inline void columnsfromslab::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:columnsfromslab.material)
}
inline void columnsfromslab::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnsfromslab.material)
}
inline ::std::string* columnsfromslab::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:columnsfromslab.material)
  return material_;
}
inline ::std::string* columnsfromslab::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void columnsfromslab::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:columnsfromslab.material)
}

// required double depth = 4;
inline bool columnsfromslab::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void columnsfromslab::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void columnsfromslab::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void columnsfromslab::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline double columnsfromslab::depth() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.depth)
  return depth_;
}
inline void columnsfromslab::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:columnsfromslab.depth)
}

// required double width = 5;
inline bool columnsfromslab::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void columnsfromslab::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void columnsfromslab::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void columnsfromslab::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double columnsfromslab::width() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.width)
  return width_;
}
inline void columnsfromslab::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:columnsfromslab.width)
}

// required bool circlebased = 6;
inline bool columnsfromslab::has_circlebased() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void columnsfromslab::set_has_circlebased() {
  _has_bits_[0] |= 0x00000020u;
}
inline void columnsfromslab::clear_has_circlebased() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void columnsfromslab::clear_circlebased() {
  circlebased_ = false;
  clear_has_circlebased();
}
inline bool columnsfromslab::circlebased() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.circlebased)
  return circlebased_;
}
inline void columnsfromslab::set_circlebased(bool value) {
  set_has_circlebased();
  circlebased_ = value;
  // @@protoc_insertion_point(field_set:columnsfromslab.circlebased)
}

// optional string layer = 7;
inline bool columnsfromslab::has_layer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void columnsfromslab::set_has_layer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void columnsfromslab::clear_has_layer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void columnsfromslab::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& columnsfromslab::layer() const {
  // @@protoc_insertion_point(field_get:columnsfromslab.layer)
  return *layer_;
}
inline void columnsfromslab::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:columnsfromslab.layer)
}
inline void columnsfromslab::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:columnsfromslab.layer)
}
inline void columnsfromslab::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnsfromslab.layer)
}
inline ::std::string* columnsfromslab::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:columnsfromslab.layer)
  return layer_;
}
inline ::std::string* columnsfromslab::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void columnsfromslab::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:columnsfromslab.layer)
}

// -------------------------------------------------------------------

// stairsmsg

// required string name = 1;
inline bool stairsmsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stairsmsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stairsmsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stairsmsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stairsmsg::name() const {
  // @@protoc_insertion_point(field_get:stairsmsg.name)
  return *name_;
}
inline void stairsmsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:stairsmsg.name)
}
inline void stairsmsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:stairsmsg.name)
}
inline void stairsmsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stairsmsg.name)
}
inline ::std::string* stairsmsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stairsmsg.name)
  return name_;
}
inline ::std::string* stairsmsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stairsmsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stairsmsg.name)
}

// required double posx = 2;
inline bool stairsmsg::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stairsmsg::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stairsmsg::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stairsmsg::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline double stairsmsg::posx() const {
  // @@protoc_insertion_point(field_get:stairsmsg.posx)
  return posx_;
}
inline void stairsmsg::set_posx(double value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.posx)
}

// required double posy = 3;
inline bool stairsmsg::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stairsmsg::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stairsmsg::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stairsmsg::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline double stairsmsg::posy() const {
  // @@protoc_insertion_point(field_get:stairsmsg.posy)
  return posy_;
}
inline void stairsmsg::set_posy(double value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.posy)
}

// required double xratio = 4;
inline bool stairsmsg::has_xratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stairsmsg::set_has_xratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stairsmsg::clear_has_xratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stairsmsg::clear_xratio() {
  xratio_ = 0;
  clear_has_xratio();
}
inline double stairsmsg::xratio() const {
  // @@protoc_insertion_point(field_get:stairsmsg.xratio)
  return xratio_;
}
inline void stairsmsg::set_xratio(double value) {
  set_has_xratio();
  xratio_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.xratio)
}

// required double yratio = 5;
inline bool stairsmsg::has_yratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stairsmsg::set_has_yratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stairsmsg::clear_has_yratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stairsmsg::clear_yratio() {
  yratio_ = 0;
  clear_has_yratio();
}
inline double stairsmsg::yratio() const {
  // @@protoc_insertion_point(field_get:stairsmsg.yratio)
  return yratio_;
}
inline void stairsmsg::set_yratio(double value) {
  set_has_yratio();
  yratio_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.yratio)
}

// required double bottom = 6;
inline bool stairsmsg::has_bottom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stairsmsg::set_has_bottom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stairsmsg::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stairsmsg::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline double stairsmsg::bottom() const {
  // @@protoc_insertion_point(field_get:stairsmsg.bottom)
  return bottom_;
}
inline void stairsmsg::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.bottom)
}

// required double angle = 7;
inline bool stairsmsg::has_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stairsmsg::set_has_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stairsmsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stairsmsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double stairsmsg::angle() const {
  // @@protoc_insertion_point(field_get:stairsmsg.angle)
  return angle_;
}
inline void stairsmsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.angle)
}

// required int32 bottomindex = 8;
inline bool stairsmsg::has_bottomindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stairsmsg::set_has_bottomindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stairsmsg::clear_has_bottomindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stairsmsg::clear_bottomindex() {
  bottomindex_ = 0;
  clear_has_bottomindex();
}
inline ::google::protobuf::int32 stairsmsg::bottomindex() const {
  // @@protoc_insertion_point(field_get:stairsmsg.bottomindex)
  return bottomindex_;
}
inline void stairsmsg::set_bottomindex(::google::protobuf::int32 value) {
  set_has_bottomindex();
  bottomindex_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.bottomindex)
}

// required bool usexyfixsize = 9;
inline bool stairsmsg::has_usexyfixsize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stairsmsg::set_has_usexyfixsize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stairsmsg::clear_has_usexyfixsize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stairsmsg::clear_usexyfixsize() {
  usexyfixsize_ = false;
  clear_has_usexyfixsize();
}
inline bool stairsmsg::usexyfixsize() const {
  // @@protoc_insertion_point(field_get:stairsmsg.usexyfixsize)
  return usexyfixsize_;
}
inline void stairsmsg::set_usexyfixsize(bool value) {
  set_has_usexyfixsize();
  usexyfixsize_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.usexyfixsize)
}

// required .additionalparams params = 10;
inline bool stairsmsg::has_params() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stairsmsg::set_has_params() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stairsmsg::clear_has_params() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stairsmsg::clear_params() {
  if (params_ != NULL) params_->::additionalparams::Clear();
  clear_has_params();
}
inline const ::additionalparams& stairsmsg::params() const {
  // @@protoc_insertion_point(field_get:stairsmsg.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::additionalparams* stairsmsg::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::additionalparams;
  // @@protoc_insertion_point(field_mutable:stairsmsg.params)
  return params_;
}
inline ::additionalparams* stairsmsg::release_params() {
  clear_has_params();
  ::additionalparams* temp = params_;
  params_ = NULL;
  return temp;
}
inline void stairsmsg::set_allocated_params(::additionalparams* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:stairsmsg.params)
}

// optional string layer = 11;
inline bool stairsmsg::has_layer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stairsmsg::set_has_layer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stairsmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stairsmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& stairsmsg::layer() const {
  // @@protoc_insertion_point(field_get:stairsmsg.layer)
  return *layer_;
}
inline void stairsmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:stairsmsg.layer)
}
inline void stairsmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:stairsmsg.layer)
}
inline void stairsmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stairsmsg.layer)
}
inline ::std::string* stairsmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stairsmsg.layer)
  return layer_;
}
inline ::std::string* stairsmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stairsmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stairsmsg.layer)
}

// optional double height = 12;
inline bool stairsmsg::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stairsmsg::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stairsmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stairsmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double stairsmsg::height() const {
  // @@protoc_insertion_point(field_get:stairsmsg.height)
  return height_;
}
inline void stairsmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.height)
}

// optional int32 upperindex = 13;
inline bool stairsmsg::has_upperindex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stairsmsg::set_has_upperindex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stairsmsg::clear_has_upperindex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stairsmsg::clear_upperindex() {
  upperindex_ = 0;
  clear_has_upperindex();
}
inline ::google::protobuf::int32 stairsmsg::upperindex() const {
  // @@protoc_insertion_point(field_get:stairsmsg.upperindex)
  return upperindex_;
}
inline void stairsmsg::set_upperindex(::google::protobuf::int32 value) {
  set_has_upperindex();
  upperindex_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.upperindex)
}

// optional bool toplinked = 14;
inline bool stairsmsg::has_toplinked() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stairsmsg::set_has_toplinked() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stairsmsg::clear_has_toplinked() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stairsmsg::clear_toplinked() {
  toplinked_ = false;
  clear_has_toplinked();
}
inline bool stairsmsg::toplinked() const {
  // @@protoc_insertion_point(field_get:stairsmsg.toplinked)
  return toplinked_;
}
inline void stairsmsg::set_toplinked(bool value) {
  set_has_toplinked();
  toplinked_ = value;
  // @@protoc_insertion_point(field_set:stairsmsg.toplinked)
}

// -------------------------------------------------------------------

// roofmsg

// required double height = 1;
inline bool roofmsg::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roofmsg::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roofmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roofmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double roofmsg::height() const {
  // @@protoc_insertion_point(field_get:roofmsg.height)
  return height_;
}
inline void roofmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:roofmsg.height)
}

// required string material = 2;
inline bool roofmsg::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void roofmsg::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void roofmsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void roofmsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& roofmsg::material() const {
  // @@protoc_insertion_point(field_get:roofmsg.material)
  return *material_;
}
inline void roofmsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:roofmsg.material)
}
inline void roofmsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:roofmsg.material)
}
inline void roofmsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofmsg.material)
}
inline ::std::string* roofmsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roofmsg.material)
  return material_;
}
inline ::std::string* roofmsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void roofmsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roofmsg.material)
}

// required double thickness = 3;
inline bool roofmsg::has_thickness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void roofmsg::set_has_thickness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void roofmsg::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void roofmsg::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double roofmsg::thickness() const {
  // @@protoc_insertion_point(field_get:roofmsg.thickness)
  return thickness_;
}
inline void roofmsg::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:roofmsg.thickness)
}

// required string type = 4;
inline bool roofmsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void roofmsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void roofmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void roofmsg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& roofmsg::type() const {
  // @@protoc_insertion_point(field_get:roofmsg.type)
  return *type_;
}
inline void roofmsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:roofmsg.type)
}
inline void roofmsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:roofmsg.type)
}
inline void roofmsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofmsg.type)
}
inline ::std::string* roofmsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roofmsg.type)
  return type_;
}
inline ::std::string* roofmsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void roofmsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roofmsg.type)
}

// required int32 bottomlevel = 5;
inline bool roofmsg::has_bottomlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void roofmsg::set_has_bottomlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void roofmsg::clear_has_bottomlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void roofmsg::clear_bottomlevel() {
  bottomlevel_ = 0;
  clear_has_bottomlevel();
}
inline ::google::protobuf::int32 roofmsg::bottomlevel() const {
  // @@protoc_insertion_point(field_get:roofmsg.bottomlevel)
  return bottomlevel_;
}
inline void roofmsg::set_bottomlevel(::google::protobuf::int32 value) {
  set_has_bottomlevel();
  bottomlevel_ = value;
  // @@protoc_insertion_point(field_set:roofmsg.bottomlevel)
}

// optional string layer = 6;
inline bool roofmsg::has_layer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void roofmsg::set_has_layer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void roofmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void roofmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& roofmsg::layer() const {
  // @@protoc_insertion_point(field_get:roofmsg.layer)
  return *layer_;
}
inline void roofmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:roofmsg.layer)
}
inline void roofmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:roofmsg.layer)
}
inline void roofmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofmsg.layer)
}
inline ::std::string* roofmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roofmsg.layer)
  return layer_;
}
inline ::std::string* roofmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void roofmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roofmsg.layer)
}

// -------------------------------------------------------------------

// holemsg

// required string guid = 1;
inline bool holemsg::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void holemsg::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void holemsg::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void holemsg::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& holemsg::guid() const {
  // @@protoc_insertion_point(field_get:holemsg.guid)
  return *guid_;
}
inline void holemsg::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:holemsg.guid)
}
inline void holemsg::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:holemsg.guid)
}
inline void holemsg::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:holemsg.guid)
}
inline ::std::string* holemsg::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:holemsg.guid)
  return guid_;
}
inline ::std::string* holemsg::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void holemsg::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:holemsg.guid)
}

// optional .pointsmessage pts = 2;
inline bool holemsg::has_pts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void holemsg::set_has_pts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void holemsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void holemsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& holemsg::pts() const {
  // @@protoc_insertion_point(field_get:holemsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* holemsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:holemsg.pts)
  return pts_;
}
inline ::pointsmessage* holemsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void holemsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:holemsg.pts)
}

// optional .polyarcsmessage arcs = 3;
inline bool holemsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void holemsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void holemsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void holemsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& holemsg::arcs() const {
  // @@protoc_insertion_point(field_get:holemsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* holemsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:holemsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* holemsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void holemsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:holemsg.arcs)
}

// optional int32 type = 4;
inline bool holemsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void holemsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void holemsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void holemsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 holemsg::type() const {
  // @@protoc_insertion_point(field_get:holemsg.type)
  return type_;
}
inline void holemsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:holemsg.type)
}

// -------------------------------------------------------------------

// mirrormsg

// required string guid = 1;
inline bool mirrormsg::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mirrormsg::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mirrormsg::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mirrormsg::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& mirrormsg::guid() const {
  // @@protoc_insertion_point(field_get:mirrormsg.guid)
  return *guid_;
}
inline void mirrormsg::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:mirrormsg.guid)
}
inline void mirrormsg::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mirrormsg.guid)
}
inline void mirrormsg::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mirrormsg.guid)
}
inline ::std::string* mirrormsg::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mirrormsg.guid)
  return guid_;
}
inline ::std::string* mirrormsg::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mirrormsg::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mirrormsg.guid)
}

// required string axis = 2;
inline bool mirrormsg::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mirrormsg::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mirrormsg::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mirrormsg::clear_axis() {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_->clear();
  }
  clear_has_axis();
}
inline const ::std::string& mirrormsg::axis() const {
  // @@protoc_insertion_point(field_get:mirrormsg.axis)
  return *axis_;
}
inline void mirrormsg::set_axis(const ::std::string& value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set:mirrormsg.axis)
}
inline void mirrormsg::set_axis(const char* value) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(value);
  // @@protoc_insertion_point(field_set_char:mirrormsg.axis)
}
inline void mirrormsg::set_axis(const char* value, size_t size) {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  axis_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mirrormsg.axis)
}
inline ::std::string* mirrormsg::mutable_axis() {
  set_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    axis_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mirrormsg.axis)
  return axis_;
}
inline ::std::string* mirrormsg::release_axis() {
  clear_has_axis();
  if (axis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = axis_;
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mirrormsg::set_allocated_axis(::std::string* axis) {
  if (axis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete axis_;
  }
  if (axis) {
    set_has_axis();
    axis_ = axis;
  } else {
    clear_has_axis();
    axis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mirrormsg.axis)
}

// required bool copy = 3;
inline bool mirrormsg::has_copy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mirrormsg::set_has_copy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mirrormsg::clear_has_copy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mirrormsg::clear_copy() {
  copy_ = false;
  clear_has_copy();
}
inline bool mirrormsg::copy() const {
  // @@protoc_insertion_point(field_get:mirrormsg.copy)
  return copy_;
}
inline void mirrormsg::set_copy(bool value) {
  set_has_copy();
  copy_ = value;
  // @@protoc_insertion_point(field_set:mirrormsg.copy)
}

// -------------------------------------------------------------------

// morphmsg

// required double refx = 1;
inline bool morphmsg::has_refx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void morphmsg::set_has_refx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void morphmsg::clear_has_refx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void morphmsg::clear_refx() {
  refx_ = 0;
  clear_has_refx();
}
inline double morphmsg::refx() const {
  // @@protoc_insertion_point(field_get:morphmsg.refx)
  return refx_;
}
inline void morphmsg::set_refx(double value) {
  set_has_refx();
  refx_ = value;
  // @@protoc_insertion_point(field_set:morphmsg.refx)
}

// required double refy = 2;
inline bool morphmsg::has_refy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void morphmsg::set_has_refy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void morphmsg::clear_has_refy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void morphmsg::clear_refy() {
  refy_ = 0;
  clear_has_refy();
}
inline double morphmsg::refy() const {
  // @@protoc_insertion_point(field_get:morphmsg.refy)
  return refy_;
}
inline void morphmsg::set_refy(double value) {
  set_has_refy();
  refy_ = value;
  // @@protoc_insertion_point(field_set:morphmsg.refy)
}

// required double refz = 3;
inline bool morphmsg::has_refz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void morphmsg::set_has_refz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void morphmsg::clear_has_refz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void morphmsg::clear_refz() {
  refz_ = 0;
  clear_has_refz();
}
inline double morphmsg::refz() const {
  // @@protoc_insertion_point(field_get:morphmsg.refz)
  return refz_;
}
inline void morphmsg::set_refz(double value) {
  set_has_refz();
  refz_ = value;
  // @@protoc_insertion_point(field_set:morphmsg.refz)
}

// optional .pointsmessage pts = 4;
inline bool morphmsg::has_pts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void morphmsg::set_has_pts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void morphmsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void morphmsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& morphmsg::pts() const {
  // @@protoc_insertion_point(field_get:morphmsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* morphmsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:morphmsg.pts)
  return pts_;
}
inline ::pointsmessage* morphmsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void morphmsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:morphmsg.pts)
}

// optional .pointsmessage edges = 5;
inline bool morphmsg::has_edges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void morphmsg::set_has_edges() {
  _has_bits_[0] |= 0x00000010u;
}
inline void morphmsg::clear_has_edges() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void morphmsg::clear_edges() {
  if (edges_ != NULL) edges_->::pointsmessage::Clear();
  clear_has_edges();
}
inline const ::pointsmessage& morphmsg::edges() const {
  // @@protoc_insertion_point(field_get:morphmsg.edges)
  return edges_ != NULL ? *edges_ : *default_instance_->edges_;
}
inline ::pointsmessage* morphmsg::mutable_edges() {
  set_has_edges();
  if (edges_ == NULL) edges_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:morphmsg.edges)
  return edges_;
}
inline ::pointsmessage* morphmsg::release_edges() {
  clear_has_edges();
  ::pointsmessage* temp = edges_;
  edges_ = NULL;
  return temp;
}
inline void morphmsg::set_allocated_edges(::pointsmessage* edges) {
  delete edges_;
  edges_ = edges;
  if (edges) {
    set_has_edges();
  } else {
    clear_has_edges();
  }
  // @@protoc_insertion_point(field_set_allocated:morphmsg.edges)
}

// optional .pointsmessage polygons = 6;
inline bool morphmsg::has_polygons() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void morphmsg::set_has_polygons() {
  _has_bits_[0] |= 0x00000020u;
}
inline void morphmsg::clear_has_polygons() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void morphmsg::clear_polygons() {
  if (polygons_ != NULL) polygons_->::pointsmessage::Clear();
  clear_has_polygons();
}
inline const ::pointsmessage& morphmsg::polygons() const {
  // @@protoc_insertion_point(field_get:morphmsg.polygons)
  return polygons_ != NULL ? *polygons_ : *default_instance_->polygons_;
}
inline ::pointsmessage* morphmsg::mutable_polygons() {
  set_has_polygons();
  if (polygons_ == NULL) polygons_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:morphmsg.polygons)
  return polygons_;
}
inline ::pointsmessage* morphmsg::release_polygons() {
  clear_has_polygons();
  ::pointsmessage* temp = polygons_;
  polygons_ = NULL;
  return temp;
}
inline void morphmsg::set_allocated_polygons(::pointsmessage* polygons) {
  delete polygons_;
  polygons_ = polygons;
  if (polygons) {
    set_has_polygons();
  } else {
    clear_has_polygons();
  }
  // @@protoc_insertion_point(field_set_allocated:morphmsg.polygons)
}

// optional .intlistmsg sizespolygons = 7;
inline bool morphmsg::has_sizespolygons() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void morphmsg::set_has_sizespolygons() {
  _has_bits_[0] |= 0x00000040u;
}
inline void morphmsg::clear_has_sizespolygons() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void morphmsg::clear_sizespolygons() {
  if (sizespolygons_ != NULL) sizespolygons_->::intlistmsg::Clear();
  clear_has_sizespolygons();
}
inline const ::intlistmsg& morphmsg::sizespolygons() const {
  // @@protoc_insertion_point(field_get:morphmsg.sizespolygons)
  return sizespolygons_ != NULL ? *sizespolygons_ : *default_instance_->sizespolygons_;
}
inline ::intlistmsg* morphmsg::mutable_sizespolygons() {
  set_has_sizespolygons();
  if (sizespolygons_ == NULL) sizespolygons_ = new ::intlistmsg;
  // @@protoc_insertion_point(field_mutable:morphmsg.sizespolygons)
  return sizespolygons_;
}
inline ::intlistmsg* morphmsg::release_sizespolygons() {
  clear_has_sizespolygons();
  ::intlistmsg* temp = sizespolygons_;
  sizespolygons_ = NULL;
  return temp;
}
inline void morphmsg::set_allocated_sizespolygons(::intlistmsg* sizespolygons) {
  delete sizespolygons_;
  sizespolygons_ = sizespolygons;
  if (sizespolygons) {
    set_has_sizespolygons();
  } else {
    clear_has_sizespolygons();
  }
  // @@protoc_insertion_point(field_set_allocated:morphmsg.sizespolygons)
}

// required string material = 8;
inline bool morphmsg::has_material() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void morphmsg::set_has_material() {
  _has_bits_[0] |= 0x00000080u;
}
inline void morphmsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void morphmsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& morphmsg::material() const {
  // @@protoc_insertion_point(field_get:morphmsg.material)
  return *material_;
}
inline void morphmsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:morphmsg.material)
}
inline void morphmsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:morphmsg.material)
}
inline void morphmsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:morphmsg.material)
}
inline ::std::string* morphmsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:morphmsg.material)
  return material_;
}
inline ::std::string* morphmsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void morphmsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:morphmsg.material)
}

// required int32 level = 9;
inline bool morphmsg::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void morphmsg::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void morphmsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void morphmsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 morphmsg::level() const {
  // @@protoc_insertion_point(field_get:morphmsg.level)
  return level_;
}
inline void morphmsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:morphmsg.level)
}

// -------------------------------------------------------------------

// boxmsg

// required double x1 = 1;
inline bool boxmsg::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boxmsg::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boxmsg::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boxmsg::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline double boxmsg::x1() const {
  // @@protoc_insertion_point(field_get:boxmsg.x1)
  return x1_;
}
inline void boxmsg::set_x1(double value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.x1)
}

// required double y1 = 2;
inline bool boxmsg::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void boxmsg::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void boxmsg::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void boxmsg::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline double boxmsg::y1() const {
  // @@protoc_insertion_point(field_get:boxmsg.y1)
  return y1_;
}
inline void boxmsg::set_y1(double value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.y1)
}

// required double z1 = 3;
inline bool boxmsg::has_z1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void boxmsg::set_has_z1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void boxmsg::clear_has_z1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void boxmsg::clear_z1() {
  z1_ = 0;
  clear_has_z1();
}
inline double boxmsg::z1() const {
  // @@protoc_insertion_point(field_get:boxmsg.z1)
  return z1_;
}
inline void boxmsg::set_z1(double value) {
  set_has_z1();
  z1_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.z1)
}

// required double x2 = 4;
inline bool boxmsg::has_x2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void boxmsg::set_has_x2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void boxmsg::clear_has_x2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void boxmsg::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline double boxmsg::x2() const {
  // @@protoc_insertion_point(field_get:boxmsg.x2)
  return x2_;
}
inline void boxmsg::set_x2(double value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.x2)
}

// required double y2 = 5;
inline bool boxmsg::has_y2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void boxmsg::set_has_y2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void boxmsg::clear_has_y2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void boxmsg::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
inline double boxmsg::y2() const {
  // @@protoc_insertion_point(field_get:boxmsg.y2)
  return y2_;
}
inline void boxmsg::set_y2(double value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.y2)
}

// required double z2 = 6;
inline bool boxmsg::has_z2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void boxmsg::set_has_z2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void boxmsg::clear_has_z2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void boxmsg::clear_z2() {
  z2_ = 0;
  clear_has_z2();
}
inline double boxmsg::z2() const {
  // @@protoc_insertion_point(field_get:boxmsg.z2)
  return z2_;
}
inline void boxmsg::set_z2(double value) {
  set_has_z2();
  z2_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.z2)
}

// required int32 bottomlevel = 7;
inline bool boxmsg::has_bottomlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void boxmsg::set_has_bottomlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void boxmsg::clear_has_bottomlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void boxmsg::clear_bottomlevel() {
  bottomlevel_ = 0;
  clear_has_bottomlevel();
}
inline ::google::protobuf::int32 boxmsg::bottomlevel() const {
  // @@protoc_insertion_point(field_get:boxmsg.bottomlevel)
  return bottomlevel_;
}
inline void boxmsg::set_bottomlevel(::google::protobuf::int32 value) {
  set_has_bottomlevel();
  bottomlevel_ = value;
  // @@protoc_insertion_point(field_set:boxmsg.bottomlevel)
}

// -------------------------------------------------------------------

// wallinfo

// repeated double thickness = 1;
inline int wallinfo::thickness_size() const {
  return thickness_.size();
}
inline void wallinfo::clear_thickness() {
  thickness_.Clear();
}
inline double wallinfo::thickness(int index) const {
  // @@protoc_insertion_point(field_get:wallinfo.thickness)
  return thickness_.Get(index);
}
inline void wallinfo::set_thickness(int index, double value) {
  thickness_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallinfo.thickness)
}
inline void wallinfo::add_thickness(double value) {
  thickness_.Add(value);
  // @@protoc_insertion_point(field_add:wallinfo.thickness)
}
inline const ::google::protobuf::RepeatedField< double >&
wallinfo::thickness() const {
  // @@protoc_insertion_point(field_list:wallinfo.thickness)
  return thickness_;
}
inline ::google::protobuf::RepeatedField< double >*
wallinfo::mutable_thickness() {
  // @@protoc_insertion_point(field_mutable_list:wallinfo.thickness)
  return &thickness_;
}

// repeated double length = 2;
inline int wallinfo::length_size() const {
  return length_.size();
}
inline void wallinfo::clear_length() {
  length_.Clear();
}
inline double wallinfo::length(int index) const {
  // @@protoc_insertion_point(field_get:wallinfo.length)
  return length_.Get(index);
}
inline void wallinfo::set_length(int index, double value) {
  length_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallinfo.length)
}
inline void wallinfo::add_length(double value) {
  length_.Add(value);
  // @@protoc_insertion_point(field_add:wallinfo.length)
}
inline const ::google::protobuf::RepeatedField< double >&
wallinfo::length() const {
  // @@protoc_insertion_point(field_list:wallinfo.length)
  return length_;
}
inline ::google::protobuf::RepeatedField< double >*
wallinfo::mutable_length() {
  // @@protoc_insertion_point(field_mutable_list:wallinfo.length)
  return &length_;
}

// repeated double height = 3;
inline int wallinfo::height_size() const {
  return height_.size();
}
inline void wallinfo::clear_height() {
  height_.Clear();
}
inline double wallinfo::height(int index) const {
  // @@protoc_insertion_point(field_get:wallinfo.height)
  return height_.Get(index);
}
inline void wallinfo::set_height(int index, double value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallinfo.height)
}
inline void wallinfo::add_height(double value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:wallinfo.height)
}
inline const ::google::protobuf::RepeatedField< double >&
wallinfo::height() const {
  // @@protoc_insertion_point(field_list:wallinfo.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< double >*
wallinfo::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:wallinfo.height)
  return &height_;
}

// repeated double volume = 4;
inline int wallinfo::volume_size() const {
  return volume_.size();
}
inline void wallinfo::clear_volume() {
  volume_.Clear();
}
inline double wallinfo::volume(int index) const {
  // @@protoc_insertion_point(field_get:wallinfo.volume)
  return volume_.Get(index);
}
inline void wallinfo::set_volume(int index, double value) {
  volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallinfo.volume)
}
inline void wallinfo::add_volume(double value) {
  volume_.Add(value);
  // @@protoc_insertion_point(field_add:wallinfo.volume)
}
inline const ::google::protobuf::RepeatedField< double >&
wallinfo::volume() const {
  // @@protoc_insertion_point(field_list:wallinfo.volume)
  return volume_;
}
inline ::google::protobuf::RepeatedField< double >*
wallinfo::mutable_volume() {
  // @@protoc_insertion_point(field_mutable_list:wallinfo.volume)
  return &volume_;
}

// -------------------------------------------------------------------

// wallrepeated

// repeated double p0x = 1;
inline int wallrepeated::p0x_size() const {
  return p0x_.size();
}
inline void wallrepeated::clear_p0x() {
  p0x_.Clear();
}
inline double wallrepeated::p0x(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.p0x)
  return p0x_.Get(index);
}
inline void wallrepeated::set_p0x(int index, double value) {
  p0x_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.p0x)
}
inline void wallrepeated::add_p0x(double value) {
  p0x_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.p0x)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::p0x() const {
  // @@protoc_insertion_point(field_list:wallrepeated.p0x)
  return p0x_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_p0x() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.p0x)
  return &p0x_;
}

// repeated double p0y = 2;
inline int wallrepeated::p0y_size() const {
  return p0y_.size();
}
inline void wallrepeated::clear_p0y() {
  p0y_.Clear();
}
inline double wallrepeated::p0y(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.p0y)
  return p0y_.Get(index);
}
inline void wallrepeated::set_p0y(int index, double value) {
  p0y_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.p0y)
}
inline void wallrepeated::add_p0y(double value) {
  p0y_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.p0y)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::p0y() const {
  // @@protoc_insertion_point(field_list:wallrepeated.p0y)
  return p0y_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_p0y() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.p0y)
  return &p0y_;
}

// repeated double p1x = 3;
inline int wallrepeated::p1x_size() const {
  return p1x_.size();
}
inline void wallrepeated::clear_p1x() {
  p1x_.Clear();
}
inline double wallrepeated::p1x(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.p1x)
  return p1x_.Get(index);
}
inline void wallrepeated::set_p1x(int index, double value) {
  p1x_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.p1x)
}
inline void wallrepeated::add_p1x(double value) {
  p1x_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.p1x)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::p1x() const {
  // @@protoc_insertion_point(field_list:wallrepeated.p1x)
  return p1x_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_p1x() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.p1x)
  return &p1x_;
}

// repeated double p1y = 4;
inline int wallrepeated::p1y_size() const {
  return p1y_.size();
}
inline void wallrepeated::clear_p1y() {
  p1y_.Clear();
}
inline double wallrepeated::p1y(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.p1y)
  return p1y_.Get(index);
}
inline void wallrepeated::set_p1y(int index, double value) {
  p1y_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.p1y)
}
inline void wallrepeated::add_p1y(double value) {
  p1y_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.p1y)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::p1y() const {
  // @@protoc_insertion_point(field_list:wallrepeated.p1y)
  return p1y_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_p1y() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.p1y)
  return &p1y_;
}

// repeated .storyinfo bottomlevel = 5;
inline int wallrepeated::bottomlevel_size() const {
  return bottomlevel_.size();
}
inline void wallrepeated::clear_bottomlevel() {
  bottomlevel_.Clear();
}
inline const ::storyinfo& wallrepeated::bottomlevel(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.bottomlevel)
  return bottomlevel_.Get(index);
}
inline ::storyinfo* wallrepeated::mutable_bottomlevel(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.bottomlevel)
  return bottomlevel_.Mutable(index);
}
inline ::storyinfo* wallrepeated::add_bottomlevel() {
  // @@protoc_insertion_point(field_add:wallrepeated.bottomlevel)
  return bottomlevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
wallrepeated::bottomlevel() const {
  // @@protoc_insertion_point(field_list:wallrepeated.bottomlevel)
  return bottomlevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
wallrepeated::mutable_bottomlevel() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.bottomlevel)
  return &bottomlevel_;
}

// repeated double thickness = 6;
inline int wallrepeated::thickness_size() const {
  return thickness_.size();
}
inline void wallrepeated::clear_thickness() {
  thickness_.Clear();
}
inline double wallrepeated::thickness(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.thickness)
  return thickness_.Get(index);
}
inline void wallrepeated::set_thickness(int index, double value) {
  thickness_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.thickness)
}
inline void wallrepeated::add_thickness(double value) {
  thickness_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.thickness)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::thickness() const {
  // @@protoc_insertion_point(field_list:wallrepeated.thickness)
  return thickness_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_thickness() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.thickness)
  return &thickness_;
}

// repeated double angle = 7;
inline int wallrepeated::angle_size() const {
  return angle_.size();
}
inline void wallrepeated::clear_angle() {
  angle_.Clear();
}
inline double wallrepeated::angle(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.angle)
  return angle_.Get(index);
}
inline void wallrepeated::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.angle)
}
inline void wallrepeated::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.angle)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::angle() const {
  // @@protoc_insertion_point(field_list:wallrepeated.angle)
  return angle_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.angle)
  return &angle_;
}

// repeated .storyinfo toplevel = 8;
inline int wallrepeated::toplevel_size() const {
  return toplevel_.size();
}
inline void wallrepeated::clear_toplevel() {
  toplevel_.Clear();
}
inline const ::storyinfo& wallrepeated::toplevel(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.toplevel)
  return toplevel_.Get(index);
}
inline ::storyinfo* wallrepeated::mutable_toplevel(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.toplevel)
  return toplevel_.Mutable(index);
}
inline ::storyinfo* wallrepeated::add_toplevel() {
  // @@protoc_insertion_point(field_add:wallrepeated.toplevel)
  return toplevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
wallrepeated::toplevel() const {
  // @@protoc_insertion_point(field_list:wallrepeated.toplevel)
  return toplevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
wallrepeated::mutable_toplevel() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.toplevel)
  return &toplevel_;
}

// repeated string material = 9;
inline int wallrepeated::material_size() const {
  return material_.size();
}
inline void wallrepeated::clear_material() {
  material_.Clear();
}
inline const ::std::string& wallrepeated::material(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.material)
  return material_.Get(index);
}
inline ::std::string* wallrepeated::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.material)
  return material_.Mutable(index);
}
inline void wallrepeated::set_material(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wallrepeated.material)
  material_.Mutable(index)->assign(value);
}
inline void wallrepeated::set_material(int index, const char* value) {
  material_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wallrepeated.material)
}
inline void wallrepeated::set_material(int index, const char* value, size_t size) {
  material_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallrepeated.material)
}
inline ::std::string* wallrepeated::add_material() {
  return material_.Add();
}
inline void wallrepeated::add_material(const ::std::string& value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wallrepeated.material)
}
inline void wallrepeated::add_material(const char* value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wallrepeated.material)
}
inline void wallrepeated::add_material(const char* value, size_t size) {
  material_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wallrepeated.material)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wallrepeated::material() const {
  // @@protoc_insertion_point(field_list:wallrepeated.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wallrepeated::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.material)
  return &material_;
}

// repeated string type = 10;
inline int wallrepeated::type_size() const {
  return type_.size();
}
inline void wallrepeated::clear_type() {
  type_.Clear();
}
inline const ::std::string& wallrepeated::type(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.type)
  return type_.Get(index);
}
inline ::std::string* wallrepeated::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.type)
  return type_.Mutable(index);
}
inline void wallrepeated::set_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wallrepeated.type)
  type_.Mutable(index)->assign(value);
}
inline void wallrepeated::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wallrepeated.type)
}
inline void wallrepeated::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallrepeated.type)
}
inline ::std::string* wallrepeated::add_type() {
  return type_.Add();
}
inline void wallrepeated::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wallrepeated.type)
}
inline void wallrepeated::add_type(const char* value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wallrepeated.type)
}
inline void wallrepeated::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wallrepeated.type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wallrepeated::type() const {
  // @@protoc_insertion_point(field_list:wallrepeated.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wallrepeated::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.type)
  return &type_;
}

// repeated string referenceline = 11;
inline int wallrepeated::referenceline_size() const {
  return referenceline_.size();
}
inline void wallrepeated::clear_referenceline() {
  referenceline_.Clear();
}
inline const ::std::string& wallrepeated::referenceline(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.referenceline)
  return referenceline_.Get(index);
}
inline ::std::string* wallrepeated::mutable_referenceline(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.referenceline)
  return referenceline_.Mutable(index);
}
inline void wallrepeated::set_referenceline(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wallrepeated.referenceline)
  referenceline_.Mutable(index)->assign(value);
}
inline void wallrepeated::set_referenceline(int index, const char* value) {
  referenceline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wallrepeated.referenceline)
}
inline void wallrepeated::set_referenceline(int index, const char* value, size_t size) {
  referenceline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallrepeated.referenceline)
}
inline ::std::string* wallrepeated::add_referenceline() {
  return referenceline_.Add();
}
inline void wallrepeated::add_referenceline(const ::std::string& value) {
  referenceline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wallrepeated.referenceline)
}
inline void wallrepeated::add_referenceline(const char* value) {
  referenceline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wallrepeated.referenceline)
}
inline void wallrepeated::add_referenceline(const char* value, size_t size) {
  referenceline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wallrepeated.referenceline)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wallrepeated::referenceline() const {
  // @@protoc_insertion_point(field_list:wallrepeated.referenceline)
  return referenceline_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wallrepeated::mutable_referenceline() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.referenceline)
  return &referenceline_;
}

// repeated double alphaangle = 12;
inline int wallrepeated::alphaangle_size() const {
  return alphaangle_.size();
}
inline void wallrepeated::clear_alphaangle() {
  alphaangle_.Clear();
}
inline double wallrepeated::alphaangle(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.alphaangle)
  return alphaangle_.Get(index);
}
inline void wallrepeated::set_alphaangle(int index, double value) {
  alphaangle_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.alphaangle)
}
inline void wallrepeated::add_alphaangle(double value) {
  alphaangle_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.alphaangle)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::alphaangle() const {
  // @@protoc_insertion_point(field_list:wallrepeated.alphaangle)
  return alphaangle_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_alphaangle() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.alphaangle)
  return &alphaangle_;
}

// repeated double betaangle = 13;
inline int wallrepeated::betaangle_size() const {
  return betaangle_.size();
}
inline void wallrepeated::clear_betaangle() {
  betaangle_.Clear();
}
inline double wallrepeated::betaangle(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.betaangle)
  return betaangle_.Get(index);
}
inline void wallrepeated::set_betaangle(int index, double value) {
  betaangle_.Set(index, value);
  // @@protoc_insertion_point(field_set:wallrepeated.betaangle)
}
inline void wallrepeated::add_betaangle(double value) {
  betaangle_.Add(value);
  // @@protoc_insertion_point(field_add:wallrepeated.betaangle)
}
inline const ::google::protobuf::RepeatedField< double >&
wallrepeated::betaangle() const {
  // @@protoc_insertion_point(field_list:wallrepeated.betaangle)
  return betaangle_;
}
inline ::google::protobuf::RepeatedField< double >*
wallrepeated::mutable_betaangle() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.betaangle)
  return &betaangle_;
}

// repeated string typeprofile = 14;
inline int wallrepeated::typeprofile_size() const {
  return typeprofile_.size();
}
inline void wallrepeated::clear_typeprofile() {
  typeprofile_.Clear();
}
inline const ::std::string& wallrepeated::typeprofile(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.typeprofile)
  return typeprofile_.Get(index);
}
inline ::std::string* wallrepeated::mutable_typeprofile(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.typeprofile)
  return typeprofile_.Mutable(index);
}
inline void wallrepeated::set_typeprofile(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wallrepeated.typeprofile)
  typeprofile_.Mutable(index)->assign(value);
}
inline void wallrepeated::set_typeprofile(int index, const char* value) {
  typeprofile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wallrepeated.typeprofile)
}
inline void wallrepeated::set_typeprofile(int index, const char* value, size_t size) {
  typeprofile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallrepeated.typeprofile)
}
inline ::std::string* wallrepeated::add_typeprofile() {
  return typeprofile_.Add();
}
inline void wallrepeated::add_typeprofile(const ::std::string& value) {
  typeprofile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wallrepeated.typeprofile)
}
inline void wallrepeated::add_typeprofile(const char* value) {
  typeprofile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wallrepeated.typeprofile)
}
inline void wallrepeated::add_typeprofile(const char* value, size_t size) {
  typeprofile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wallrepeated.typeprofile)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wallrepeated::typeprofile() const {
  // @@protoc_insertion_point(field_list:wallrepeated.typeprofile)
  return typeprofile_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wallrepeated::mutable_typeprofile() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.typeprofile)
  return &typeprofile_;
}

// repeated string guid = 15;
inline int wallrepeated::guid_size() const {
  return guid_.size();
}
inline void wallrepeated::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& wallrepeated::guid(int index) const {
  // @@protoc_insertion_point(field_get:wallrepeated.guid)
  return guid_.Get(index);
}
inline ::std::string* wallrepeated::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:wallrepeated.guid)
  return guid_.Mutable(index);
}
inline void wallrepeated::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wallrepeated.guid)
  guid_.Mutable(index)->assign(value);
}
inline void wallrepeated::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wallrepeated.guid)
}
inline void wallrepeated::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wallrepeated.guid)
}
inline ::std::string* wallrepeated::add_guid() {
  return guid_.Add();
}
inline void wallrepeated::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wallrepeated.guid)
}
inline void wallrepeated::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wallrepeated.guid)
}
inline void wallrepeated::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wallrepeated.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wallrepeated::guid() const {
  // @@protoc_insertion_point(field_list:wallrepeated.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wallrepeated::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:wallrepeated.guid)
  return &guid_;
}

// -------------------------------------------------------------------

// slabrepeated

// repeated .pointsmessage points = 1;
inline int slabrepeated::points_size() const {
  return points_.size();
}
inline void slabrepeated::clear_points() {
  points_.Clear();
}
inline const ::pointsmessage& slabrepeated::points(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.points)
  return points_.Get(index);
}
inline ::pointsmessage* slabrepeated::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.points)
  return points_.Mutable(index);
}
inline ::pointsmessage* slabrepeated::add_points() {
  // @@protoc_insertion_point(field_add:slabrepeated.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pointsmessage >&
slabrepeated::points() const {
  // @@protoc_insertion_point(field_list:slabrepeated.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::pointsmessage >*
slabrepeated::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.points)
  return &points_;
}

// repeated .storyinfo bottomlevel = 2;
inline int slabrepeated::bottomlevel_size() const {
  return bottomlevel_.size();
}
inline void slabrepeated::clear_bottomlevel() {
  bottomlevel_.Clear();
}
inline const ::storyinfo& slabrepeated::bottomlevel(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.bottomlevel)
  return bottomlevel_.Get(index);
}
inline ::storyinfo* slabrepeated::mutable_bottomlevel(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.bottomlevel)
  return bottomlevel_.Mutable(index);
}
inline ::storyinfo* slabrepeated::add_bottomlevel() {
  // @@protoc_insertion_point(field_add:slabrepeated.bottomlevel)
  return bottomlevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
slabrepeated::bottomlevel() const {
  // @@protoc_insertion_point(field_list:slabrepeated.bottomlevel)
  return bottomlevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
slabrepeated::mutable_bottomlevel() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.bottomlevel)
  return &bottomlevel_;
}

// repeated double thickness = 3;
inline int slabrepeated::thickness_size() const {
  return thickness_.size();
}
inline void slabrepeated::clear_thickness() {
  thickness_.Clear();
}
inline double slabrepeated::thickness(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.thickness)
  return thickness_.Get(index);
}
inline void slabrepeated::set_thickness(int index, double value) {
  thickness_.Set(index, value);
  // @@protoc_insertion_point(field_set:slabrepeated.thickness)
}
inline void slabrepeated::add_thickness(double value) {
  thickness_.Add(value);
  // @@protoc_insertion_point(field_add:slabrepeated.thickness)
}
inline const ::google::protobuf::RepeatedField< double >&
slabrepeated::thickness() const {
  // @@protoc_insertion_point(field_list:slabrepeated.thickness)
  return thickness_;
}
inline ::google::protobuf::RepeatedField< double >*
slabrepeated::mutable_thickness() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.thickness)
  return &thickness_;
}

// repeated string material = 4;
inline int slabrepeated::material_size() const {
  return material_.size();
}
inline void slabrepeated::clear_material() {
  material_.Clear();
}
inline const ::std::string& slabrepeated::material(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.material)
  return material_.Get(index);
}
inline ::std::string* slabrepeated::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.material)
  return material_.Mutable(index);
}
inline void slabrepeated::set_material(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:slabrepeated.material)
  material_.Mutable(index)->assign(value);
}
inline void slabrepeated::set_material(int index, const char* value) {
  material_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:slabrepeated.material)
}
inline void slabrepeated::set_material(int index, const char* value, size_t size) {
  material_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabrepeated.material)
}
inline ::std::string* slabrepeated::add_material() {
  return material_.Add();
}
inline void slabrepeated::add_material(const ::std::string& value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:slabrepeated.material)
}
inline void slabrepeated::add_material(const char* value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:slabrepeated.material)
}
inline void slabrepeated::add_material(const char* value, size_t size) {
  material_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:slabrepeated.material)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
slabrepeated::material() const {
  // @@protoc_insertion_point(field_list:slabrepeated.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
slabrepeated::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.material)
  return &material_;
}

// repeated string type = 5;
inline int slabrepeated::type_size() const {
  return type_.size();
}
inline void slabrepeated::clear_type() {
  type_.Clear();
}
inline const ::std::string& slabrepeated::type(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.type)
  return type_.Get(index);
}
inline ::std::string* slabrepeated::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.type)
  return type_.Mutable(index);
}
inline void slabrepeated::set_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:slabrepeated.type)
  type_.Mutable(index)->assign(value);
}
inline void slabrepeated::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:slabrepeated.type)
}
inline void slabrepeated::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabrepeated.type)
}
inline ::std::string* slabrepeated::add_type() {
  return type_.Add();
}
inline void slabrepeated::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:slabrepeated.type)
}
inline void slabrepeated::add_type(const char* value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:slabrepeated.type)
}
inline void slabrepeated::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:slabrepeated.type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
slabrepeated::type() const {
  // @@protoc_insertion_point(field_list:slabrepeated.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
slabrepeated::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.type)
  return &type_;
}

// repeated string guid = 6;
inline int slabrepeated::guid_size() const {
  return guid_.size();
}
inline void slabrepeated::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& slabrepeated::guid(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.guid)
  return guid_.Get(index);
}
inline ::std::string* slabrepeated::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.guid)
  return guid_.Mutable(index);
}
inline void slabrepeated::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:slabrepeated.guid)
  guid_.Mutable(index)->assign(value);
}
inline void slabrepeated::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:slabrepeated.guid)
}
inline void slabrepeated::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:slabrepeated.guid)
}
inline ::std::string* slabrepeated::add_guid() {
  return guid_.Add();
}
inline void slabrepeated::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:slabrepeated.guid)
}
inline void slabrepeated::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:slabrepeated.guid)
}
inline void slabrepeated::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:slabrepeated.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
slabrepeated::guid() const {
  // @@protoc_insertion_point(field_list:slabrepeated.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
slabrepeated::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.guid)
  return &guid_;
}

// repeated .intlistmsg subpolygons = 7;
inline int slabrepeated::subpolygons_size() const {
  return subpolygons_.size();
}
inline void slabrepeated::clear_subpolygons() {
  subpolygons_.Clear();
}
inline const ::intlistmsg& slabrepeated::subpolygons(int index) const {
  // @@protoc_insertion_point(field_get:slabrepeated.subpolygons)
  return subpolygons_.Get(index);
}
inline ::intlistmsg* slabrepeated::mutable_subpolygons(int index) {
  // @@protoc_insertion_point(field_mutable:slabrepeated.subpolygons)
  return subpolygons_.Mutable(index);
}
inline ::intlistmsg* slabrepeated::add_subpolygons() {
  // @@protoc_insertion_point(field_add:slabrepeated.subpolygons)
  return subpolygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::intlistmsg >&
slabrepeated::subpolygons() const {
  // @@protoc_insertion_point(field_list:slabrepeated.subpolygons)
  return subpolygons_;
}
inline ::google::protobuf::RepeatedPtrField< ::intlistmsg >*
slabrepeated::mutable_subpolygons() {
  // @@protoc_insertion_point(field_mutable_list:slabrepeated.subpolygons)
  return &subpolygons_;
}

// -------------------------------------------------------------------

// columnrepeated

// repeated double px = 1;
inline int columnrepeated::px_size() const {
  return px_.size();
}
inline void columnrepeated::clear_px() {
  px_.Clear();
}
inline double columnrepeated::px(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.px)
  return px_.Get(index);
}
inline void columnrepeated::set_px(int index, double value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.px)
}
inline void columnrepeated::add_px(double value) {
  px_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.px)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::px() const {
  // @@protoc_insertion_point(field_list:columnrepeated.px)
  return px_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.px)
  return &px_;
}

// repeated double py = 2;
inline int columnrepeated::py_size() const {
  return py_.size();
}
inline void columnrepeated::clear_py() {
  py_.Clear();
}
inline double columnrepeated::py(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.py)
  return py_.Get(index);
}
inline void columnrepeated::set_py(int index, double value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.py)
}
inline void columnrepeated::add_py(double value) {
  py_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.py)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::py() const {
  // @@protoc_insertion_point(field_list:columnrepeated.py)
  return py_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.py)
  return &py_;
}

// repeated .storyinfo bottomlevel = 3;
inline int columnrepeated::bottomlevel_size() const {
  return bottomlevel_.size();
}
inline void columnrepeated::clear_bottomlevel() {
  bottomlevel_.Clear();
}
inline const ::storyinfo& columnrepeated::bottomlevel(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.bottomlevel)
  return bottomlevel_.Get(index);
}
inline ::storyinfo* columnrepeated::mutable_bottomlevel(int index) {
  // @@protoc_insertion_point(field_mutable:columnrepeated.bottomlevel)
  return bottomlevel_.Mutable(index);
}
inline ::storyinfo* columnrepeated::add_bottomlevel() {
  // @@protoc_insertion_point(field_add:columnrepeated.bottomlevel)
  return bottomlevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
columnrepeated::bottomlevel() const {
  // @@protoc_insertion_point(field_list:columnrepeated.bottomlevel)
  return bottomlevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
columnrepeated::mutable_bottomlevel() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.bottomlevel)
  return &bottomlevel_;
}

// repeated .storyinfo toplevel = 4;
inline int columnrepeated::toplevel_size() const {
  return toplevel_.size();
}
inline void columnrepeated::clear_toplevel() {
  toplevel_.Clear();
}
inline const ::storyinfo& columnrepeated::toplevel(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.toplevel)
  return toplevel_.Get(index);
}
inline ::storyinfo* columnrepeated::mutable_toplevel(int index) {
  // @@protoc_insertion_point(field_mutable:columnrepeated.toplevel)
  return toplevel_.Mutable(index);
}
inline ::storyinfo* columnrepeated::add_toplevel() {
  // @@protoc_insertion_point(field_add:columnrepeated.toplevel)
  return toplevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
columnrepeated::toplevel() const {
  // @@protoc_insertion_point(field_list:columnrepeated.toplevel)
  return toplevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
columnrepeated::mutable_toplevel() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.toplevel)
  return &toplevel_;
}

// repeated bool circular = 5;
inline int columnrepeated::circular_size() const {
  return circular_.size();
}
inline void columnrepeated::clear_circular() {
  circular_.Clear();
}
inline bool columnrepeated::circular(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.circular)
  return circular_.Get(index);
}
inline void columnrepeated::set_circular(int index, bool value) {
  circular_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.circular)
}
inline void columnrepeated::add_circular(bool value) {
  circular_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.circular)
}
inline const ::google::protobuf::RepeatedField< bool >&
columnrepeated::circular() const {
  // @@protoc_insertion_point(field_list:columnrepeated.circular)
  return circular_;
}
inline ::google::protobuf::RepeatedField< bool >*
columnrepeated::mutable_circular() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.circular)
  return &circular_;
}

// repeated double angle = 6;
inline int columnrepeated::angle_size() const {
  return angle_.size();
}
inline void columnrepeated::clear_angle() {
  angle_.Clear();
}
inline double columnrepeated::angle(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.angle)
  return angle_.Get(index);
}
inline void columnrepeated::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.angle)
}
inline void columnrepeated::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.angle)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::angle() const {
  // @@protoc_insertion_point(field_list:columnrepeated.angle)
  return angle_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.angle)
  return &angle_;
}

// repeated double depth = 7;
inline int columnrepeated::depth_size() const {
  return depth_.size();
}
inline void columnrepeated::clear_depth() {
  depth_.Clear();
}
inline double columnrepeated::depth(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.depth)
  return depth_.Get(index);
}
inline void columnrepeated::set_depth(int index, double value) {
  depth_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.depth)
}
inline void columnrepeated::add_depth(double value) {
  depth_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.depth)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::depth() const {
  // @@protoc_insertion_point(field_list:columnrepeated.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.depth)
  return &depth_;
}

// repeated double width = 8;
inline int columnrepeated::width_size() const {
  return width_.size();
}
inline void columnrepeated::clear_width() {
  width_.Clear();
}
inline double columnrepeated::width(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.width)
  return width_.Get(index);
}
inline void columnrepeated::set_width(int index, double value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.width)
}
inline void columnrepeated::add_width(double value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.width)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::width() const {
  // @@protoc_insertion_point(field_list:columnrepeated.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.width)
  return &width_;
}

// repeated double slantangle = 9;
inline int columnrepeated::slantangle_size() const {
  return slantangle_.size();
}
inline void columnrepeated::clear_slantangle() {
  slantangle_.Clear();
}
inline double columnrepeated::slantangle(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.slantangle)
  return slantangle_.Get(index);
}
inline void columnrepeated::set_slantangle(int index, double value) {
  slantangle_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.slantangle)
}
inline void columnrepeated::add_slantangle(double value) {
  slantangle_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.slantangle)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::slantangle() const {
  // @@protoc_insertion_point(field_list:columnrepeated.slantangle)
  return slantangle_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_slantangle() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.slantangle)
  return &slantangle_;
}

// repeated double slantdirection = 10;
inline int columnrepeated::slantdirection_size() const {
  return slantdirection_.size();
}
inline void columnrepeated::clear_slantdirection() {
  slantdirection_.Clear();
}
inline double columnrepeated::slantdirection(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.slantdirection)
  return slantdirection_.Get(index);
}
inline void columnrepeated::set_slantdirection(int index, double value) {
  slantdirection_.Set(index, value);
  // @@protoc_insertion_point(field_set:columnrepeated.slantdirection)
}
inline void columnrepeated::add_slantdirection(double value) {
  slantdirection_.Add(value);
  // @@protoc_insertion_point(field_add:columnrepeated.slantdirection)
}
inline const ::google::protobuf::RepeatedField< double >&
columnrepeated::slantdirection() const {
  // @@protoc_insertion_point(field_list:columnrepeated.slantdirection)
  return slantdirection_;
}
inline ::google::protobuf::RepeatedField< double >*
columnrepeated::mutable_slantdirection() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.slantdirection)
  return &slantdirection_;
}

// repeated string guid = 11;
inline int columnrepeated::guid_size() const {
  return guid_.size();
}
inline void columnrepeated::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& columnrepeated::guid(int index) const {
  // @@protoc_insertion_point(field_get:columnrepeated.guid)
  return guid_.Get(index);
}
inline ::std::string* columnrepeated::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:columnrepeated.guid)
  return guid_.Mutable(index);
}
inline void columnrepeated::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:columnrepeated.guid)
  guid_.Mutable(index)->assign(value);
}
inline void columnrepeated::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:columnrepeated.guid)
}
inline void columnrepeated::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:columnrepeated.guid)
}
inline ::std::string* columnrepeated::add_guid() {
  return guid_.Add();
}
inline void columnrepeated::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:columnrepeated.guid)
}
inline void columnrepeated::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:columnrepeated.guid)
}
inline void columnrepeated::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:columnrepeated.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
columnrepeated::guid() const {
  // @@protoc_insertion_point(field_list:columnrepeated.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
columnrepeated::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:columnrepeated.guid)
  return &guid_;
}

// -------------------------------------------------------------------

// objectrepeated

// repeated string name = 1;
inline int objectrepeated::name_size() const {
  return name_.size();
}
inline void objectrepeated::clear_name() {
  name_.Clear();
}
inline const ::std::string& objectrepeated::name(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.name)
  return name_.Get(index);
}
inline ::std::string* objectrepeated::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:objectrepeated.name)
  return name_.Mutable(index);
}
inline void objectrepeated::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:objectrepeated.name)
  name_.Mutable(index)->assign(value);
}
inline void objectrepeated::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:objectrepeated.name)
}
inline void objectrepeated::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:objectrepeated.name)
}
inline ::std::string* objectrepeated::add_name() {
  return name_.Add();
}
inline void objectrepeated::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:objectrepeated.name)
}
inline void objectrepeated::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:objectrepeated.name)
}
inline void objectrepeated::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:objectrepeated.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
objectrepeated::name() const {
  // @@protoc_insertion_point(field_list:objectrepeated.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
objectrepeated::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.name)
  return &name_;
}

// repeated double px = 2;
inline int objectrepeated::px_size() const {
  return px_.size();
}
inline void objectrepeated::clear_px() {
  px_.Clear();
}
inline double objectrepeated::px(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.px)
  return px_.Get(index);
}
inline void objectrepeated::set_px(int index, double value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.px)
}
inline void objectrepeated::add_px(double value) {
  px_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.px)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::px() const {
  // @@protoc_insertion_point(field_list:objectrepeated.px)
  return px_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.px)
  return &px_;
}

// repeated double py = 3;
inline int objectrepeated::py_size() const {
  return py_.size();
}
inline void objectrepeated::clear_py() {
  py_.Clear();
}
inline double objectrepeated::py(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.py)
  return py_.Get(index);
}
inline void objectrepeated::set_py(int index, double value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.py)
}
inline void objectrepeated::add_py(double value) {
  py_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.py)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::py() const {
  // @@protoc_insertion_point(field_list:objectrepeated.py)
  return py_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.py)
  return &py_;
}

// repeated double angle = 4;
inline int objectrepeated::angle_size() const {
  return angle_.size();
}
inline void objectrepeated::clear_angle() {
  angle_.Clear();
}
inline double objectrepeated::angle(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.angle)
  return angle_.Get(index);
}
inline void objectrepeated::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.angle)
}
inline void objectrepeated::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.angle)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::angle() const {
  // @@protoc_insertion_point(field_list:objectrepeated.angle)
  return angle_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.angle)
  return &angle_;
}

// repeated double xratio = 5;
inline int objectrepeated::xratio_size() const {
  return xratio_.size();
}
inline void objectrepeated::clear_xratio() {
  xratio_.Clear();
}
inline double objectrepeated::xratio(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.xratio)
  return xratio_.Get(index);
}
inline void objectrepeated::set_xratio(int index, double value) {
  xratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.xratio)
}
inline void objectrepeated::add_xratio(double value) {
  xratio_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.xratio)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::xratio() const {
  // @@protoc_insertion_point(field_list:objectrepeated.xratio)
  return xratio_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_xratio() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.xratio)
  return &xratio_;
}

// repeated double yratio = 6;
inline int objectrepeated::yratio_size() const {
  return yratio_.size();
}
inline void objectrepeated::clear_yratio() {
  yratio_.Clear();
}
inline double objectrepeated::yratio(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.yratio)
  return yratio_.Get(index);
}
inline void objectrepeated::set_yratio(int index, double value) {
  yratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.yratio)
}
inline void objectrepeated::add_yratio(double value) {
  yratio_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.yratio)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::yratio() const {
  // @@protoc_insertion_point(field_list:objectrepeated.yratio)
  return yratio_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_yratio() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.yratio)
  return &yratio_;
}

// repeated double bottomoffset = 7;
inline int objectrepeated::bottomoffset_size() const {
  return bottomoffset_.size();
}
inline void objectrepeated::clear_bottomoffset() {
  bottomoffset_.Clear();
}
inline double objectrepeated::bottomoffset(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.bottomoffset)
  return bottomoffset_.Get(index);
}
inline void objectrepeated::set_bottomoffset(int index, double value) {
  bottomoffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.bottomoffset)
}
inline void objectrepeated::add_bottomoffset(double value) {
  bottomoffset_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.bottomoffset)
}
inline const ::google::protobuf::RepeatedField< double >&
objectrepeated::bottomoffset() const {
  // @@protoc_insertion_point(field_list:objectrepeated.bottomoffset)
  return bottomoffset_;
}
inline ::google::protobuf::RepeatedField< double >*
objectrepeated::mutable_bottomoffset() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.bottomoffset)
  return &bottomoffset_;
}

// repeated .storyinfo bottomlevel = 8;
inline int objectrepeated::bottomlevel_size() const {
  return bottomlevel_.size();
}
inline void objectrepeated::clear_bottomlevel() {
  bottomlevel_.Clear();
}
inline const ::storyinfo& objectrepeated::bottomlevel(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.bottomlevel)
  return bottomlevel_.Get(index);
}
inline ::storyinfo* objectrepeated::mutable_bottomlevel(int index) {
  // @@protoc_insertion_point(field_mutable:objectrepeated.bottomlevel)
  return bottomlevel_.Mutable(index);
}
inline ::storyinfo* objectrepeated::add_bottomlevel() {
  // @@protoc_insertion_point(field_add:objectrepeated.bottomlevel)
  return bottomlevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
objectrepeated::bottomlevel() const {
  // @@protoc_insertion_point(field_list:objectrepeated.bottomlevel)
  return bottomlevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
objectrepeated::mutable_bottomlevel() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.bottomlevel)
  return &bottomlevel_;
}

// repeated string guid = 9;
inline int objectrepeated::guid_size() const {
  return guid_.size();
}
inline void objectrepeated::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& objectrepeated::guid(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.guid)
  return guid_.Get(index);
}
inline ::std::string* objectrepeated::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:objectrepeated.guid)
  return guid_.Mutable(index);
}
inline void objectrepeated::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:objectrepeated.guid)
  guid_.Mutable(index)->assign(value);
}
inline void objectrepeated::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:objectrepeated.guid)
}
inline void objectrepeated::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:objectrepeated.guid)
}
inline ::std::string* objectrepeated::add_guid() {
  return guid_.Add();
}
inline void objectrepeated::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:objectrepeated.guid)
}
inline void objectrepeated::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:objectrepeated.guid)
}
inline void objectrepeated::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:objectrepeated.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
objectrepeated::guid() const {
  // @@protoc_insertion_point(field_list:objectrepeated.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
objectrepeated::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.guid)
  return &guid_;
}

// repeated bool stairs = 10;
inline int objectrepeated::stairs_size() const {
  return stairs_.size();
}
inline void objectrepeated::clear_stairs() {
  stairs_.Clear();
}
inline bool objectrepeated::stairs(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.stairs)
  return stairs_.Get(index);
}
inline void objectrepeated::set_stairs(int index, bool value) {
  stairs_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.stairs)
}
inline void objectrepeated::add_stairs(bool value) {
  stairs_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.stairs)
}
inline const ::google::protobuf::RepeatedField< bool >&
objectrepeated::stairs() const {
  // @@protoc_insertion_point(field_list:objectrepeated.stairs)
  return stairs_;
}
inline ::google::protobuf::RepeatedField< bool >*
objectrepeated::mutable_stairs() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.stairs)
  return &stairs_;
}

// repeated bool usexyfixsize = 11;
inline int objectrepeated::usexyfixsize_size() const {
  return usexyfixsize_.size();
}
inline void objectrepeated::clear_usexyfixsize() {
  usexyfixsize_.Clear();
}
inline bool objectrepeated::usexyfixsize(int index) const {
  // @@protoc_insertion_point(field_get:objectrepeated.usexyfixsize)
  return usexyfixsize_.Get(index);
}
inline void objectrepeated::set_usexyfixsize(int index, bool value) {
  usexyfixsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:objectrepeated.usexyfixsize)
}
inline void objectrepeated::add_usexyfixsize(bool value) {
  usexyfixsize_.Add(value);
  // @@protoc_insertion_point(field_add:objectrepeated.usexyfixsize)
}
inline const ::google::protobuf::RepeatedField< bool >&
objectrepeated::usexyfixsize() const {
  // @@protoc_insertion_point(field_list:objectrepeated.usexyfixsize)
  return usexyfixsize_;
}
inline ::google::protobuf::RepeatedField< bool >*
objectrepeated::mutable_usexyfixsize() {
  // @@protoc_insertion_point(field_mutable_list:objectrepeated.usexyfixsize)
  return &usexyfixsize_;
}

// -------------------------------------------------------------------

// roofrepeated

// repeated .pointsmessage points = 1;
inline int roofrepeated::points_size() const {
  return points_.size();
}
inline void roofrepeated::clear_points() {
  points_.Clear();
}
inline const ::pointsmessage& roofrepeated::points(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.points)
  return points_.Get(index);
}
inline ::pointsmessage* roofrepeated::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.points)
  return points_.Mutable(index);
}
inline ::pointsmessage* roofrepeated::add_points() {
  // @@protoc_insertion_point(field_add:roofrepeated.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pointsmessage >&
roofrepeated::points() const {
  // @@protoc_insertion_point(field_list:roofrepeated.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::pointsmessage >*
roofrepeated::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.points)
  return &points_;
}

// repeated .storyinfo bottomlevel = 2;
inline int roofrepeated::bottomlevel_size() const {
  return bottomlevel_.size();
}
inline void roofrepeated::clear_bottomlevel() {
  bottomlevel_.Clear();
}
inline const ::storyinfo& roofrepeated::bottomlevel(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.bottomlevel)
  return bottomlevel_.Get(index);
}
inline ::storyinfo* roofrepeated::mutable_bottomlevel(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.bottomlevel)
  return bottomlevel_.Mutable(index);
}
inline ::storyinfo* roofrepeated::add_bottomlevel() {
  // @@protoc_insertion_point(field_add:roofrepeated.bottomlevel)
  return bottomlevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
roofrepeated::bottomlevel() const {
  // @@protoc_insertion_point(field_list:roofrepeated.bottomlevel)
  return bottomlevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
roofrepeated::mutable_bottomlevel() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.bottomlevel)
  return &bottomlevel_;
}

// repeated double thickness = 3;
inline int roofrepeated::thickness_size() const {
  return thickness_.size();
}
inline void roofrepeated::clear_thickness() {
  thickness_.Clear();
}
inline double roofrepeated::thickness(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.thickness)
  return thickness_.Get(index);
}
inline void roofrepeated::set_thickness(int index, double value) {
  thickness_.Set(index, value);
  // @@protoc_insertion_point(field_set:roofrepeated.thickness)
}
inline void roofrepeated::add_thickness(double value) {
  thickness_.Add(value);
  // @@protoc_insertion_point(field_add:roofrepeated.thickness)
}
inline const ::google::protobuf::RepeatedField< double >&
roofrepeated::thickness() const {
  // @@protoc_insertion_point(field_list:roofrepeated.thickness)
  return thickness_;
}
inline ::google::protobuf::RepeatedField< double >*
roofrepeated::mutable_thickness() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.thickness)
  return &thickness_;
}

// repeated string material = 4;
inline int roofrepeated::material_size() const {
  return material_.size();
}
inline void roofrepeated::clear_material() {
  material_.Clear();
}
inline const ::std::string& roofrepeated::material(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.material)
  return material_.Get(index);
}
inline ::std::string* roofrepeated::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.material)
  return material_.Mutable(index);
}
inline void roofrepeated::set_material(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roofrepeated.material)
  material_.Mutable(index)->assign(value);
}
inline void roofrepeated::set_material(int index, const char* value) {
  material_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roofrepeated.material)
}
inline void roofrepeated::set_material(int index, const char* value, size_t size) {
  material_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofrepeated.material)
}
inline ::std::string* roofrepeated::add_material() {
  return material_.Add();
}
inline void roofrepeated::add_material(const ::std::string& value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roofrepeated.material)
}
inline void roofrepeated::add_material(const char* value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roofrepeated.material)
}
inline void roofrepeated::add_material(const char* value, size_t size) {
  material_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roofrepeated.material)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
roofrepeated::material() const {
  // @@protoc_insertion_point(field_list:roofrepeated.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
roofrepeated::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.material)
  return &material_;
}

// repeated string type = 5;
inline int roofrepeated::type_size() const {
  return type_.size();
}
inline void roofrepeated::clear_type() {
  type_.Clear();
}
inline const ::std::string& roofrepeated::type(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.type)
  return type_.Get(index);
}
inline ::std::string* roofrepeated::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.type)
  return type_.Mutable(index);
}
inline void roofrepeated::set_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roofrepeated.type)
  type_.Mutable(index)->assign(value);
}
inline void roofrepeated::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roofrepeated.type)
}
inline void roofrepeated::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofrepeated.type)
}
inline ::std::string* roofrepeated::add_type() {
  return type_.Add();
}
inline void roofrepeated::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roofrepeated.type)
}
inline void roofrepeated::add_type(const char* value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roofrepeated.type)
}
inline void roofrepeated::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roofrepeated.type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
roofrepeated::type() const {
  // @@protoc_insertion_point(field_list:roofrepeated.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
roofrepeated::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.type)
  return &type_;
}

// repeated string guid = 6;
inline int roofrepeated::guid_size() const {
  return guid_.size();
}
inline void roofrepeated::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& roofrepeated::guid(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.guid)
  return guid_.Get(index);
}
inline ::std::string* roofrepeated::mutable_guid(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.guid)
  return guid_.Mutable(index);
}
inline void roofrepeated::set_guid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roofrepeated.guid)
  guid_.Mutable(index)->assign(value);
}
inline void roofrepeated::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roofrepeated.guid)
}
inline void roofrepeated::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roofrepeated.guid)
}
inline ::std::string* roofrepeated::add_guid() {
  return guid_.Add();
}
inline void roofrepeated::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roofrepeated.guid)
}
inline void roofrepeated::add_guid(const char* value) {
  guid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roofrepeated.guid)
}
inline void roofrepeated::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roofrepeated.guid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
roofrepeated::guid() const {
  // @@protoc_insertion_point(field_list:roofrepeated.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
roofrepeated::mutable_guid() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.guid)
  return &guid_;
}

// repeated .intlistmsg subpolygons = 7;
inline int roofrepeated::subpolygons_size() const {
  return subpolygons_.size();
}
inline void roofrepeated::clear_subpolygons() {
  subpolygons_.Clear();
}
inline const ::intlistmsg& roofrepeated::subpolygons(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.subpolygons)
  return subpolygons_.Get(index);
}
inline ::intlistmsg* roofrepeated::mutable_subpolygons(int index) {
  // @@protoc_insertion_point(field_mutable:roofrepeated.subpolygons)
  return subpolygons_.Mutable(index);
}
inline ::intlistmsg* roofrepeated::add_subpolygons() {
  // @@protoc_insertion_point(field_add:roofrepeated.subpolygons)
  return subpolygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::intlistmsg >&
roofrepeated::subpolygons() const {
  // @@protoc_insertion_point(field_list:roofrepeated.subpolygons)
  return subpolygons_;
}
inline ::google::protobuf::RepeatedPtrField< ::intlistmsg >*
roofrepeated::mutable_subpolygons() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.subpolygons)
  return &subpolygons_;
}

// repeated double height = 8;
inline int roofrepeated::height_size() const {
  return height_.size();
}
inline void roofrepeated::clear_height() {
  height_.Clear();
}
inline double roofrepeated::height(int index) const {
  // @@protoc_insertion_point(field_get:roofrepeated.height)
  return height_.Get(index);
}
inline void roofrepeated::set_height(int index, double value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:roofrepeated.height)
}
inline void roofrepeated::add_height(double value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:roofrepeated.height)
}
inline const ::google::protobuf::RepeatedField< double >&
roofrepeated::height() const {
  // @@protoc_insertion_point(field_list:roofrepeated.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< double >*
roofrepeated::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:roofrepeated.height)
  return &height_;
}

// -------------------------------------------------------------------

// levelrepeated

// repeated .storyinfo levels = 1;
inline int levelrepeated::levels_size() const {
  return levels_.size();
}
inline void levelrepeated::clear_levels() {
  levels_.Clear();
}
inline const ::storyinfo& levelrepeated::levels(int index) const {
  // @@protoc_insertion_point(field_get:levelrepeated.levels)
  return levels_.Get(index);
}
inline ::storyinfo* levelrepeated::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:levelrepeated.levels)
  return levels_.Mutable(index);
}
inline ::storyinfo* levelrepeated::add_levels() {
  // @@protoc_insertion_point(field_add:levelrepeated.levels)
  return levels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::storyinfo >&
levelrepeated::levels() const {
  // @@protoc_insertion_point(field_list:levelrepeated.levels)
  return levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::storyinfo >*
levelrepeated::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:levelrepeated.levels)
  return &levels_;
}

// -------------------------------------------------------------------

// extrusionmsg

// required double vx = 1;
inline bool extrusionmsg::has_vx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extrusionmsg::set_has_vx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extrusionmsg::clear_has_vx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extrusionmsg::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double extrusionmsg::vx() const {
  // @@protoc_insertion_point(field_get:extrusionmsg.vx)
  return vx_;
}
inline void extrusionmsg::set_vx(double value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:extrusionmsg.vx)
}

// required double vy = 2;
inline bool extrusionmsg::has_vy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extrusionmsg::set_has_vy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extrusionmsg::clear_has_vy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extrusionmsg::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double extrusionmsg::vy() const {
  // @@protoc_insertion_point(field_get:extrusionmsg.vy)
  return vy_;
}
inline void extrusionmsg::set_vy(double value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:extrusionmsg.vy)
}

// required double vz = 3;
inline bool extrusionmsg::has_vz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void extrusionmsg::set_has_vz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void extrusionmsg::clear_has_vz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void extrusionmsg::clear_vz() {
  vz_ = 0;
  clear_has_vz();
}
inline double extrusionmsg::vz() const {
  // @@protoc_insertion_point(field_get:extrusionmsg.vz)
  return vz_;
}
inline void extrusionmsg::set_vz(double value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:extrusionmsg.vz)
}

// required double height = 4;
inline bool extrusionmsg::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void extrusionmsg::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void extrusionmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void extrusionmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double extrusionmsg::height() const {
  // @@protoc_insertion_point(field_get:extrusionmsg.height)
  return height_;
}
inline void extrusionmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:extrusionmsg.height)
}

// -------------------------------------------------------------------

// openmessage

// required string path = 1;
inline bool openmessage::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void openmessage::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void openmessage::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void openmessage::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& openmessage::path() const {
  // @@protoc_insertion_point(field_get:openmessage.path)
  return *path_;
}
inline void openmessage::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:openmessage.path)
}
inline void openmessage::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:openmessage.path)
}
inline void openmessage::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmessage.path)
}
inline ::std::string* openmessage::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:openmessage.path)
  return path_;
}
inline ::std::string* openmessage::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void openmessage::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:openmessage.path)
}

// required string extension = 2;
inline bool openmessage::has_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void openmessage::set_has_extension() {
  _has_bits_[0] |= 0x00000002u;
}
inline void openmessage::clear_has_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void openmessage::clear_extension() {
  if (extension_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extension_->clear();
  }
  clear_has_extension();
}
inline const ::std::string& openmessage::extension() const {
  // @@protoc_insertion_point(field_get:openmessage.extension)
  return *extension_;
}
inline void openmessage::set_extension(const ::std::string& value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
  // @@protoc_insertion_point(field_set:openmessage.extension)
}
inline void openmessage::set_extension(const char* value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
  // @@protoc_insertion_point(field_set_char:openmessage.extension)
}
inline void openmessage::set_extension(const char* value, size_t size) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extension_ = new ::std::string;
  }
  extension_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmessage.extension)
}
inline ::std::string* openmessage::mutable_extension() {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extension_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:openmessage.extension)
  return extension_;
}
inline ::std::string* openmessage::release_extension() {
  clear_has_extension();
  if (extension_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extension_;
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void openmessage::set_allocated_extension(::std::string* extension) {
  if (extension_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extension_;
  }
  if (extension) {
    set_has_extension();
    extension_ = extension;
  } else {
    clear_has_extension();
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:openmessage.extension)
}

// -------------------------------------------------------------------

// transformmsg

// required string guid = 1;
inline bool transformmsg::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void transformmsg::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void transformmsg::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void transformmsg::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& transformmsg::guid() const {
  // @@protoc_insertion_point(field_get:transformmsg.guid)
  return *guid_;
}
inline void transformmsg::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:transformmsg.guid)
}
inline void transformmsg::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:transformmsg.guid)
}
inline void transformmsg::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transformmsg.guid)
}
inline ::std::string* transformmsg::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:transformmsg.guid)
  return guid_;
}
inline ::std::string* transformmsg::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void transformmsg::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:transformmsg.guid)
}

// required string op = 2;
inline bool transformmsg::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void transformmsg::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void transformmsg::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void transformmsg::clear_op() {
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_->clear();
  }
  clear_has_op();
}
inline const ::std::string& transformmsg::op() const {
  // @@protoc_insertion_point(field_get:transformmsg.op)
  return *op_;
}
inline void transformmsg::set_op(const ::std::string& value) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(value);
  // @@protoc_insertion_point(field_set:transformmsg.op)
}
inline void transformmsg::set_op(const char* value) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(value);
  // @@protoc_insertion_point(field_set_char:transformmsg.op)
}
inline void transformmsg::set_op(const char* value, size_t size) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transformmsg.op)
}
inline ::std::string* transformmsg::mutable_op() {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:transformmsg.op)
  return op_;
}
inline ::std::string* transformmsg::release_op() {
  clear_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = op_;
    op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void transformmsg::set_allocated_op(::std::string* op) {
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_;
  }
  if (op) {
    set_has_op();
    op_ = op;
  } else {
    clear_has_op();
    op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:transformmsg.op)
}

// required double x = 3;
inline bool transformmsg::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void transformmsg::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void transformmsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void transformmsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double transformmsg::x() const {
  // @@protoc_insertion_point(field_get:transformmsg.x)
  return x_;
}
inline void transformmsg::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:transformmsg.x)
}

// required double y = 4;
inline bool transformmsg::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void transformmsg::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void transformmsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void transformmsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double transformmsg::y() const {
  // @@protoc_insertion_point(field_get:transformmsg.y)
  return y_;
}
inline void transformmsg::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:transformmsg.y)
}

// required double z = 5;
inline bool transformmsg::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void transformmsg::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void transformmsg::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void transformmsg::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double transformmsg::z() const {
  // @@protoc_insertion_point(field_get:transformmsg.z)
  return z_;
}
inline void transformmsg::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:transformmsg.z)
}

// required double angle = 6;
inline bool transformmsg::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void transformmsg::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void transformmsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void transformmsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double transformmsg::angle() const {
  // @@protoc_insertion_point(field_get:transformmsg.angle)
  return angle_;
}
inline void transformmsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:transformmsg.angle)
}

// required double scale = 7;
inline bool transformmsg::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void transformmsg::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void transformmsg::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void transformmsg::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline double transformmsg::scale() const {
  // @@protoc_insertion_point(field_get:transformmsg.scale)
  return scale_;
}
inline void transformmsg::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:transformmsg.scale)
}

// -------------------------------------------------------------------

// applymatrix

// required string guid = 1;
inline bool applymatrix::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void applymatrix::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void applymatrix::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void applymatrix::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& applymatrix::guid() const {
  // @@protoc_insertion_point(field_get:applymatrix.guid)
  return *guid_;
}
inline void applymatrix::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:applymatrix.guid)
}
inline void applymatrix::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:applymatrix.guid)
}
inline void applymatrix::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:applymatrix.guid)
}
inline ::std::string* applymatrix::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:applymatrix.guid)
  return guid_;
}
inline ::std::string* applymatrix::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void applymatrix::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:applymatrix.guid)
}

// repeated double matrix = 2;
inline int applymatrix::matrix_size() const {
  return matrix_.size();
}
inline void applymatrix::clear_matrix() {
  matrix_.Clear();
}
inline double applymatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:applymatrix.matrix)
  return matrix_.Get(index);
}
inline void applymatrix::set_matrix(int index, double value) {
  matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:applymatrix.matrix)
}
inline void applymatrix::add_matrix(double value) {
  matrix_.Add(value);
  // @@protoc_insertion_point(field_add:applymatrix.matrix)
}
inline const ::google::protobuf::RepeatedField< double >&
applymatrix::matrix() const {
  // @@protoc_insertion_point(field_list:applymatrix.matrix)
  return matrix_;
}
inline ::google::protobuf::RepeatedField< double >*
applymatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:applymatrix.matrix)
  return &matrix_;
}

// -------------------------------------------------------------------

// beammsg

// required double x0 = 1;
inline bool beammsg::has_x0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void beammsg::set_has_x0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void beammsg::clear_has_x0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void beammsg::clear_x0() {
  x0_ = 0;
  clear_has_x0();
}
inline double beammsg::x0() const {
  // @@protoc_insertion_point(field_get:beammsg.x0)
  return x0_;
}
inline void beammsg::set_x0(double value) {
  set_has_x0();
  x0_ = value;
  // @@protoc_insertion_point(field_set:beammsg.x0)
}

// required double y0 = 2;
inline bool beammsg::has_y0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void beammsg::set_has_y0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void beammsg::clear_has_y0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void beammsg::clear_y0() {
  y0_ = 0;
  clear_has_y0();
}
inline double beammsg::y0() const {
  // @@protoc_insertion_point(field_get:beammsg.y0)
  return y0_;
}
inline void beammsg::set_y0(double value) {
  set_has_y0();
  y0_ = value;
  // @@protoc_insertion_point(field_set:beammsg.y0)
}

// required double x1 = 3;
inline bool beammsg::has_x1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void beammsg::set_has_x1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void beammsg::clear_has_x1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void beammsg::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline double beammsg::x1() const {
  // @@protoc_insertion_point(field_get:beammsg.x1)
  return x1_;
}
inline void beammsg::set_x1(double value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:beammsg.x1)
}

// required double y1 = 4;
inline bool beammsg::has_y1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void beammsg::set_has_y1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void beammsg::clear_has_y1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void beammsg::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline double beammsg::y1() const {
  // @@protoc_insertion_point(field_get:beammsg.y1)
  return y1_;
}
inline void beammsg::set_y1(double value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:beammsg.y1)
}

// required double beamheight = 5;
inline bool beammsg::has_beamheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void beammsg::set_has_beamheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void beammsg::clear_has_beamheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void beammsg::clear_beamheight() {
  beamheight_ = 0;
  clear_has_beamheight();
}
inline double beammsg::beamheight() const {
  // @@protoc_insertion_point(field_get:beammsg.beamheight)
  return beamheight_;
}
inline void beammsg::set_beamheight(double value) {
  set_has_beamheight();
  beamheight_ = value;
  // @@protoc_insertion_point(field_set:beammsg.beamheight)
}

// required double beamwidth = 6;
inline bool beammsg::has_beamwidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void beammsg::set_has_beamwidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void beammsg::clear_has_beamwidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void beammsg::clear_beamwidth() {
  beamwidth_ = 0;
  clear_has_beamwidth();
}
inline double beammsg::beamwidth() const {
  // @@protoc_insertion_point(field_get:beammsg.beamwidth)
  return beamwidth_;
}
inline void beammsg::set_beamwidth(double value) {
  set_has_beamwidth();
  beamwidth_ = value;
  // @@protoc_insertion_point(field_set:beammsg.beamwidth)
}

// required double levelheight = 7;
inline bool beammsg::has_levelheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void beammsg::set_has_levelheight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void beammsg::clear_has_levelheight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void beammsg::clear_levelheight() {
  levelheight_ = 0;
  clear_has_levelheight();
}
inline double beammsg::levelheight() const {
  // @@protoc_insertion_point(field_get:beammsg.levelheight)
  return levelheight_;
}
inline void beammsg::set_levelheight(double value) {
  set_has_levelheight();
  levelheight_ = value;
  // @@protoc_insertion_point(field_set:beammsg.levelheight)
}

// required int32 bottomlevel = 8;
inline bool beammsg::has_bottomlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void beammsg::set_has_bottomlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void beammsg::clear_has_bottomlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void beammsg::clear_bottomlevel() {
  bottomlevel_ = 0;
  clear_has_bottomlevel();
}
inline ::google::protobuf::int32 beammsg::bottomlevel() const {
  // @@protoc_insertion_point(field_get:beammsg.bottomlevel)
  return bottomlevel_;
}
inline void beammsg::set_bottomlevel(::google::protobuf::int32 value) {
  set_has_bottomlevel();
  bottomlevel_ = value;
  // @@protoc_insertion_point(field_set:beammsg.bottomlevel)
}

// required double angle = 9;
inline bool beammsg::has_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void beammsg::set_has_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void beammsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void beammsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double beammsg::angle() const {
  // @@protoc_insertion_point(field_get:beammsg.angle)
  return angle_;
}
inline void beammsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:beammsg.angle)
}

// required string material = 10;
inline bool beammsg::has_material() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void beammsg::set_has_material() {
  _has_bits_[0] |= 0x00000200u;
}
inline void beammsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void beammsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& beammsg::material() const {
  // @@protoc_insertion_point(field_get:beammsg.material)
  return *material_;
}
inline void beammsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:beammsg.material)
}
inline void beammsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:beammsg.material)
}
inline void beammsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:beammsg.material)
}
inline ::std::string* beammsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:beammsg.material)
  return material_;
}
inline ::std::string* beammsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void beammsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:beammsg.material)
}

// required string profilename = 11;
inline bool beammsg::has_profilename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void beammsg::set_has_profilename() {
  _has_bits_[0] |= 0x00000400u;
}
inline void beammsg::clear_has_profilename() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void beammsg::clear_profilename() {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_->clear();
  }
  clear_has_profilename();
}
inline const ::std::string& beammsg::profilename() const {
  // @@protoc_insertion_point(field_get:beammsg.profilename)
  return *profilename_;
}
inline void beammsg::set_profilename(const ::std::string& value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set:beammsg.profilename)
}
inline void beammsg::set_profilename(const char* value) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:beammsg.profilename)
}
inline void beammsg::set_profilename(const char* value, size_t size) {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  profilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:beammsg.profilename)
}
inline ::std::string* beammsg::mutable_profilename() {
  set_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:beammsg.profilename)
  return profilename_;
}
inline ::std::string* beammsg::release_profilename() {
  clear_has_profilename();
  if (profilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = profilename_;
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void beammsg::set_allocated_profilename(::std::string* profilename) {
  if (profilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profilename_;
  }
  if (profilename) {
    set_has_profilename();
    profilename_ = profilename;
  } else {
    clear_has_profilename();
    profilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:beammsg.profilename)
}

// optional string layer = 12;
inline bool beammsg::has_layer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void beammsg::set_has_layer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void beammsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void beammsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& beammsg::layer() const {
  // @@protoc_insertion_point(field_get:beammsg.layer)
  return *layer_;
}
inline void beammsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:beammsg.layer)
}
inline void beammsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:beammsg.layer)
}
inline void beammsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:beammsg.layer)
}
inline ::std::string* beammsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:beammsg.layer)
  return layer_;
}
inline ::std::string* beammsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void beammsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:beammsg.layer)
}

// -------------------------------------------------------------------

// intarray

// repeated int32 lst = 1;
inline int intarray::lst_size() const {
  return lst_.size();
}
inline void intarray::clear_lst() {
  lst_.Clear();
}
inline ::google::protobuf::int32 intarray::lst(int index) const {
  // @@protoc_insertion_point(field_get:intarray.lst)
  return lst_.Get(index);
}
inline void intarray::set_lst(int index, ::google::protobuf::int32 value) {
  lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:intarray.lst)
}
inline void intarray::add_lst(::google::protobuf::int32 value) {
  lst_.Add(value);
  // @@protoc_insertion_point(field_add:intarray.lst)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
intarray::lst() const {
  // @@protoc_insertion_point(field_list:intarray.lst)
  return lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
intarray::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:intarray.lst)
  return &lst_;
}

// -------------------------------------------------------------------

// doublearray

// repeated double lst = 1;
inline int doublearray::lst_size() const {
  return lst_.size();
}
inline void doublearray::clear_lst() {
  lst_.Clear();
}
inline double doublearray::lst(int index) const {
  // @@protoc_insertion_point(field_get:doublearray.lst)
  return lst_.Get(index);
}
inline void doublearray::set_lst(int index, double value) {
  lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:doublearray.lst)
}
inline void doublearray::add_lst(double value) {
  lst_.Add(value);
  // @@protoc_insertion_point(field_add:doublearray.lst)
}
inline const ::google::protobuf::RepeatedField< double >&
doublearray::lst() const {
  // @@protoc_insertion_point(field_list:doublearray.lst)
  return lst_;
}
inline ::google::protobuf::RepeatedField< double >*
doublearray::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:doublearray.lst)
  return &lst_;
}

// -------------------------------------------------------------------

// boolarray

// repeated bool lst = 1;
inline int boolarray::lst_size() const {
  return lst_.size();
}
inline void boolarray::clear_lst() {
  lst_.Clear();
}
inline bool boolarray::lst(int index) const {
  // @@protoc_insertion_point(field_get:boolarray.lst)
  return lst_.Get(index);
}
inline void boolarray::set_lst(int index, bool value) {
  lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:boolarray.lst)
}
inline void boolarray::add_lst(bool value) {
  lst_.Add(value);
  // @@protoc_insertion_point(field_add:boolarray.lst)
}
inline const ::google::protobuf::RepeatedField< bool >&
boolarray::lst() const {
  // @@protoc_insertion_point(field_list:boolarray.lst)
  return lst_;
}
inline ::google::protobuf::RepeatedField< bool >*
boolarray::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:boolarray.lst)
  return &lst_;
}

// -------------------------------------------------------------------

// stringarray

// repeated string lst = 1;
inline int stringarray::lst_size() const {
  return lst_.size();
}
inline void stringarray::clear_lst() {
  lst_.Clear();
}
inline const ::std::string& stringarray::lst(int index) const {
  // @@protoc_insertion_point(field_get:stringarray.lst)
  return lst_.Get(index);
}
inline ::std::string* stringarray::mutable_lst(int index) {
  // @@protoc_insertion_point(field_mutable:stringarray.lst)
  return lst_.Mutable(index);
}
inline void stringarray::set_lst(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:stringarray.lst)
  lst_.Mutable(index)->assign(value);
}
inline void stringarray::set_lst(int index, const char* value) {
  lst_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stringarray.lst)
}
inline void stringarray::set_lst(int index, const char* value, size_t size) {
  lst_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stringarray.lst)
}
inline ::std::string* stringarray::add_lst() {
  return lst_.Add();
}
inline void stringarray::add_lst(const ::std::string& value) {
  lst_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stringarray.lst)
}
inline void stringarray::add_lst(const char* value) {
  lst_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stringarray.lst)
}
inline void stringarray::add_lst(const char* value, size_t size) {
  lst_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stringarray.lst)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stringarray::lst() const {
  // @@protoc_insertion_point(field_list:stringarray.lst)
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stringarray::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:stringarray.lst)
  return &lst_;
}

// -------------------------------------------------------------------

// objectmsg

// required int32 index = 1;
inline bool objectmsg::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void objectmsg::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void objectmsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void objectmsg::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 objectmsg::index() const {
  // @@protoc_insertion_point(field_get:objectmsg.index)
  return index_;
}
inline void objectmsg::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.index)
}

// required double posx = 2;
inline bool objectmsg::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void objectmsg::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void objectmsg::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void objectmsg::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline double objectmsg::posx() const {
  // @@protoc_insertion_point(field_get:objectmsg.posx)
  return posx_;
}
inline void objectmsg::set_posx(double value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.posx)
}

// required double posy = 3;
inline bool objectmsg::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void objectmsg::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void objectmsg::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void objectmsg::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline double objectmsg::posy() const {
  // @@protoc_insertion_point(field_get:objectmsg.posy)
  return posy_;
}
inline void objectmsg::set_posy(double value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.posy)
}

// required bool usexyfixsize = 4;
inline bool objectmsg::has_usexyfixsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void objectmsg::set_has_usexyfixsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void objectmsg::clear_has_usexyfixsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void objectmsg::clear_usexyfixsize() {
  usexyfixsize_ = false;
  clear_has_usexyfixsize();
}
inline bool objectmsg::usexyfixsize() const {
  // @@protoc_insertion_point(field_get:objectmsg.usexyfixsize)
  return usexyfixsize_;
}
inline void objectmsg::set_usexyfixsize(bool value) {
  set_has_usexyfixsize();
  usexyfixsize_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.usexyfixsize)
}

// required double xratio = 5;
inline bool objectmsg::has_xratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void objectmsg::set_has_xratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void objectmsg::clear_has_xratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void objectmsg::clear_xratio() {
  xratio_ = 0;
  clear_has_xratio();
}
inline double objectmsg::xratio() const {
  // @@protoc_insertion_point(field_get:objectmsg.xratio)
  return xratio_;
}
inline void objectmsg::set_xratio(double value) {
  set_has_xratio();
  xratio_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.xratio)
}

// required double yratio = 6;
inline bool objectmsg::has_yratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void objectmsg::set_has_yratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void objectmsg::clear_has_yratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void objectmsg::clear_yratio() {
  yratio_ = 0;
  clear_has_yratio();
}
inline double objectmsg::yratio() const {
  // @@protoc_insertion_point(field_get:objectmsg.yratio)
  return yratio_;
}
inline void objectmsg::set_yratio(double value) {
  set_has_yratio();
  yratio_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.yratio)
}

// required bool useobjsectattrs = 7;
inline bool objectmsg::has_useobjsectattrs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void objectmsg::set_has_useobjsectattrs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void objectmsg::clear_has_useobjsectattrs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void objectmsg::clear_useobjsectattrs() {
  useobjsectattrs_ = false;
  clear_has_useobjsectattrs();
}
inline bool objectmsg::useobjsectattrs() const {
  // @@protoc_insertion_point(field_get:objectmsg.useobjsectattrs)
  return useobjsectattrs_;
}
inline void objectmsg::set_useobjsectattrs(bool value) {
  set_has_useobjsectattrs();
  useobjsectattrs_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.useobjsectattrs)
}

// required double bottom = 8;
inline bool objectmsg::has_bottom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void objectmsg::set_has_bottom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void objectmsg::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void objectmsg::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline double objectmsg::bottom() const {
  // @@protoc_insertion_point(field_get:objectmsg.bottom)
  return bottom_;
}
inline void objectmsg::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.bottom)
}

// required double angle = 9;
inline bool objectmsg::has_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void objectmsg::set_has_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void objectmsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void objectmsg::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double objectmsg::angle() const {
  // @@protoc_insertion_point(field_get:objectmsg.angle)
  return angle_;
}
inline void objectmsg::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.angle)
}

// required .additionalparams params = 10;
inline bool objectmsg::has_params() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void objectmsg::set_has_params() {
  _has_bits_[0] |= 0x00000200u;
}
inline void objectmsg::clear_has_params() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void objectmsg::clear_params() {
  if (params_ != NULL) params_->::additionalparams::Clear();
  clear_has_params();
}
inline const ::additionalparams& objectmsg::params() const {
  // @@protoc_insertion_point(field_get:objectmsg.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::additionalparams* objectmsg::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::additionalparams;
  // @@protoc_insertion_point(field_mutable:objectmsg.params)
  return params_;
}
inline ::additionalparams* objectmsg::release_params() {
  clear_has_params();
  ::additionalparams* temp = params_;
  params_ = NULL;
  return temp;
}
inline void objectmsg::set_allocated_params(::additionalparams* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:objectmsg.params)
}

// optional string name = 11;
inline bool objectmsg::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void objectmsg::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void objectmsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void objectmsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& objectmsg::name() const {
  // @@protoc_insertion_point(field_get:objectmsg.name)
  return *name_;
}
inline void objectmsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:objectmsg.name)
}
inline void objectmsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:objectmsg.name)
}
inline void objectmsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:objectmsg.name)
}
inline ::std::string* objectmsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:objectmsg.name)
  return name_;
}
inline ::std::string* objectmsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void objectmsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:objectmsg.name)
}

// required int32 level = 12;
inline bool objectmsg::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void objectmsg::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void objectmsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void objectmsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 objectmsg::level() const {
  // @@protoc_insertion_point(field_get:objectmsg.level)
  return level_;
}
inline void objectmsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:objectmsg.level)
}

// optional string layer = 13;
inline bool objectmsg::has_layer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void objectmsg::set_has_layer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void objectmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void objectmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& objectmsg::layer() const {
  // @@protoc_insertion_point(field_get:objectmsg.layer)
  return *layer_;
}
inline void objectmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:objectmsg.layer)
}
inline void objectmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:objectmsg.layer)
}
inline void objectmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:objectmsg.layer)
}
inline ::std::string* objectmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:objectmsg.layer)
  return layer_;
}
inline ::std::string* objectmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void objectmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:objectmsg.layer)
}

// -------------------------------------------------------------------

// libpartmsg

// required string name = 1;
inline bool libpartmsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void libpartmsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void libpartmsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void libpartmsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& libpartmsg::name() const {
  // @@protoc_insertion_point(field_get:libpartmsg.name)
  return *name_;
}
inline void libpartmsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.name)
}
inline void libpartmsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.name)
}
inline void libpartmsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.name)
}
inline ::std::string* libpartmsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.name)
  return name_;
}
inline ::std::string* libpartmsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.name)
}

// required string twocode = 2;
inline bool libpartmsg::has_twocode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void libpartmsg::set_has_twocode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void libpartmsg::clear_has_twocode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void libpartmsg::clear_twocode() {
  if (twocode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    twocode_->clear();
  }
  clear_has_twocode();
}
inline const ::std::string& libpartmsg::twocode() const {
  // @@protoc_insertion_point(field_get:libpartmsg.twocode)
  return *twocode_;
}
inline void libpartmsg::set_twocode(const ::std::string& value) {
  set_has_twocode();
  if (twocode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    twocode_ = new ::std::string;
  }
  twocode_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.twocode)
}
inline void libpartmsg::set_twocode(const char* value) {
  set_has_twocode();
  if (twocode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    twocode_ = new ::std::string;
  }
  twocode_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.twocode)
}
inline void libpartmsg::set_twocode(const char* value, size_t size) {
  set_has_twocode();
  if (twocode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    twocode_ = new ::std::string;
  }
  twocode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.twocode)
}
inline ::std::string* libpartmsg::mutable_twocode() {
  set_has_twocode();
  if (twocode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    twocode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.twocode)
  return twocode_;
}
inline ::std::string* libpartmsg::release_twocode() {
  clear_has_twocode();
  if (twocode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = twocode_;
    twocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_twocode(::std::string* twocode) {
  if (twocode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete twocode_;
  }
  if (twocode) {
    set_has_twocode();
    twocode_ = twocode;
  } else {
    clear_has_twocode();
    twocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.twocode)
}

// required string threecode = 3;
inline bool libpartmsg::has_threecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void libpartmsg::set_has_threecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void libpartmsg::clear_has_threecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void libpartmsg::clear_threecode() {
  if (threecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    threecode_->clear();
  }
  clear_has_threecode();
}
inline const ::std::string& libpartmsg::threecode() const {
  // @@protoc_insertion_point(field_get:libpartmsg.threecode)
  return *threecode_;
}
inline void libpartmsg::set_threecode(const ::std::string& value) {
  set_has_threecode();
  if (threecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    threecode_ = new ::std::string;
  }
  threecode_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.threecode)
}
inline void libpartmsg::set_threecode(const char* value) {
  set_has_threecode();
  if (threecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    threecode_ = new ::std::string;
  }
  threecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.threecode)
}
inline void libpartmsg::set_threecode(const char* value, size_t size) {
  set_has_threecode();
  if (threecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    threecode_ = new ::std::string;
  }
  threecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.threecode)
}
inline ::std::string* libpartmsg::mutable_threecode() {
  set_has_threecode();
  if (threecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    threecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.threecode)
  return threecode_;
}
inline ::std::string* libpartmsg::release_threecode() {
  clear_has_threecode();
  if (threecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = threecode_;
    threecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_threecode(::std::string* threecode) {
  if (threecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete threecode_;
  }
  if (threecode) {
    set_has_threecode();
    threecode_ = threecode;
  } else {
    clear_has_threecode();
    threecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.threecode)
}

// required string type = 4;
inline bool libpartmsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void libpartmsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void libpartmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void libpartmsg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& libpartmsg::type() const {
  // @@protoc_insertion_point(field_get:libpartmsg.type)
  return *type_;
}
inline void libpartmsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.type)
}
inline void libpartmsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.type)
}
inline void libpartmsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.type)
}
inline ::std::string* libpartmsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.type)
  return type_;
}
inline ::std::string* libpartmsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.type)
}

// required string parentid = 5;
inline bool libpartmsg::has_parentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void libpartmsg::set_has_parentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void libpartmsg::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void libpartmsg::clear_parentid() {
  if (parentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentid_->clear();
  }
  clear_has_parentid();
}
inline const ::std::string& libpartmsg::parentid() const {
  // @@protoc_insertion_point(field_get:libpartmsg.parentid)
  return *parentid_;
}
inline void libpartmsg::set_parentid(const ::std::string& value) {
  set_has_parentid();
  if (parentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentid_ = new ::std::string;
  }
  parentid_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.parentid)
}
inline void libpartmsg::set_parentid(const char* value) {
  set_has_parentid();
  if (parentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentid_ = new ::std::string;
  }
  parentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.parentid)
}
inline void libpartmsg::set_parentid(const char* value, size_t size) {
  set_has_parentid();
  if (parentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentid_ = new ::std::string;
  }
  parentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.parentid)
}
inline ::std::string* libpartmsg::mutable_parentid() {
  set_has_parentid();
  if (parentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.parentid)
  return parentid_;
}
inline ::std::string* libpartmsg::release_parentid() {
  clear_has_parentid();
  if (parentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parentid_;
    parentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_parentid(::std::string* parentid) {
  if (parentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentid_;
  }
  if (parentid) {
    set_has_parentid();
    parentid_ = parentid;
  } else {
    clear_has_parentid();
    parentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.parentid)
}

// required string mastercode = 6;
inline bool libpartmsg::has_mastercode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void libpartmsg::set_has_mastercode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void libpartmsg::clear_has_mastercode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void libpartmsg::clear_mastercode() {
  if (mastercode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastercode_->clear();
  }
  clear_has_mastercode();
}
inline const ::std::string& libpartmsg::mastercode() const {
  // @@protoc_insertion_point(field_get:libpartmsg.mastercode)
  return *mastercode_;
}
inline void libpartmsg::set_mastercode(const ::std::string& value) {
  set_has_mastercode();
  if (mastercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastercode_ = new ::std::string;
  }
  mastercode_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.mastercode)
}
inline void libpartmsg::set_mastercode(const char* value) {
  set_has_mastercode();
  if (mastercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastercode_ = new ::std::string;
  }
  mastercode_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.mastercode)
}
inline void libpartmsg::set_mastercode(const char* value, size_t size) {
  set_has_mastercode();
  if (mastercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastercode_ = new ::std::string;
  }
  mastercode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.mastercode)
}
inline ::std::string* libpartmsg::mutable_mastercode() {
  set_has_mastercode();
  if (mastercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastercode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.mastercode)
  return mastercode_;
}
inline ::std::string* libpartmsg::release_mastercode() {
  clear_has_mastercode();
  if (mastercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastercode_;
    mastercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_mastercode(::std::string* mastercode) {
  if (mastercode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastercode_;
  }
  if (mastercode) {
    set_has_mastercode();
    mastercode_ = mastercode;
  } else {
    clear_has_mastercode();
    mastercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.mastercode)
}

// required string parametercode = 7;
inline bool libpartmsg::has_parametercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void libpartmsg::set_has_parametercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void libpartmsg::clear_has_parametercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void libpartmsg::clear_parametercode() {
  if (parametercode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parametercode_->clear();
  }
  clear_has_parametercode();
}
inline const ::std::string& libpartmsg::parametercode() const {
  // @@protoc_insertion_point(field_get:libpartmsg.parametercode)
  return *parametercode_;
}
inline void libpartmsg::set_parametercode(const ::std::string& value) {
  set_has_parametercode();
  if (parametercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parametercode_ = new ::std::string;
  }
  parametercode_->assign(value);
  // @@protoc_insertion_point(field_set:libpartmsg.parametercode)
}
inline void libpartmsg::set_parametercode(const char* value) {
  set_has_parametercode();
  if (parametercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parametercode_ = new ::std::string;
  }
  parametercode_->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.parametercode)
}
inline void libpartmsg::set_parametercode(const char* value, size_t size) {
  set_has_parametercode();
  if (parametercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parametercode_ = new ::std::string;
  }
  parametercode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.parametercode)
}
inline ::std::string* libpartmsg::mutable_parametercode() {
  set_has_parametercode();
  if (parametercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parametercode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libpartmsg.parametercode)
  return parametercode_;
}
inline ::std::string* libpartmsg::release_parametercode() {
  clear_has_parametercode();
  if (parametercode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parametercode_;
    parametercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void libpartmsg::set_allocated_parametercode(::std::string* parametercode) {
  if (parametercode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parametercode_;
  }
  if (parametercode) {
    set_has_parametercode();
    parametercode_ = parametercode;
  } else {
    clear_has_parametercode();
    parametercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libpartmsg.parametercode)
}

// repeated string names = 8;
inline int libpartmsg::names_size() const {
  return names_.size();
}
inline void libpartmsg::clear_names() {
  names_.Clear();
}
inline const ::std::string& libpartmsg::names(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.names)
  return names_.Get(index);
}
inline ::std::string* libpartmsg::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.names)
  return names_.Mutable(index);
}
inline void libpartmsg::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libpartmsg.names)
  names_.Mutable(index)->assign(value);
}
inline void libpartmsg::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.names)
}
inline void libpartmsg::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.names)
}
inline ::std::string* libpartmsg::add_names() {
  return names_.Add();
}
inline void libpartmsg::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libpartmsg.names)
}
inline void libpartmsg::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libpartmsg.names)
}
inline void libpartmsg::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libpartmsg.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
libpartmsg::names() const {
  // @@protoc_insertion_point(field_list:libpartmsg.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
libpartmsg::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.names)
  return &names_;
}

// repeated double doubles = 9;
inline int libpartmsg::doubles_size() const {
  return doubles_.size();
}
inline void libpartmsg::clear_doubles() {
  doubles_.Clear();
}
inline double libpartmsg::doubles(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.doubles)
  return doubles_.Get(index);
}
inline void libpartmsg::set_doubles(int index, double value) {
  doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:libpartmsg.doubles)
}
inline void libpartmsg::add_doubles(double value) {
  doubles_.Add(value);
  // @@protoc_insertion_point(field_add:libpartmsg.doubles)
}
inline const ::google::protobuf::RepeatedField< double >&
libpartmsg::doubles() const {
  // @@protoc_insertion_point(field_list:libpartmsg.doubles)
  return doubles_;
}
inline ::google::protobuf::RepeatedField< double >*
libpartmsg::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.doubles)
  return &doubles_;
}

// repeated string strings = 10;
inline int libpartmsg::strings_size() const {
  return strings_.size();
}
inline void libpartmsg::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& libpartmsg::strings(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.strings)
  return strings_.Get(index);
}
inline ::std::string* libpartmsg::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.strings)
  return strings_.Mutable(index);
}
inline void libpartmsg::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libpartmsg.strings)
  strings_.Mutable(index)->assign(value);
}
inline void libpartmsg::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.strings)
}
inline void libpartmsg::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.strings)
}
inline ::std::string* libpartmsg::add_strings() {
  return strings_.Add();
}
inline void libpartmsg::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libpartmsg.strings)
}
inline void libpartmsg::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libpartmsg.strings)
}
inline void libpartmsg::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libpartmsg.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
libpartmsg::strings() const {
  // @@protoc_insertion_point(field_list:libpartmsg.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
libpartmsg::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.strings)
  return &strings_;
}

// repeated int32 integers = 11;
inline int libpartmsg::integers_size() const {
  return integers_.size();
}
inline void libpartmsg::clear_integers() {
  integers_.Clear();
}
inline ::google::protobuf::int32 libpartmsg::integers(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.integers)
  return integers_.Get(index);
}
inline void libpartmsg::set_integers(int index, ::google::protobuf::int32 value) {
  integers_.Set(index, value);
  // @@protoc_insertion_point(field_set:libpartmsg.integers)
}
inline void libpartmsg::add_integers(::google::protobuf::int32 value) {
  integers_.Add(value);
  // @@protoc_insertion_point(field_add:libpartmsg.integers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
libpartmsg::integers() const {
  // @@protoc_insertion_point(field_list:libpartmsg.integers)
  return integers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
libpartmsg::mutable_integers() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.integers)
  return &integers_;
}

// repeated bool booleans = 12;
inline int libpartmsg::booleans_size() const {
  return booleans_.size();
}
inline void libpartmsg::clear_booleans() {
  booleans_.Clear();
}
inline bool libpartmsg::booleans(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.booleans)
  return booleans_.Get(index);
}
inline void libpartmsg::set_booleans(int index, bool value) {
  booleans_.Set(index, value);
  // @@protoc_insertion_point(field_set:libpartmsg.booleans)
}
inline void libpartmsg::add_booleans(bool value) {
  booleans_.Add(value);
  // @@protoc_insertion_point(field_add:libpartmsg.booleans)
}
inline const ::google::protobuf::RepeatedField< bool >&
libpartmsg::booleans() const {
  // @@protoc_insertion_point(field_list:libpartmsg.booleans)
  return booleans_;
}
inline ::google::protobuf::RepeatedField< bool >*
libpartmsg::mutable_booleans() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.booleans)
  return &booleans_;
}

// repeated string paramtype = 13;
inline int libpartmsg::paramtype_size() const {
  return paramtype_.size();
}
inline void libpartmsg::clear_paramtype() {
  paramtype_.Clear();
}
inline const ::std::string& libpartmsg::paramtype(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.paramtype)
  return paramtype_.Get(index);
}
inline ::std::string* libpartmsg::mutable_paramtype(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.paramtype)
  return paramtype_.Mutable(index);
}
inline void libpartmsg::set_paramtype(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libpartmsg.paramtype)
  paramtype_.Mutable(index)->assign(value);
}
inline void libpartmsg::set_paramtype(int index, const char* value) {
  paramtype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libpartmsg.paramtype)
}
inline void libpartmsg::set_paramtype(int index, const char* value, size_t size) {
  paramtype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libpartmsg.paramtype)
}
inline ::std::string* libpartmsg::add_paramtype() {
  return paramtype_.Add();
}
inline void libpartmsg::add_paramtype(const ::std::string& value) {
  paramtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libpartmsg.paramtype)
}
inline void libpartmsg::add_paramtype(const char* value) {
  paramtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libpartmsg.paramtype)
}
inline void libpartmsg::add_paramtype(const char* value, size_t size) {
  paramtype_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libpartmsg.paramtype)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
libpartmsg::paramtype() const {
  // @@protoc_insertion_point(field_list:libpartmsg.paramtype)
  return paramtype_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
libpartmsg::mutable_paramtype() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.paramtype)
  return &paramtype_;
}

// repeated .intarray intarrays = 14;
inline int libpartmsg::intarrays_size() const {
  return intarrays_.size();
}
inline void libpartmsg::clear_intarrays() {
  intarrays_.Clear();
}
inline const ::intarray& libpartmsg::intarrays(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.intarrays)
  return intarrays_.Get(index);
}
inline ::intarray* libpartmsg::mutable_intarrays(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.intarrays)
  return intarrays_.Mutable(index);
}
inline ::intarray* libpartmsg::add_intarrays() {
  // @@protoc_insertion_point(field_add:libpartmsg.intarrays)
  return intarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::intarray >&
libpartmsg::intarrays() const {
  // @@protoc_insertion_point(field_list:libpartmsg.intarrays)
  return intarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::intarray >*
libpartmsg::mutable_intarrays() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.intarrays)
  return &intarrays_;
}

// repeated .doublearray doublearrays = 15;
inline int libpartmsg::doublearrays_size() const {
  return doublearrays_.size();
}
inline void libpartmsg::clear_doublearrays() {
  doublearrays_.Clear();
}
inline const ::doublearray& libpartmsg::doublearrays(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.doublearrays)
  return doublearrays_.Get(index);
}
inline ::doublearray* libpartmsg::mutable_doublearrays(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.doublearrays)
  return doublearrays_.Mutable(index);
}
inline ::doublearray* libpartmsg::add_doublearrays() {
  // @@protoc_insertion_point(field_add:libpartmsg.doublearrays)
  return doublearrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::doublearray >&
libpartmsg::doublearrays() const {
  // @@protoc_insertion_point(field_list:libpartmsg.doublearrays)
  return doublearrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::doublearray >*
libpartmsg::mutable_doublearrays() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.doublearrays)
  return &doublearrays_;
}

// repeated .boolarray boolarrays = 16;
inline int libpartmsg::boolarrays_size() const {
  return boolarrays_.size();
}
inline void libpartmsg::clear_boolarrays() {
  boolarrays_.Clear();
}
inline const ::boolarray& libpartmsg::boolarrays(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.boolarrays)
  return boolarrays_.Get(index);
}
inline ::boolarray* libpartmsg::mutable_boolarrays(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.boolarrays)
  return boolarrays_.Mutable(index);
}
inline ::boolarray* libpartmsg::add_boolarrays() {
  // @@protoc_insertion_point(field_add:libpartmsg.boolarrays)
  return boolarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::boolarray >&
libpartmsg::boolarrays() const {
  // @@protoc_insertion_point(field_list:libpartmsg.boolarrays)
  return boolarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::boolarray >*
libpartmsg::mutable_boolarrays() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.boolarrays)
  return &boolarrays_;
}

// repeated .stringarray stringarrays = 17;
inline int libpartmsg::stringarrays_size() const {
  return stringarrays_.size();
}
inline void libpartmsg::clear_stringarrays() {
  stringarrays_.Clear();
}
inline const ::stringarray& libpartmsg::stringarrays(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.stringarrays)
  return stringarrays_.Get(index);
}
inline ::stringarray* libpartmsg::mutable_stringarrays(int index) {
  // @@protoc_insertion_point(field_mutable:libpartmsg.stringarrays)
  return stringarrays_.Mutable(index);
}
inline ::stringarray* libpartmsg::add_stringarrays() {
  // @@protoc_insertion_point(field_add:libpartmsg.stringarrays)
  return stringarrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stringarray >&
libpartmsg::stringarrays() const {
  // @@protoc_insertion_point(field_list:libpartmsg.stringarrays)
  return stringarrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::stringarray >*
libpartmsg::mutable_stringarrays() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.stringarrays)
  return &stringarrays_;
}

// repeated bool isarray = 18;
inline int libpartmsg::isarray_size() const {
  return isarray_.size();
}
inline void libpartmsg::clear_isarray() {
  isarray_.Clear();
}
inline bool libpartmsg::isarray(int index) const {
  // @@protoc_insertion_point(field_get:libpartmsg.isarray)
  return isarray_.Get(index);
}
inline void libpartmsg::set_isarray(int index, bool value) {
  isarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:libpartmsg.isarray)
}
inline void libpartmsg::add_isarray(bool value) {
  isarray_.Add(value);
  // @@protoc_insertion_point(field_add:libpartmsg.isarray)
}
inline const ::google::protobuf::RepeatedField< bool >&
libpartmsg::isarray() const {
  // @@protoc_insertion_point(field_list:libpartmsg.isarray)
  return isarray_;
}
inline ::google::protobuf::RepeatedField< bool >*
libpartmsg::mutable_isarray() {
  // @@protoc_insertion_point(field_mutable_list:libpartmsg.isarray)
  return &isarray_;
}

// -------------------------------------------------------------------

// profilemsg

// required .pointsmessage pts = 1;
inline bool profilemsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void profilemsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void profilemsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void profilemsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& profilemsg::pts() const {
  // @@protoc_insertion_point(field_get:profilemsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* profilemsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:profilemsg.pts)
  return pts_;
}
inline ::pointsmessage* profilemsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void profilemsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:profilemsg.pts)
}

// required .polyarcsmessage arcs = 2;
inline bool profilemsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void profilemsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void profilemsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void profilemsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& profilemsg::arcs() const {
  // @@protoc_insertion_point(field_get:profilemsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* profilemsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:profilemsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* profilemsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void profilemsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:profilemsg.arcs)
}

// required string material = 3;
inline bool profilemsg::has_material() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void profilemsg::set_has_material() {
  _has_bits_[0] |= 0x00000004u;
}
inline void profilemsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void profilemsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& profilemsg::material() const {
  // @@protoc_insertion_point(field_get:profilemsg.material)
  return *material_;
}
inline void profilemsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:profilemsg.material)
}
inline void profilemsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:profilemsg.material)
}
inline void profilemsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:profilemsg.material)
}
inline ::std::string* profilemsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:profilemsg.material)
  return material_;
}
inline ::std::string* profilemsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void profilemsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:profilemsg.material)
}

// required string name = 4;
inline bool profilemsg::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void profilemsg::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void profilemsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void profilemsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& profilemsg::name() const {
  // @@protoc_insertion_point(field_get:profilemsg.name)
  return *name_;
}
inline void profilemsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:profilemsg.name)
}
inline void profilemsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:profilemsg.name)
}
inline void profilemsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:profilemsg.name)
}
inline ::std::string* profilemsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:profilemsg.name)
  return name_;
}
inline ::std::string* profilemsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void profilemsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:profilemsg.name)
}

// -------------------------------------------------------------------

// layermsg

// required string name = 1;
inline bool layermsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void layermsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void layermsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void layermsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& layermsg::name() const {
  // @@protoc_insertion_point(field_get:layermsg.name)
  return *name_;
}
inline void layermsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:layermsg.name)
}
inline void layermsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:layermsg.name)
}
inline void layermsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:layermsg.name)
}
inline ::std::string* layermsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:layermsg.name)
  return name_;
}
inline ::std::string* layermsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void layermsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:layermsg.name)
}

// optional int32 connection = 2;
inline bool layermsg::has_connection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void layermsg::set_has_connection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void layermsg::clear_has_connection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void layermsg::clear_connection() {
  connection_ = 0;
  clear_has_connection();
}
inline ::google::protobuf::int32 layermsg::connection() const {
  // @@protoc_insertion_point(field_get:layermsg.connection)
  return connection_;
}
inline void layermsg::set_connection(::google::protobuf::int32 value) {
  set_has_connection();
  connection_ = value;
  // @@protoc_insertion_point(field_set:layermsg.connection)
}

// -------------------------------------------------------------------

// layerelementmsg

// required string guid = 1;
inline bool layerelementmsg::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void layerelementmsg::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void layerelementmsg::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void layerelementmsg::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& layerelementmsg::guid() const {
  // @@protoc_insertion_point(field_get:layerelementmsg.guid)
  return *guid_;
}
inline void layerelementmsg::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:layerelementmsg.guid)
}
inline void layerelementmsg::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:layerelementmsg.guid)
}
inline void layerelementmsg::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:layerelementmsg.guid)
}
inline ::std::string* layerelementmsg::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:layerelementmsg.guid)
  return guid_;
}
inline ::std::string* layerelementmsg::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void layerelementmsg::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:layerelementmsg.guid)
}

// required string layer = 2;
inline bool layerelementmsg::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void layerelementmsg::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void layerelementmsg::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void layerelementmsg::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& layerelementmsg::layer() const {
  // @@protoc_insertion_point(field_get:layerelementmsg.layer)
  return *layer_;
}
inline void layerelementmsg::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:layerelementmsg.layer)
}
inline void layerelementmsg::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:layerelementmsg.layer)
}
inline void layerelementmsg::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:layerelementmsg.layer)
}
inline ::std::string* layerelementmsg::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:layerelementmsg.layer)
  return layer_;
}
inline ::std::string* layerelementmsg::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void layerelementmsg::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:layerelementmsg.layer)
}

// -------------------------------------------------------------------

// splinemsg

// required .pointsmessage points = 1;
inline bool splinemsg::has_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void splinemsg::set_has_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void splinemsg::clear_has_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void splinemsg::clear_points() {
  if (points_ != NULL) points_->::pointsmessage::Clear();
  clear_has_points();
}
inline const ::pointsmessage& splinemsg::points() const {
  // @@protoc_insertion_point(field_get:splinemsg.points)
  return points_ != NULL ? *points_ : *default_instance_->points_;
}
inline ::pointsmessage* splinemsg::mutable_points() {
  set_has_points();
  if (points_ == NULL) points_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:splinemsg.points)
  return points_;
}
inline ::pointsmessage* splinemsg::release_points() {
  clear_has_points();
  ::pointsmessage* temp = points_;
  points_ = NULL;
  return temp;
}
inline void splinemsg::set_allocated_points(::pointsmessage* points) {
  delete points_;
  points_ = points;
  if (points) {
    set_has_points();
  } else {
    clear_has_points();
  }
  // @@protoc_insertion_point(field_set_allocated:splinemsg.points)
}

// required bool closed = 2;
inline bool splinemsg::has_closed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void splinemsg::set_has_closed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void splinemsg::clear_has_closed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void splinemsg::clear_closed() {
  closed_ = false;
  clear_has_closed();
}
inline bool splinemsg::closed() const {
  // @@protoc_insertion_point(field_get:splinemsg.closed)
  return closed_;
}
inline void splinemsg::set_closed(bool value) {
  set_has_closed();
  closed_ = value;
  // @@protoc_insertion_point(field_set:splinemsg.closed)
}

// -------------------------------------------------------------------

// linemsg

// optional .pointsmessage pts = 1;
inline bool linemsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void linemsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void linemsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void linemsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& linemsg::pts() const {
  // @@protoc_insertion_point(field_get:linemsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* linemsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:linemsg.pts)
  return pts_;
}
inline ::pointsmessage* linemsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void linemsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:linemsg.pts)
}

// -------------------------------------------------------------------

// polylinemsg

// optional .pointsmessage pts = 1;
inline bool polylinemsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void polylinemsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void polylinemsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void polylinemsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& polylinemsg::pts() const {
  // @@protoc_insertion_point(field_get:polylinemsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* polylinemsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:polylinemsg.pts)
  return pts_;
}
inline ::pointsmessage* polylinemsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void polylinemsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:polylinemsg.pts)
}

// optional .polyarcsmessage arcs = 2;
inline bool polylinemsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void polylinemsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void polylinemsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void polylinemsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& polylinemsg::arcs() const {
  // @@protoc_insertion_point(field_get:polylinemsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* polylinemsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:polylinemsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* polylinemsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void polylinemsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:polylinemsg.arcs)
}

// -------------------------------------------------------------------

// getlinesmsg

// repeated .linemsg lines = 1;
inline int getlinesmsg::lines_size() const {
  return lines_.size();
}
inline void getlinesmsg::clear_lines() {
  lines_.Clear();
}
inline const ::linemsg& getlinesmsg::lines(int index) const {
  // @@protoc_insertion_point(field_get:getlinesmsg.lines)
  return lines_.Get(index);
}
inline ::linemsg* getlinesmsg::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:getlinesmsg.lines)
  return lines_.Mutable(index);
}
inline ::linemsg* getlinesmsg::add_lines() {
  // @@protoc_insertion_point(field_add:getlinesmsg.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::linemsg >&
getlinesmsg::lines() const {
  // @@protoc_insertion_point(field_list:getlinesmsg.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::linemsg >*
getlinesmsg::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:getlinesmsg.lines)
  return &lines_;
}

// repeated string guids = 2;
inline int getlinesmsg::guids_size() const {
  return guids_.size();
}
inline void getlinesmsg::clear_guids() {
  guids_.Clear();
}
inline const ::std::string& getlinesmsg::guids(int index) const {
  // @@protoc_insertion_point(field_get:getlinesmsg.guids)
  return guids_.Get(index);
}
inline ::std::string* getlinesmsg::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:getlinesmsg.guids)
  return guids_.Mutable(index);
}
inline void getlinesmsg::set_guids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:getlinesmsg.guids)
  guids_.Mutable(index)->assign(value);
}
inline void getlinesmsg::set_guids(int index, const char* value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:getlinesmsg.guids)
}
inline void getlinesmsg::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:getlinesmsg.guids)
}
inline ::std::string* getlinesmsg::add_guids() {
  return guids_.Add();
}
inline void getlinesmsg::add_guids(const ::std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:getlinesmsg.guids)
}
inline void getlinesmsg::add_guids(const char* value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:getlinesmsg.guids)
}
inline void getlinesmsg::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:getlinesmsg.guids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
getlinesmsg::guids() const {
  // @@protoc_insertion_point(field_list:getlinesmsg.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
getlinesmsg::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:getlinesmsg.guids)
  return &guids_;
}

// -------------------------------------------------------------------

// getpolylinesmsg

// repeated .polylinemsg polylines = 1;
inline int getpolylinesmsg::polylines_size() const {
  return polylines_.size();
}
inline void getpolylinesmsg::clear_polylines() {
  polylines_.Clear();
}
inline const ::polylinemsg& getpolylinesmsg::polylines(int index) const {
  // @@protoc_insertion_point(field_get:getpolylinesmsg.polylines)
  return polylines_.Get(index);
}
inline ::polylinemsg* getpolylinesmsg::mutable_polylines(int index) {
  // @@protoc_insertion_point(field_mutable:getpolylinesmsg.polylines)
  return polylines_.Mutable(index);
}
inline ::polylinemsg* getpolylinesmsg::add_polylines() {
  // @@protoc_insertion_point(field_add:getpolylinesmsg.polylines)
  return polylines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::polylinemsg >&
getpolylinesmsg::polylines() const {
  // @@protoc_insertion_point(field_list:getpolylinesmsg.polylines)
  return polylines_;
}
inline ::google::protobuf::RepeatedPtrField< ::polylinemsg >*
getpolylinesmsg::mutable_polylines() {
  // @@protoc_insertion_point(field_mutable_list:getpolylinesmsg.polylines)
  return &polylines_;
}

// repeated string guids = 2;
inline int getpolylinesmsg::guids_size() const {
  return guids_.size();
}
inline void getpolylinesmsg::clear_guids() {
  guids_.Clear();
}
inline const ::std::string& getpolylinesmsg::guids(int index) const {
  // @@protoc_insertion_point(field_get:getpolylinesmsg.guids)
  return guids_.Get(index);
}
inline ::std::string* getpolylinesmsg::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:getpolylinesmsg.guids)
  return guids_.Mutable(index);
}
inline void getpolylinesmsg::set_guids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:getpolylinesmsg.guids)
  guids_.Mutable(index)->assign(value);
}
inline void getpolylinesmsg::set_guids(int index, const char* value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:getpolylinesmsg.guids)
}
inline void getpolylinesmsg::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:getpolylinesmsg.guids)
}
inline ::std::string* getpolylinesmsg::add_guids() {
  return guids_.Add();
}
inline void getpolylinesmsg::add_guids(const ::std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:getpolylinesmsg.guids)
}
inline void getpolylinesmsg::add_guids(const char* value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:getpolylinesmsg.guids)
}
inline void getpolylinesmsg::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:getpolylinesmsg.guids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
getpolylinesmsg::guids() const {
  // @@protoc_insertion_point(field_list:getpolylinesmsg.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
getpolylinesmsg::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:getpolylinesmsg.guids)
  return &guids_;
}

// -------------------------------------------------------------------

// revshellmsg

// optional .pointsmessage pts = 1;
inline bool revshellmsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void revshellmsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void revshellmsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void revshellmsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& revshellmsg::pts() const {
  // @@protoc_insertion_point(field_get:revshellmsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* revshellmsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:revshellmsg.pts)
  return pts_;
}
inline ::pointsmessage* revshellmsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void revshellmsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:revshellmsg.pts)
}

// optional .polyarcsmessage arcs = 2;
inline bool revshellmsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void revshellmsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void revshellmsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void revshellmsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& revshellmsg::arcs() const {
  // @@protoc_insertion_point(field_get:revshellmsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* revshellmsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:revshellmsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* revshellmsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void revshellmsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:revshellmsg.arcs)
}

// required int32 level = 3;
inline bool revshellmsg::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void revshellmsg::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void revshellmsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void revshellmsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 revshellmsg::level() const {
  // @@protoc_insertion_point(field_get:revshellmsg.level)
  return level_;
}
inline void revshellmsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.level)
}

// required bool flipped = 4;
inline bool revshellmsg::has_flipped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void revshellmsg::set_has_flipped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void revshellmsg::clear_has_flipped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void revshellmsg::clear_flipped() {
  flipped_ = false;
  clear_has_flipped();
}
inline bool revshellmsg::flipped() const {
  // @@protoc_insertion_point(field_get:revshellmsg.flipped)
  return flipped_;
}
inline void revshellmsg::set_flipped(bool value) {
  set_has_flipped();
  flipped_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.flipped)
}

// required double slantangle = 5;
inline bool revshellmsg::has_slantangle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void revshellmsg::set_has_slantangle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void revshellmsg::clear_has_slantangle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void revshellmsg::clear_slantangle() {
  slantangle_ = 0;
  clear_has_slantangle();
}
inline double revshellmsg::slantangle() const {
  // @@protoc_insertion_point(field_get:revshellmsg.slantangle)
  return slantangle_;
}
inline void revshellmsg::set_slantangle(double value) {
  set_has_slantangle();
  slantangle_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.slantangle)
}

// required double revangle = 6;
inline bool revshellmsg::has_revangle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void revshellmsg::set_has_revangle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void revshellmsg::clear_has_revangle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void revshellmsg::clear_revangle() {
  revangle_ = 0;
  clear_has_revangle();
}
inline double revshellmsg::revangle() const {
  // @@protoc_insertion_point(field_get:revshellmsg.revangle)
  return revangle_;
}
inline void revshellmsg::set_revangle(double value) {
  set_has_revangle();
  revangle_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.revangle)
}

// required double distortionangle = 7;
inline bool revshellmsg::has_distortionangle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void revshellmsg::set_has_distortionangle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void revshellmsg::clear_has_distortionangle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void revshellmsg::clear_distortionangle() {
  distortionangle_ = 0;
  clear_has_distortionangle();
}
inline double revshellmsg::distortionangle() const {
  // @@protoc_insertion_point(field_get:revshellmsg.distortionangle)
  return distortionangle_;
}
inline void revshellmsg::set_distortionangle(double value) {
  set_has_distortionangle();
  distortionangle_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.distortionangle)
}

// required double begangle = 8;
inline bool revshellmsg::has_begangle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void revshellmsg::set_has_begangle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void revshellmsg::clear_has_begangle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void revshellmsg::clear_begangle() {
  begangle_ = 0;
  clear_has_begangle();
}
inline double revshellmsg::begangle() const {
  // @@protoc_insertion_point(field_get:revshellmsg.begangle)
  return begangle_;
}
inline void revshellmsg::set_begangle(double value) {
  set_has_begangle();
  begangle_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.begangle)
}

// repeated double axis = 9;
inline int revshellmsg::axis_size() const {
  return axis_.size();
}
inline void revshellmsg::clear_axis() {
  axis_.Clear();
}
inline double revshellmsg::axis(int index) const {
  // @@protoc_insertion_point(field_get:revshellmsg.axis)
  return axis_.Get(index);
}
inline void revshellmsg::set_axis(int index, double value) {
  axis_.Set(index, value);
  // @@protoc_insertion_point(field_set:revshellmsg.axis)
}
inline void revshellmsg::add_axis(double value) {
  axis_.Add(value);
  // @@protoc_insertion_point(field_add:revshellmsg.axis)
}
inline const ::google::protobuf::RepeatedField< double >&
revshellmsg::axis() const {
  // @@protoc_insertion_point(field_list:revshellmsg.axis)
  return axis_;
}
inline ::google::protobuf::RepeatedField< double >*
revshellmsg::mutable_axis() {
  // @@protoc_insertion_point(field_mutable_list:revshellmsg.axis)
  return &axis_;
}

// required string material = 10;
inline bool revshellmsg::has_material() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void revshellmsg::set_has_material() {
  _has_bits_[0] |= 0x00000200u;
}
inline void revshellmsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void revshellmsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& revshellmsg::material() const {
  // @@protoc_insertion_point(field_get:revshellmsg.material)
  return *material_;
}
inline void revshellmsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:revshellmsg.material)
}
inline void revshellmsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:revshellmsg.material)
}
inline void revshellmsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:revshellmsg.material)
}
inline ::std::string* revshellmsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:revshellmsg.material)
  return material_;
}
inline ::std::string* revshellmsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void revshellmsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:revshellmsg.material)
}

// required string type = 11;
inline bool revshellmsg::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void revshellmsg::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void revshellmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void revshellmsg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& revshellmsg::type() const {
  // @@protoc_insertion_point(field_get:revshellmsg.type)
  return *type_;
}
inline void revshellmsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:revshellmsg.type)
}
inline void revshellmsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:revshellmsg.type)
}
inline void revshellmsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:revshellmsg.type)
}
inline ::std::string* revshellmsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:revshellmsg.type)
  return type_;
}
inline ::std::string* revshellmsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void revshellmsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:revshellmsg.type)
}

// required double thickness = 12;
inline bool revshellmsg::has_thickness() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void revshellmsg::set_has_thickness() {
  _has_bits_[0] |= 0x00000800u;
}
inline void revshellmsg::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void revshellmsg::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double revshellmsg::thickness() const {
  // @@protoc_insertion_point(field_get:revshellmsg.thickness)
  return thickness_;
}
inline void revshellmsg::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.thickness)
}

// required double height = 13;
inline bool revshellmsg::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void revshellmsg::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void revshellmsg::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void revshellmsg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double revshellmsg::height() const {
  // @@protoc_insertion_point(field_get:revshellmsg.height)
  return height_;
}
inline void revshellmsg::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:revshellmsg.height)
}

// -------------------------------------------------------------------

// extshellmsg

// optional .pointsmessage pts = 1;
inline bool extshellmsg::has_pts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extshellmsg::set_has_pts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extshellmsg::clear_has_pts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extshellmsg::clear_pts() {
  if (pts_ != NULL) pts_->::pointsmessage::Clear();
  clear_has_pts();
}
inline const ::pointsmessage& extshellmsg::pts() const {
  // @@protoc_insertion_point(field_get:extshellmsg.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::pointsmessage* extshellmsg::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::pointsmessage;
  // @@protoc_insertion_point(field_mutable:extshellmsg.pts)
  return pts_;
}
inline ::pointsmessage* extshellmsg::release_pts() {
  clear_has_pts();
  ::pointsmessage* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void extshellmsg::set_allocated_pts(::pointsmessage* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:extshellmsg.pts)
}

// optional .polyarcsmessage arcs = 2;
inline bool extshellmsg::has_arcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extshellmsg::set_has_arcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extshellmsg::clear_has_arcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extshellmsg::clear_arcs() {
  if (arcs_ != NULL) arcs_->::polyarcsmessage::Clear();
  clear_has_arcs();
}
inline const ::polyarcsmessage& extshellmsg::arcs() const {
  // @@protoc_insertion_point(field_get:extshellmsg.arcs)
  return arcs_ != NULL ? *arcs_ : *default_instance_->arcs_;
}
inline ::polyarcsmessage* extshellmsg::mutable_arcs() {
  set_has_arcs();
  if (arcs_ == NULL) arcs_ = new ::polyarcsmessage;
  // @@protoc_insertion_point(field_mutable:extshellmsg.arcs)
  return arcs_;
}
inline ::polyarcsmessage* extshellmsg::release_arcs() {
  clear_has_arcs();
  ::polyarcsmessage* temp = arcs_;
  arcs_ = NULL;
  return temp;
}
inline void extshellmsg::set_allocated_arcs(::polyarcsmessage* arcs) {
  delete arcs_;
  arcs_ = arcs;
  if (arcs) {
    set_has_arcs();
  } else {
    clear_has_arcs();
  }
  // @@protoc_insertion_point(field_set_allocated:extshellmsg.arcs)
}

// required int32 level = 3;
inline bool extshellmsg::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void extshellmsg::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void extshellmsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void extshellmsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 extshellmsg::level() const {
  // @@protoc_insertion_point(field_get:extshellmsg.level)
  return level_;
}
inline void extshellmsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.level)
}

// required bool flipped = 4;
inline bool extshellmsg::has_flipped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void extshellmsg::set_has_flipped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void extshellmsg::clear_has_flipped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void extshellmsg::clear_flipped() {
  flipped_ = false;
  clear_has_flipped();
}
inline bool extshellmsg::flipped() const {
  // @@protoc_insertion_point(field_get:extshellmsg.flipped)
  return flipped_;
}
inline void extshellmsg::set_flipped(bool value) {
  set_has_flipped();
  flipped_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.flipped)
}

// required double cextx = 5;
inline bool extshellmsg::has_cextx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void extshellmsg::set_has_cextx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void extshellmsg::clear_has_cextx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void extshellmsg::clear_cextx() {
  cextx_ = 0;
  clear_has_cextx();
}
inline double extshellmsg::cextx() const {
  // @@protoc_insertion_point(field_get:extshellmsg.cextx)
  return cextx_;
}
inline void extshellmsg::set_cextx(double value) {
  set_has_cextx();
  cextx_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.cextx)
}

// required double cexty = 6;
inline bool extshellmsg::has_cexty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void extshellmsg::set_has_cexty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void extshellmsg::clear_has_cexty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void extshellmsg::clear_cexty() {
  cexty_ = 0;
  clear_has_cexty();
}
inline double extshellmsg::cexty() const {
  // @@protoc_insertion_point(field_get:extshellmsg.cexty)
  return cexty_;
}
inline void extshellmsg::set_cexty(double value) {
  set_has_cexty();
  cexty_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.cexty)
}

// required double extx = 7;
inline bool extshellmsg::has_extx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void extshellmsg::set_has_extx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void extshellmsg::clear_has_extx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void extshellmsg::clear_extx() {
  extx_ = 0;
  clear_has_extx();
}
inline double extshellmsg::extx() const {
  // @@protoc_insertion_point(field_get:extshellmsg.extx)
  return extx_;
}
inline void extshellmsg::set_extx(double value) {
  set_has_extx();
  extx_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.extx)
}

// required double exty = 8;
inline bool extshellmsg::has_exty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void extshellmsg::set_has_exty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void extshellmsg::clear_has_exty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void extshellmsg::clear_exty() {
  exty_ = 0;
  clear_has_exty();
}
inline double extshellmsg::exty() const {
  // @@protoc_insertion_point(field_get:extshellmsg.exty)
  return exty_;
}
inline void extshellmsg::set_exty(double value) {
  set_has_exty();
  exty_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.exty)
}

// required double extz = 9;
inline bool extshellmsg::has_extz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void extshellmsg::set_has_extz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void extshellmsg::clear_has_extz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void extshellmsg::clear_extz() {
  extz_ = 0;
  clear_has_extz();
}
inline double extshellmsg::extz() const {
  // @@protoc_insertion_point(field_get:extshellmsg.extz)
  return extz_;
}
inline void extshellmsg::set_extz(double value) {
  set_has_extz();
  extz_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.extz)
}

// repeated bool visible = 10;
inline int extshellmsg::visible_size() const {
  return visible_.size();
}
inline void extshellmsg::clear_visible() {
  visible_.Clear();
}
inline bool extshellmsg::visible(int index) const {
  // @@protoc_insertion_point(field_get:extshellmsg.visible)
  return visible_.Get(index);
}
inline void extshellmsg::set_visible(int index, bool value) {
  visible_.Set(index, value);
  // @@protoc_insertion_point(field_set:extshellmsg.visible)
}
inline void extshellmsg::add_visible(bool value) {
  visible_.Add(value);
  // @@protoc_insertion_point(field_add:extshellmsg.visible)
}
inline const ::google::protobuf::RepeatedField< bool >&
extshellmsg::visible() const {
  // @@protoc_insertion_point(field_list:extshellmsg.visible)
  return visible_;
}
inline ::google::protobuf::RepeatedField< bool >*
extshellmsg::mutable_visible() {
  // @@protoc_insertion_point(field_mutable_list:extshellmsg.visible)
  return &visible_;
}

// required string material = 11;
inline bool extshellmsg::has_material() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void extshellmsg::set_has_material() {
  _has_bits_[0] |= 0x00000400u;
}
inline void extshellmsg::clear_has_material() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void extshellmsg::clear_material() {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& extshellmsg::material() const {
  // @@protoc_insertion_point(field_get:extshellmsg.material)
  return *material_;
}
inline void extshellmsg::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set:extshellmsg.material)
}
inline void extshellmsg::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(value);
  // @@protoc_insertion_point(field_set_char:extshellmsg.material)
}
inline void extshellmsg::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extshellmsg.material)
}
inline ::std::string* extshellmsg::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extshellmsg.material)
  return material_;
}
inline ::std::string* extshellmsg::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void extshellmsg::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extshellmsg.material)
}

// required string type = 12;
inline bool extshellmsg::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void extshellmsg::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void extshellmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void extshellmsg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& extshellmsg::type() const {
  // @@protoc_insertion_point(field_get:extshellmsg.type)
  return *type_;
}
inline void extshellmsg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:extshellmsg.type)
}
inline void extshellmsg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:extshellmsg.type)
}
inline void extshellmsg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extshellmsg.type)
}
inline ::std::string* extshellmsg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extshellmsg.type)
  return type_;
}
inline ::std::string* extshellmsg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void extshellmsg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extshellmsg.type)
}

// required double thickness = 13;
inline bool extshellmsg::has_thickness() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void extshellmsg::set_has_thickness() {
  _has_bits_[0] |= 0x00001000u;
}
inline void extshellmsg::clear_has_thickness() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void extshellmsg::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double extshellmsg::thickness() const {
  // @@protoc_insertion_point(field_get:extshellmsg.thickness)
  return thickness_;
}
inline void extshellmsg::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:extshellmsg.thickness)
}

// -------------------------------------------------------------------

// rendermsg

// required string file = 1;
inline bool rendermsg::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rendermsg::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rendermsg::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rendermsg::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& rendermsg::file() const {
  // @@protoc_insertion_point(field_get:rendermsg.file)
  return *file_;
}
inline void rendermsg::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:rendermsg.file)
}
inline void rendermsg::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:rendermsg.file)
}
inline void rendermsg::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rendermsg.file)
}
inline ::std::string* rendermsg::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rendermsg.file)
  return file_;
}
inline ::std::string* rendermsg::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rendermsg::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rendermsg.file)
}

// -------------------------------------------------------------------

// cameramsg

// required double cx = 1;
inline bool cameramsg::has_cx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cameramsg::set_has_cx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cameramsg::clear_has_cx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cameramsg::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
inline double cameramsg::cx() const {
  // @@protoc_insertion_point(field_get:cameramsg.cx)
  return cx_;
}
inline void cameramsg::set_cx(double value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.cx)
}

// required double cy = 2;
inline bool cameramsg::has_cy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cameramsg::set_has_cy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cameramsg::clear_has_cy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cameramsg::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
inline double cameramsg::cy() const {
  // @@protoc_insertion_point(field_get:cameramsg.cy)
  return cy_;
}
inline void cameramsg::set_cy(double value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.cy)
}

// required double cz = 3;
inline bool cameramsg::has_cz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cameramsg::set_has_cz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cameramsg::clear_has_cz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cameramsg::clear_cz() {
  cz_ = 0;
  clear_has_cz();
}
inline double cameramsg::cz() const {
  // @@protoc_insertion_point(field_get:cameramsg.cz)
  return cz_;
}
inline void cameramsg::set_cz(double value) {
  set_has_cz();
  cz_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.cz)
}

// required double tx = 4;
inline bool cameramsg::has_tx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cameramsg::set_has_tx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cameramsg::clear_has_tx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cameramsg::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline double cameramsg::tx() const {
  // @@protoc_insertion_point(field_get:cameramsg.tx)
  return tx_;
}
inline void cameramsg::set_tx(double value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.tx)
}

// required double ty = 5;
inline bool cameramsg::has_ty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cameramsg::set_has_ty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cameramsg::clear_has_ty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cameramsg::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline double cameramsg::ty() const {
  // @@protoc_insertion_point(field_get:cameramsg.ty)
  return ty_;
}
inline void cameramsg::set_ty(double value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.ty)
}

// required double tz = 6;
inline bool cameramsg::has_tz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cameramsg::set_has_tz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cameramsg::clear_has_tz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cameramsg::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline double cameramsg::tz() const {
  // @@protoc_insertion_point(field_get:cameramsg.tz)
  return tz_;
}
inline void cameramsg::set_tz(double value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.tz)
}

// required double lens = 7;
inline bool cameramsg::has_lens() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cameramsg::set_has_lens() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cameramsg::clear_has_lens() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cameramsg::clear_lens() {
  lens_ = 0;
  clear_has_lens();
}
inline double cameramsg::lens() const {
  // @@protoc_insertion_point(field_get:cameramsg.lens)
  return lens_;
}
inline void cameramsg::set_lens(double value) {
  set_has_lens();
  lens_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.lens)
}

// required double sunazimuth = 8;
inline bool cameramsg::has_sunazimuth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cameramsg::set_has_sunazimuth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cameramsg::clear_has_sunazimuth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cameramsg::clear_sunazimuth() {
  sunazimuth_ = 0;
  clear_has_sunazimuth();
}
inline double cameramsg::sunazimuth() const {
  // @@protoc_insertion_point(field_get:cameramsg.sunazimuth)
  return sunazimuth_;
}
inline void cameramsg::set_sunazimuth(double value) {
  set_has_sunazimuth();
  sunazimuth_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.sunazimuth)
}

// required double sunaltitude = 9;
inline bool cameramsg::has_sunaltitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cameramsg::set_has_sunaltitude() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cameramsg::clear_has_sunaltitude() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cameramsg::clear_sunaltitude() {
  sunaltitude_ = 0;
  clear_has_sunaltitude();
}
inline double cameramsg::sunaltitude() const {
  // @@protoc_insertion_point(field_get:cameramsg.sunaltitude)
  return sunaltitude_;
}
inline void cameramsg::set_sunaltitude(double value) {
  set_has_sunaltitude();
  sunaltitude_ = value;
  // @@protoc_insertion_point(field_set:cameramsg.sunaltitude)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
